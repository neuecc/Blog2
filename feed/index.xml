<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:a10="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>neue cc</title>
    <link>http://neue.cc/</link>
    <description>C# Technical Blog</description>
    <language>ja</language>
    <lastBuildDate>Tue, 04 Jan 2022 14:30:04 +0900</lastBuildDate>
    <item>
      <guid isPermaLink="true">https://neue.cc/2021/12/31.html</guid>
      <link>https://neue.cc/2021/12/31.html</link>
      <title>2021年を振り返る</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2021/12/31.html"&gt;2021年を振り返る&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2021-12-31&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;例年、30日に投稿しているはずなのですが、今年は、どうしても今年中に作りきりたいという思いで&lt;a href="https://neue.cc/2021/12/30.html"&gt;ConsoleAppFramework v4&lt;/a&gt;のリリースをしてしまったので31日で。今年の後半から道具をガラーッと変えて、それがいい感じに作用していったので、なんか満足した気でいます。&lt;/p&gt;
&lt;h2&gt;Heyをとにかく薦めたい&lt;/h2&gt;
&lt;p&gt;今年良かったもの第一位は&lt;a href="https://hey.com/"&gt;Hey&lt;/a&gt;です。Ruby on Rails作者のDHHがやってる会社(Basecamp)のメールサービスなのですが、これが抜群によく出来てる！今までメール一ヶ月放置は当たり前、未読1万件、みたいな状態だったのですが、After Heyでは未読0。すごい。メーラー変えただけでこんな変わるとは。よく出来たツールは人を変えるね。&lt;/p&gt;
&lt;p&gt;どうしてもたまりがちな、スパムではないけど自分にとってはスパムに等しいもの（なんだかんだで送られてくる広告メールとかね）を、実質スパム扱いして、一生このメールは見ないという設定をワンポチでできるのが小気味よい。ワンポチどころか、最初のメール受信時に強制的に決めさせることで（決めないとメールが受信ボックスに入らないので、決めるしかない）、最初に使うときの罪悪感というか、とはいえ見るかもしれないしー、役に立つときもあるかもしれないしー、みたいななんとなくある抵抗感みたいなのを、その手で実行させ続けることにより薄れさせていく手腕は見事というほかない。&lt;/p&gt;
&lt;p&gt;メールを3分類、読むものとフィード的に見るもの（メルマガとかGitHubのWatchとか）と、領収書系で分けたというのもセンスを感じる。領収書は、例えばKindleで購入するたびに買いましたメールは、捨てるのもアレだけど別に自明すぎて見たくはない、ものが溜まっていくとメールボックスがウザいことになる、を専用の置き場を用意しました、で解決しているのはなるほどなー、と。フィード的なのは全部連結されているので、スクロールさせてバッと流し見で終わらせられるのも良い。&lt;/p&gt;
&lt;p&gt;細かいフィルターはできないけど、そもそも細かいフィルターなんて作るの面倒だしメンテ不能になるだけだから作るんじゃねえ、俺達の考えた最高のRailに乗ってりゃあいいんだよ、という押し付けがましさ全開の思想性溢れるのが、いいですね。そういうの、嫌いじゃないです。DHHの語るプログラミング的な思想も好きですしね、私は。Rubyは使いませんが、DHHの思想には納得できるものがめちゃくちゃ多くて割と好きなので。&lt;/p&gt;
&lt;p&gt;メールアドレスという、なんだかんだで変えられない、変えにくいものなのに、 &lt;code&gt;hey.com&lt;/code&gt; を使え！というのは中々ハードル高いのですが(基本的に汎用メーラーとしては使えず、専用メールアドレスが必要。GMailのクライアントにもPOP3クライアントにもならない)、今回私は10年以上使ってきたプロバイダのメールアドレスが不慮の事故により完全消滅したので、思い切って乗り換えることができました。結果、良かった。怪我の功名ということで。&lt;/p&gt;
&lt;h2&gt;iPad miniがとにかく良い&lt;/h2&gt;
&lt;p&gt;タブレットは、というかiPadはなんだかんだで今まで色々なサイズのものを買ってきました。普通のもAirもPro 13インチも。そしてほとんど全く使わなかったのですが……！なんか面倒くさくてねー、重いしー、と。で、iPhoneがPro Maxで大きいから、そこまでサイズ変わらないしねえと思ってminiだけは手を出さなかったのですが、世間でiPad mini 6があまりにも評判がいいので、じゃあまぁ試してみるかと買ったら、なるほど納得！これは超いい！最高……！&lt;/p&gt;
&lt;p&gt;やっぱ重さとサイズ感ですかね。これなら手軽に持ち運べる（今の時期コートとかだったらポケットにすら入る）し、片手で持てるというのが読みやすさにもめっちゃ寄与してる。デカいと手も疲れるし、ちゃっと手にとってソファで読もうとかいう気になれなかったわけですが、このサイズ感は絶妙、でした。大きさ的にも全然iPhone Pro Maxよりは明らかに大きくて、雑誌も十分読めるレベルで、漫画は快適。&lt;/p&gt;
&lt;p&gt;iPad miniのサイズのままで高級路線（有機EL積んでもらうとか）して欲しいですね。&lt;/p&gt;
&lt;p&gt;で、とても気に入ったので、いい感じのスタンドないかなあと思って選んだのが&lt;a href="https://www.moftjapan.com/products/moft-x-tablet-stand"&gt;MOFT X&lt;/a&gt;。ちょうどiPad mini 6用のサイズのものが出たのでこれがまた快適。どこでもいつでもさっくりスタンドになるのがこんなに良いとは。厚すぎない/重すぎないので、背中に常時貼り付けている状態でも苦にならないし。なんだったらカメラの出っ張り（うざい！）が相殺されて、平らなところにおいてもガタつかなくなったのが最高。&lt;/p&gt;
&lt;h2&gt;5K2Kは捗る&lt;/h2&gt;
&lt;p&gt;家の作業環境に割と不満があって、特にモニタ環境が良くなかった（32インチ4K + WQXGAの組合わせ、別に悪くはないんですけどね）ので、5K2K(5120x2160)モニタに変更。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/147818725-e1529666-172f-40fe-aa69-0491a27091d9.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;現状だとこの解像度は&lt;a href="https://www.dell.com/ja-jp/shop/dell-u4021qw-40%E3%82%A4%E3%83%B3%E3%83%81%E3%83%AF%E3%82%A4%E3%83%89%E6%9B%B2%E9%9D%A2usb-c-hub-%E3%83%A2%E3%83%8B%E3%82%BF-5k2k-21-9-ips%E9%9D%9E%E5%85%89%E6%B2%A2-tbhdmix2dprj45-%E9%AB%98%E3%81%95%E8%AA%BF%E6%95%B4/apd/210-aypy/%E3%83%A2%E3%83%8B%E3%82%BF%E3%83%BC-%E3%83%A2%E3%83%8B%E3%82%BF%E3%83%BC%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B5%E3%83%AA%E3%83%BC"&gt;Dell U4021QW&lt;/a&gt;一択。40インチは大きいかなーと思ったんですが、横に長いから高さ的には今まで使ってた32インチとそう変わらず、ですかね。デカいっちゃあデカですが、こんなもんかな、という感じでもある。この机も横1200の机でそんあ大きい机じゃないんですが、ジャストサイズぐらいで収まりますし。&lt;/p&gt;
&lt;p&gt;人によっては100%サイズで使うのは小さい、と思ってしまいそうなところですが、私的には人体改造済み(&lt;a href="https://www.sannoclc.or.jp/hospital/icl/"&gt;ICL&lt;/a&gt;というレンズを眼球に埋める手術をしたので)なので問題なし、ということで100%サイズで使っています。&lt;/p&gt;
&lt;p&gt;このサイズ、いい感じに視野に全部収まるので、デュアルやトリプルよりも快適さあります。今まで、最大で5画面ぐらいまでモニタ増やしてきたのですが、結局メイン以外のものは首をふるのもダルくてそんなに使える感じではないし、音楽プレイヤーのプレイリストを並べるとかだったら、置いてるiPadで聞いて表示しとけばいいじゃん、ということで、全然問題なし。&lt;/p&gt;
&lt;p&gt;ツール補助がないとウィンドウがとっちらかってしまうので、Microsoft PowerToysの&lt;a href="https://docs.microsoft.com/ja-jp/windows/powertoys/fancyzones"&gt;FancyZones&lt;/a&gt;を使って割り振ってます。これのグリッド吸着がまた使いやすくて(Shift押しながら移動すると、事前定義したグリッドに張り付く)いいですね。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/147815474-6deb6990-da99-44e0-9d29-c2c39917395e.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;中央を広めに取りつつ(主にVisual Studioか、ブラウザがっつし見たりするときはブラウザを置く)、右にブラウザ、左は半分に割って下にGitKraken、上にExplorerみたいなパターンが多めでしょうか。Visual Studio + Unityとか、作業域的に大きく取りたいものを並べる場合は2分割のグリッドパターンも用意して、切り替えるようにしています。&lt;/p&gt;
&lt;p&gt;3分割みたいなのは、5K2Kぐらいの解像度がないと出来ないので、この解像度のモニタ増えてくれーって感じですね。選択肢がDELLしかないのは寂しい。液晶自体の画質もそんな良いわけでもないので、もう少し良いのが欲しい。しっかりしたHDR対応のが欲しい。120Hz出るのが欲しい。とか、思うところはそれなりにあります。とはいえ、それでも大満足です。もうこれ以外の解像度のモニタには戻りたくないなあ。&lt;/p&gt;
&lt;p&gt;と、いうわけで、モニタ変更のためにゴミ溜めだった机をキレイにした記念で、来年はずっとすっきりした机をキープするぞ、という強い気持ちがあります！単純に机がキレイになってたほうが作業やりやすいですしねー、やっぱゴミ溜めはダメですよ。&lt;/p&gt;
&lt;p&gt;キーボードをREALFORCE R3にしたのですが（前はR2でした）、今回からデフォ無線なんですね。キーボードなんて置きっぱなしだから別に有線でいいだろ、と思ってたんですが、これはこれでアリというか、めっちゃいいじゃん？と。サッとキーボードどかしたりがやりやすくなったのがいいですね、デスクで他の作業がやりやすくて。Bluetoothだから、そのままiPadやiPhoneに繋げてもいいし。いやあ、時代は無線。ケーブルがなくなってすっきりするし。&lt;/p&gt;
&lt;p&gt;と、いうわけで、無線環境が気に入ったので、デカい有線ヘッドフォン＋ヘッドフォンアンプを使っていたのですが(MDR-Z1R + TA-ZH1ES、合計40万もした)、撤去して、写真には写ってませんがAirPods Max買いました。これも満足。いやー、正直あんま有線ヘッドフォン使ってなかったんですよね、面倒くさくて。電源入れるだけ、ではありんですがやっぱ面倒くさくて。ケーブル太くて邪魔くさいし（無駄にケーブル換装して太いケーブルにしてしまったのも良くなかった）。PC専用になっちゃってiPhoneの音も聞けないし。&lt;/p&gt;
&lt;p&gt;AirPods MaxだとiPhone/iPad/PCの切り替えが自由なのが想像の100億倍良いなあ、と。音質面でも悪くないし、Apple Musicの空間オーディオとの相性は抜群でこれはめちゃくちゃいいし、さすがのヘッドフォン型なのでAirPods Proよりも音がいい。デジタルクラウンによる音量調整は最高に便利。ゲーム用に&lt;a href="https://www.dolby.com/jp/ja/apps/access.html"&gt;Dolby Access&lt;/a&gt;入れてDolby Atmos for Headphonesを有効化してますが、これもなかなか良い。&lt;/p&gt;
&lt;p&gt;スピーカーも置いてたんですが、撤去しました。簡単なものはモニタ内蔵のしょぼいスピーカーで済ませる。ちゃんと聴きたい場合はAirPods Max。それでいいや、と。割り切ったら、全然それでいいじゃん、という気になりました。そもそもあまりデスクトップのスピーカーを稼働させてないしなあ、というのもありますが。&lt;/p&gt;
&lt;h2&gt;時代は無線&lt;/h2&gt;
&lt;p&gt;スピーカー撤去の代わりに、じゃないのですが、今年はホームシアターシステムとして&lt;a href="https://www.sony.jp/home-theater/products/HT-A9/"&gt;HT-A9&lt;/a&gt;を導入したのですが、これも満足度高い。何がいいって、設置が無線で自由度高い。なんか今年は無線化の年ですね、時代は無線。&lt;/p&gt;
&lt;p&gt;昔は9.1chにしてたり5.1chだったりでスピーカー並べてたのですが、諸事情あってここ数年はサウンドバーを使ってたんですが、とにかくその音質には不満だったんですね。かといってリアスピーカー並べる気力も起きずというか、そのスペースも確保できない状態なのでどうしたものか、と思っていたところに出たのが、フル無線4.1chシステムのHT-A9。360 Spatial Sound MappingでDolby Atomos時代なサラウンドにするという謳い文句もいいし、設置レイアウトが自由というのがいい。オフィシャルサイトのこの画像を見て購入を決めました。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/147816734-1c61b5b5-3150-47e0-b4f1-23aa0973f436.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;HT-A9の画像、どれもフロントスピーカーの置き方が「わざとらしく」でたらめなんですよね、高さを絶対揃えない。これは、メーカーが別に高さ揃えなくていいんですよ、と推奨してるということなんですが、実際うちでの設置環境もフロントの高さは揃ってないです。揃えられないので。リアも位置も高さもグチャグチャで、適当における棚に置いてるだけって感じです。フロントもリアも無線スピーカーなので、そういう適当配置がめっちゃやりやすい。&lt;/p&gt;
&lt;p&gt;それでもちゃんとサウランドするし、360 Spatialな音は心地良い。ただたんに音楽鳴らすだけにも使ってますね、起動も早いのでSpotify Connectでよく流してます。&lt;/p&gt;
&lt;p&gt;アンプのサイズが小さい(Apple TVが一回り大きくなった程度)というのも設置が楽になった要因で、いやほんとよく出来てますね。確かに、全部無線なのでスピーカーを駆動するアンプは各スピーカー内蔵状態だから、本体をAVアンプあるあるなクソデカサイズにしなくてもいいんですね。そういうところにも無線の良さが出てますね。&lt;/p&gt;
&lt;h2&gt;来年に向けてのC#&lt;/h2&gt;
&lt;p&gt;こうしてダラダラと文章書いたり、そもそもこの12月はやたら記事量産しているなあ、というのは、ブログ書く環境が変わったからです！10年前のWordPressから&lt;a href="https://neue.cc/2021/11/21.html"&gt;自家製サイトジェネレーターへの変更&lt;/a&gt;によって快適度上がったからですね。いやあ、書きやすいと書く気になります。環境大事。&lt;/p&gt;
&lt;p&gt;そんなわけでCysharpはC#はの環境を良くすることに今年一年もちゃんと務められたんじゃないでしょーか。Cysharpからの新規リリース/大型更新は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Cysharp/ProcessX"&gt;ProcessX Zx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Cysharp/MessagePipe"&gt;MessagePipe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Cysharp/Kokuban"&gt;Kokuban&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Cysharp/CsprojModifier"&gt;CsprojModifier&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Cysharp/NativeMemoryArray"&gt;NativeMemoryArray&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Cysharp/ConsoleAppFramework/"&gt;ConsoleAppFramework v4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Cysharp/ObservableCollections"&gt;ObservableCollections&lt;/a&gt; ←ReadMe/解説がまだな仕掛品&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MessagePipeが大きめかな？&lt;/p&gt;
&lt;p&gt;こうした公開していく姿勢、足を少しでも止めてはダメだという思いがあるので、作ろうと思ったらできるだけ勢い持って作りきるようにしています（もちろん途中で止まってしまったものも幾つかありはしますが）。毎年継続的に、Cysharp全体としても既に20個以上公開していて、ヒット作もそれなりの量を出し続けていられる状態は中々のことだと思います。&lt;/p&gt;
&lt;p&gt;と、いうわけで、OSSを通じてCysharpをアピールしていくという方向では、良い点をあげてもいいかな、と思うのですが、反面、他の仕事に集中しきれていないのではないかというのが散見していたのは個人的にはマイナスです。今年は「世の中の開発生産性を革命的に改善するプロダクト」の作成に着手し（構想は前からあったのですがようやく始動）、徐々に人も集めだしてCysharpが割とまともな（？）会社っぽく動き出した頃合いでもあるんですが、私がボトルネックになりがち、な状況になりがちなのが、まぁいくないですねえ、と。これはグラニの頃もそうだったので、なんかもうそういうもの感もあるんですが、今回は私が主導してやってるので尻拭いしてくれる人もいないので純粋に良くない！&lt;/p&gt;
&lt;p&gt;というわけで、来年の中旬までにその「世の中の開発生産性を革命的に改善するプロダクト」をリリースするために全力でやっていくぞ、というのが目標です。実際出来上がってきて、かなりいいものになりそうな手応えはあるので、早く世の中に出して評価されたいものです。&lt;/p&gt;
&lt;p&gt;まぁ、そんなわけで大きな何かがあったわけではないですが、確実に前進した年だと思うので、来年は爆発させる年にしましょう。&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Fri, 31 Dec 2021 00:00:00 +0900</pubDate>
      <a10:updated>2021-12-31T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2021/12/30.html</guid>
      <link>https://neue.cc/2021/12/30.html</link>
      <title>ConsoleAppFramework v4 - Minimal API for CommandLine tool</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2021/12/30.html"&gt;ConsoleAppFramework v4 - Minimal API for CommandLine tool&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2021-12-30&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;皆さん .NET 6で追加された&lt;a href="https://docs.microsoft.com/ja-jp/aspnet/core/fundamentals/minimal-apis"&gt;Minimal API&lt;/a&gt;使ってみました？最初は別にいらんやろ、とか思ってたんですが、いや、これ正直めっちゃ凄い、いい。まぁDelegateベースで書くかどうかは別として（書かないかなー）、謎Startupを葬り去ってBuilder/Runが素直に繋がった形が美しい。Top level statementとの相性も良いので、もうこっちのAPI以外で作る気しないなあ。&lt;/p&gt;
&lt;p&gt;さて、ところでConsoleAppFrameworkです。今までクラスが必要だったんですよね、たった一個のメソッドを実装するにも。それがTop level statementとの相性が悪い。Top level statementだけで完結できるとき、クラスって作りたくないんですよね。と、いうわけで、そろそろ大改修が必要かなーと思っていたところにMinimal APIですよ。特にその場でラムダ式でばしばしAPI作っていくスタイルは、むしろコマンドラインツールのほうがマッチするじゃんどう考えても？&lt;/p&gt;
&lt;p&gt;と、いうわけで大改修して、Minimal APIベースになったv4、作りました。何が凄いって、一行でコマンドライン引数をパースしてハンドラー定義できちゃうんですね。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/147662718-f7756523-67a9-4295-b090-3cfc94203017.png" alt="" /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;ConsoleApp.Run(args, (string name) =&amp;gt; Console.WriteLine($&amp;quot;Hello {name}&amp;quot;));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これは嘘偽りなくNuGetからダウンロードしたら、そのままでこう書けます。C# 10.0のglobal using(をNuGetのライブラリ側に埋め込むというEvilな手法を使ってます)と、ラムダ式の推論の向上によって実現しました。内側では、Minimal APIの実現のために Microsoft.Extensions.* 側にもかなり改修が入っていたので、それをそっくりそのまま利用できました。そういう意味で、 .NET 6になった今だからようやく作れた形になりますね。もちろんv1~v3までの蓄積のお陰というところもあります。集大成……！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Cysharp/ConsoleAppFramework/"&gt;Cysharp/ConsoleAppFramework&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;さて、Runはちょっとウケ狙いなところもあるんですが、それ以外のAPIもBuilderベースになったので、だいぶ様変わりしています。ただし特徴としてGeneric Hostの上に乗っているというのは変わらないので、DbContext埋めたりappconfig.jsonから取ったりというのは、変わらずスムーズにできます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// You can use full feature of Generic Host(same as ASP.NET Core).

var builder = ConsoleApp.CreateBuilder(args);
builder.ConfigureServices((ctx,services) =&amp;gt;
{
    // Register EntityFramework database context
    services.AddDbContext&amp;lt;MyDbContext&amp;gt;();

    // Register appconfig.json to IOption&amp;lt;MyConfig&amp;gt;
    services.Configure&amp;lt;MyConfig&amp;gt;(ctx.Configuration);

    // Using Cysharp/ZLogger for logging to file
    services.AddLogging(logging =&amp;gt;
    {
        logging.AddZLoggerFile(&amp;quot;log.txt&amp;quot;);
    });
});

var app = builder.Build();

// setup many command, async, short-name/description option, subcommand, DI
app.AddCommand(&amp;quot;calc-sum&amp;quot;, (int x, int y) =&amp;gt; Console.WriteLine(x + y));
app.AddCommand(&amp;quot;sleep&amp;quot;, async ([Option(&amp;quot;t&amp;quot;, &amp;quot;seconds of sleep time.&amp;quot;)] int time) =&amp;gt;
{
    await Task.Delay(TimeSpan.FromSeconds(time));
});
app.AddSubCommand(&amp;quot;verb&amp;quot;, &amp;quot;childverb&amp;quot;, () =&amp;gt; Console.WriteLine(&amp;quot;called via 'verb childverb'&amp;quot;));

// You can insert all public methods as sub command =&amp;gt; db select / db insert
// or AddCommand&amp;lt;T&amp;gt;() all public methods as command =&amp;gt; select / insert
app.AddSubCommands&amp;lt;DatabaseApp&amp;gt;();

app.Run();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;単独のコマンドラインツール用に使ってもいいのですが、ASP.NETのウェブアプリが他にあって、それのバッチを作りたいみたいなときに、こうしたコンフィグの共通化はめっちゃ便利に使えるはずです。ConfigureServicesのコードはまんま一緒にできて、そのままDIできますからね。&lt;/p&gt;
&lt;p&gt;また、引き続き &lt;code&gt;AddCommands&amp;lt;T&amp;gt;&lt;/code&gt; や &lt;code&gt;AddAllCommandType&lt;/code&gt; によって、メソッド定義するだけで大量のコマンドを一括追加も可能になっています。&lt;/p&gt;
&lt;h2&gt;v3 -&amp;gt; v4の破壊的変更&lt;/h2&gt;
&lt;p&gt;破壊的変更、は沢山あるのですが、基本的に今までの使い方をしている場合は互換オプションで動くようにしたので、アップデートしたから壊れるということはない、はずです。v4からは&lt;code&gt;ConsoleApp.Create/CreateBuilder&lt;/code&gt; 経由で作るのが基本なのですが、v3は &lt;code&gt;Host.CreateDefaultBuilder().RunConsoleAppFrameworkAsync&amp;lt;T&amp;gt;()&lt;/code&gt; 経由なので、ちょうど互換性オプションを突っ込むのに都合が良かったんですね。なお、&lt;code&gt;RunConsoleAppFrameworkAsync&lt;/code&gt;はエディタから見えないようにしてます。今後は非推奨で、本当に互換のためだけに残してます。&lt;/p&gt;
&lt;p&gt;まず変わったところは、デフォルトで長いオプション名が&lt;code&gt;--&lt;/code&gt;、短いオプション名が&lt;code&gt;-&lt;/code&gt;になりました。v3では&lt;code&gt;-&lt;/code&gt;が幾つついていてもいいというゆるふわマッチングだったのですが、(dotonet toolsと同じように)厳格化しています。&lt;/p&gt;
&lt;p&gt;また、デフォルトのコマンド/オプション名の変換ルールが単純なlower化から、hoge-hugaというlowerなkebab-caseになりました。これもdotnet tools合わせですね。&lt;/p&gt;
&lt;p&gt;また、&lt;code&gt;AddCommands&amp;lt;T&amp;gt;&lt;/code&gt;した場合の挙動(v3では&lt;code&gt;RunConsoleAppFrameworkAsync&amp;lt;T&amp;gt;&lt;/code&gt;した場合)が、全てのpublicメソッドをコマンドとして追加するようになりました。デフォルト(ルート)コマンドにしたい場合は&lt;code&gt;[RootCommand]&lt;/code&gt;属性を付与してくださいということで。これは&lt;code&gt;AddSubCommand&amp;lt;T&amp;gt;&lt;/code&gt;した時と挙動を合わせたかったからです、違うと一貫性がなくて戸惑うので。&lt;/p&gt;
&lt;p&gt;と、いうわけで、互換性モードで動かした場合は&lt;code&gt;ConsoleAppOptions&lt;/code&gt;は以下のような変更で動くようになっています。よきかなよきかな。（それとargsのコマンド名でHoge.Hugaが来てたらHoge Hugaに分解するのも、この互換性モードだけの挙動です）&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;options.StrictOption = false;
options.NoAttributeCommandAsImplicitlyDefault = true;
options.NameConverter = x =&amp;gt; x.ToLower();
options.ReplaceToUseSimpleConsoleLogger = false;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そうだ、それとCtrl+Cした場合に、正しくCancellationTokenをハンドリングしていない場合でも、タイムアウトをハンドリングしてabortするようになりました。これは、なんか強制終了できなくてウゼーってなりがちというか、私自身よく引っかかってヤバかったので。むしろこれは今までがバグに近くて、正しく&lt;code&gt;HostOptions.ShutdownTimeout&lt;/code&gt;を処理していないせいでした。&lt;/p&gt;
&lt;p&gt;ちなみにこのタイムアウト時間はデフォルトは5秒で、ConfigureHostOptions(地味にこれは.NET 6(というかMicrosoft.Extensionsのv6)からの新API)で変更できます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var app = ConsoleApp.CreateBuilder(args)
    .ConfigureHostOptions(options =&amp;gt;
    {
        // change timeout.
        options.ShutdownTimeout = TimeSpan.FromMinutes(30);
    })
    .Build();
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;無計画にアドホックに作っていったせいで、どうにもクソコードすぎて、改修にめっちゃ手間取ったというか内部的にはほぼ作り直した……。弄るのだるくて嫌だなあと内心実際今まで思ってたんですが、やはりとても嫌なコードであった。v1の時の最初の発想が Class.Method にパラメータ分解してバッチを大量に作りたい(そもそもライブラリ名もMicroBatchFrameworkだったし)というものだけだったのが、徐々に汎用コマンドラインツールに進化していって、都度、適当に追加していった結果ではある。&lt;/p&gt;
&lt;p&gt;今回がっつし仕切り直したので、しばらくはメンテが楽になれるかなあ、という感じで、よきかなよきかな。&lt;/p&gt;
&lt;p&gt;まぁしかしC# 10.0は地味にヤバいですよ！使えば使うほど味が出てくるというか、最近ようやく手に馴染んで、よくわかってきた感じです。なんというか、とにかく、めっちゃいい。それとC# 10.0 + ConsoleAppFrameworkは全言語見渡しても最強のコマンドラインツール作成ライブラリじゃないです？いや、API自体のできの良さはほとんど ASP .NET CoreのMinimal APIのコピーにすぎないんですが、まぁしかしそれでもやっぱ、これはかなり良い感じじゃないかという手応えがあります。&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Thu, 30 Dec 2021 00:00:00 +0900</pubDate>
      <a10:updated>2021-12-30T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2021/12/22.html</guid>
      <link>https://neue.cc/2021/12/22.html</link>
      <title>NativeMemoryArray - .NET 6 APIをフル活用した2GB超えの巨大データを扱うライブラリ</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2021/12/22.html"&gt;NativeMemoryArray - .NET 6 APIをフル活用した2GB超えの巨大データを扱うライブラリ&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2021-12-22&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;&lt;a href="https://qiita.com/advent-calendar/2021/microsoft"&gt;.NET 6 Advent Calendar 2021&lt;/a&gt;の12日の代理投稿となります。プレゼント付きですと！？&lt;a href="https://www.balmuda.com/jp/brew/special-model"&gt;BALMUDA The Brew STARBUCKS RESERVE LIMITED EDITION&lt;/a&gt;が欲しいです！&lt;/p&gt;
&lt;p&gt;さて、先程NativeMemoryArrayという新しいライブラリを作成し、公開しました。.NET Standard 2.0でも動作しますが、全体的に .NET 6 の新API群(NativeMemory, Scatter/Gather I/O)を活かすための作りになっていますので、今回のAdvent Calendarにもピッタリ。実用性も、ある……！あります……！もちろんUnity版も用意してあります（NativeArrayと何が違うって？まぁ違うと言えば違います）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Cysharp/NativeMemoryArray"&gt;GitHub - Cysharp/NativeMemoryArray&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C#には配列、特にbyte[]を扱う上で大きな制約が一つあります。それは、一次元配列の上限値が0x7FFFFFC7(2,147,483,591)ということ。int.MaxValueよりちょっと小さめに設定されていて、ようするにざっくり2GBちょいが限界値になっています。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;この限界値は、正確には .NET 6 でひっそり破壊的変更が行われましたので、.NET 6とそれ以外で少し異なります。詳しくは後で述べます。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;この2GBという値は、int Lengthの都合上しょうがない(intの限界値に引っ張られている)のですが、昨今は4K/8Kビデオや、ディープラーニングの大容量データセットや、3Dスキャンの巨大点群データなどで、大きな値を扱うことも決して少ないわけではないため、2GB制約は正直厳しいです。そして、この制約は&lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt;や&lt;code&gt;Memory&amp;lt;T&amp;gt;&lt;/code&gt;であっても変わりません(Lengthがintのため)。&lt;/p&gt;
&lt;p&gt;ちなみに&lt;code&gt;LongLength&lt;/code&gt;は多次元配列における全次元の総数を返すためのAPIのため、一次元配列においては特に意味をなしません。.NET Frameworkの設定である&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/framework/configure-apps/file-schema/runtime/gcallowverylargeobjects-element"&gt;gcAllowVeryLargeObjects&lt;/a&gt;も、構造体などを入れた場合の大きなサイズを許容するものであり(例えば4バイト構造体の配列ならば、2GB*4のサイズになる)、要素数の限界は超えられないため、byte[]としては2GBが限界であることに変わりはありません。&lt;/p&gt;
&lt;p&gt;こうした限界に突き当たった場合は、ストリーミング処理に切り替えるか、またはポインタを使って扱うかになりますが、どちらもあまり処理しやすいとは言えませんし、必ずしもインメモリで行っていた操作が代替できるわけではありません（ポインタなら頑張れば最終的にはなんとでもなりますが）。&lt;/p&gt;
&lt;p&gt;そこで、2GB制約を超えつつも、新しいAPI群(&lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;IBufferWriter&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;ReadOnlySequence&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;RandomAccess.Write/Read&lt;/code&gt;, &lt;code&gt;System.IO.Pipelines&lt;/code&gt;など)と親和性の高いネイティブメモリを裏側に持つ配列（みたいな何か）を作りました。&lt;/p&gt;
&lt;p&gt;これによって、例えば巨大データの読み込み/書き込みも、 .NET 6の新Scatter/Gather APIの&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/api/system.io.randomaccess?view=net-6.0"&gt;RandomAccess&lt;/a&gt;を用いると、簡単に処理できます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// for example, load large file.
using var handle = File.OpenHandle(&amp;quot;4GBfile.bin&amp;quot;, FileMode.Open, FileAccess.Read, options: FileOptions.Asynchronous);
var size = RandomAccess.GetLength(handle);

// via .NET 6 Scatter/Gather API
using var array = new NativeMemoryArray&amp;lt;byte&amp;gt;(size);
await RandomAccess.ReadAsync(handle, array.AsMemoryList(), 0);

// iterate Span&amp;lt;byte&amp;gt; as chunk
foreach (var chunk in array)
{
    Console.WriteLine(chunk.Length);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Scatter/Gather APIに馴染みがなくても、&lt;code&gt;IBufferWriter&amp;lt;T&amp;gt;&lt;/code&gt;や &lt;code&gt;IEnumerable&amp;lt;Memory&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; を経由してStreamで処理する手法も選べます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public static async Task ReadFromAsync(NativeMemoryArray&amp;lt;byte&amp;gt; buffer, Stream stream, CancellationToken cancellationToken = default)
{
    var writer = buffer.CreateBufferWriter();

    int read;
    while ((read = await stream.ReadAsync(writer.GetMemory(), cancellationToken).ConfigureAwait(false)) != 0)
    {
        writer.Advance(read);
    }
}

public static async Task WriteToAsync(NativeMemoryArray&amp;lt;byte&amp;gt; buffer, Stream stream, CancellationToken cancellationToken = default)
{
    foreach (var item in buffer.AsMemorySequence())
    {
        await stream.WriteAsync(item, cancellationToken);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;あるいは&lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt;のSliceを取り出して処理してもいいし、&lt;code&gt;ref T this[long index]&lt;/code&gt;によるインデクサアクセスやポインタの取り出しもできます。 .NET 6時代に完全にマッチしたAPIを揃えることで、標準の配列と同等、もしくはそれ以上の使い心地に仕上げることによって、C#の限界をまた一つ超える提供できたと思っています。&lt;/p&gt;
&lt;p&gt;とはいえもちろん、 .NET Standard 2.0/2.1 にも対応しているので、非 .NET 6なAPIでも大丈夫です、というかScatter/Gather API以外は別に今までもありますし普通に使えますので。&lt;/p&gt;
&lt;p&gt;普通の配列的にも使えます。GC避けには、こうした普通のAPIを使っていくのでも便利でしょう、&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// call ctor with length, when Dispose free memory.
using var buffer = new NativeMemoryArray&amp;lt;byte&amp;gt;(10);

buffer[0] = 100;
buffer[1] = 100;

// T allows all unmanaged(struct that not includes reference type) type.
using var mesh = new NativeMemoryArray&amp;lt;Vector3&amp;gt;(100);

// AsSpan() can create Span view so you can use all Span APIs(CopyTo/From, Write/Read etc.).
var otherMeshArray = new Vector3[100];
otherMeshArray.CopyTo(mesh.AsSpan());
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;&lt;code&gt;NativeMemoryArray&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;NativeMemoryArray&amp;lt;T&amp;gt;&lt;/code&gt;はwhere T : unmanagedです。つまり、参照型を含まない構造体にしか使えません。まぁ巨大配列なんて使う場合には参照型含めたものなんて含めてんじゃねーよなので、いいでしょうきっと。巨大配列で使えることを念頭においてはいますが、別に普通のサイズの配列として使っても構いません。ネイティブメモリに確保するので、ヒープを汚さないため、適切な管理が行える箇所では便利に使えるはずです。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt;との違いですが、&lt;code&gt;NativeMemoryArray&amp;lt;T&amp;gt;&lt;/code&gt;そのものはクラスなので、フィールドに置けます。&lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt;と違って、ある程度の長寿命の確保が可能ということです。&lt;code&gt;Memory&amp;lt;T&amp;gt;&lt;/code&gt;のSliceが作れるため、Async系のメソッドに投げ込むこともできます。また、もちろん、&lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt;の長さの限界はint.MaxValueまで(ざっくり2GB)なので、それ以上の大きさも確保できます。&lt;/p&gt;
&lt;p&gt;Unityにおける&lt;code&gt;NativeArray&amp;lt;T&amp;gt;&lt;/code&gt;との違いですが、&lt;code&gt;NativeArray&amp;lt;T&amp;gt;&lt;/code&gt;はUnity Engine側との効率的なやりとりのための入れ物なので、あくまでC#側で使うための&lt;code&gt;NativeMemoryArray&amp;lt;T&amp;gt;&lt;/code&gt;とは全然役割が異なります。まぁ、必要に思えない状況ならば、おそらく必要ではありません。&lt;/p&gt;
&lt;p&gt;主な長所は、以下になります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ネイティブメモリから確保するためヒープを汚さない&lt;/li&gt;
&lt;li&gt;2GBの制限がなく、メモリの許す限り無限大の長さを確保できる&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IBufferWriter&amp;lt;T&amp;gt;&lt;/code&gt; 経由で、MessagePackSerializer, System.Text.Json.Utf8JsonWriter, System.IO.Pipelinesなどから直接読み込み可能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ReadOnlySequence&amp;lt;T&amp;gt;&lt;/code&gt; 経由で、MessagePackSerializer, System.Text.Json.Utf8JsonReaderなどへ直接データを渡すことが可能&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IReadOnlyList&amp;lt;Memory&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;IReadOnlyList&amp;lt;ReadOnlyMemory&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; 経由で &lt;code&gt;RandomAccess&lt;/code&gt;(Scatter/Gather API)に巨大データを直接渡すことが可能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;あまりピンと来ない、かもしれませんが、使ってみてもらえれば分かる、かも。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NativeMemoryArray&amp;lt;T&amp;gt;&lt;/code&gt;の全APIは以下のようになっています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NativeMemoryArray(long length, bool skipZeroClear = false, bool addMemoryPressure = false)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;long Length&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ref T this[long index]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ref T GetPinnableReference()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Span&amp;lt;T&amp;gt; AsSpan()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Span&amp;lt;T&amp;gt; AsSpan(long start)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Span&amp;lt;T&amp;gt; AsSpan(long start, int length)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Memory&amp;lt;T&amp;gt; AsMemory()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Memory&amp;lt;T&amp;gt; AsMemory(long start)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Memory&amp;lt;T&amp;gt; AsMemory(long start, int length)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bool TryGetFullSpan(out Span&amp;lt;T&amp;gt; span)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IBufferWriter&amp;lt;T&amp;gt; CreateBufferWriter()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SpanSequence AsSpanSequence(int chunkSize = int.MaxValue)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MemorySequence AsMemorySequence(int chunkSize = int.MaxValue)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IReadOnlyList&amp;lt;Memory&amp;lt;T&amp;gt;&amp;gt; AsMemoryList(int chunkSize = int.MaxValue)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IReadOnlyList&amp;lt;ReadOnlyMemory&amp;lt;T&amp;gt;&amp;gt; AsReadOnlyMemoryList(int chunkSize = int.MaxValue)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ReadOnlySequence&amp;lt;T&amp;gt; AsReadOnlySequence(int chunkSize = int.MaxValue)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SpanSequence GetEnumerator()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void Dispose()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;AsSpan()&lt;/code&gt;, &lt;code&gt;AsMemory()&lt;/code&gt;はスライスのためのAPIです。取得したSpanやMemoryは書き込みも可能なため、 .NET 5以降に急増したSpan系のAPIに渡せます。SpanやMemoryには最大値(int.MaxValue)の限界があるため、lengthの指定がない場合は、例外が発生する可能性もあります。そこで&lt;code&gt;TryGetFullSpan()&lt;/code&gt;を使うと、単一Spanでフル取得が可能かどうか判定できます。また、&lt;code&gt;AsSpanSequence()&lt;/code&gt;, &lt;code&gt;AsMemorySequence()&lt;/code&gt;でチャンク毎のforeachで全要素を列挙することが可能です。直接foreachした場合は、&lt;code&gt;AsSpanSequence()&lt;/code&gt;と同様の結果となります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;long written = 0;
foreach (var chunk in array)
{
    // do anything
    written += chunk.Length;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ポインタの取得は、配列とほぼ同様に、そのまま渡せば0から(これは&lt;code&gt;GetPinnableReference()&lt;/code&gt;の実装によって実現できます)、インデクサ付きで渡せばそこから取れます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;fixed (byte* p = buffer)
{
}

fixed (byte* p = &amp;amp;buffer[42])
{
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;CreateBufferWriter()&lt;/code&gt; によって &lt;code&gt;IBufferWriter&amp;lt;T&amp;gt;&lt;/code&gt;を取得できます。これは&lt;code&gt;MessagePackSerializer.Serialize&lt;/code&gt;などに直接渡すこともできるほかに、先の例でも出しましたがStreamからの読み込みのように、先頭からチャンク毎に取得して書き込んでいくようなケースで便利に使えるAPIとなっています。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AsReadOnlySequence()&lt;/code&gt; で取得できる&lt;code&gt;ReadOnlySequence&amp;lt;T&amp;gt;&lt;/code&gt;は、&lt;code&gt;MessagePackSerializer.Deserialize&lt;/code&gt;などに直接渡すこともできるほかに .NET 5から登場した &lt;a href="https://docs.microsoft.com/ja-jp/dotnet/api/system.buffers.sequencereader-1?view=net-6.0"&gt;SequenceReader&lt;/a&gt;に通すことで、長大なデータのストリーミング処理をいい具合に行える余地があります。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;AsMemoryList()&lt;/code&gt;, &lt;code&gt;AsReadOnlySequence()&lt;/code&gt;は .NET 6から登場した&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/api/system.io.randomaccess?view=net-6.0"&gt;RandomAccess&lt;/a&gt;の&lt;code&gt;Read/Write&lt;/code&gt;に渡すのに都合の良いデータ構造です。プリミティブな処理なので使いにくいと思いきや、意外とすっきりと処理できるので、File経由の処理だったらStreamよりもいっそもうこちらのほうがいいかもしれません。&lt;/p&gt;
&lt;h2&gt;NativeMemory&lt;/h2&gt;
&lt;p&gt;.NET 6から&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/api/system.runtime.interopservices.nativememory?view=net-6.0"&gt;NativeMemory&lt;/a&gt;というクラスが新たに追加されました。その名の通り、ネイティブメモリを扱いやすくするものです。今までも&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/api/system.runtime.interopservices.marshal.allochglobal?view=net-6.0"&gt;Marshal.AllocHGlobal&lt;/a&gt;といったメソッド経由でネイティブメモリを確保することは可能であったので、何が違うのか、というと、何も違いません。実際NativeMemoryArrayの .NET 6以前版はMarshalを使ってますし。そして .NET 6 では Marshal.AllocHGlobal は NativeMemory.Alloc を呼ぶので、完全に同一です。&lt;/p&gt;
&lt;p&gt;ただしもちろん .NET 6 実装時にいい感じに整理された、ということではあるので、NativeMemory、いいですよ。NativeMemory.Allocがmalloc、NativeMemory.AllocZeroedがcalloc、NativeMemory.Freeがfreeと対応。わかりやすいですし。&lt;/p&gt;
&lt;p&gt;ちなみにゼロ初期化する NativeMemory.AllocZeroed に相当するものはMarshalにはないので、その点でも良くなったところです。&lt;code&gt;NativeMemoryArray&amp;lt;T&amp;gt;&lt;/code&gt;では、コンストラクタのskipZeroClear(&lt;code&gt;public NativeMemoryArray(long length, bool skipZeroClear = false)&lt;/code&gt;)によってゼロ初期化する/しないを選べます。デフォルトは（危ないので）初期化しています。非.NET 6版では、メモリ確保後に&lt;code&gt;Span&amp;lt;T&amp;gt;.Clear()&lt;/code&gt;経由で初期化処理を入れています。&lt;/p&gt;
&lt;h2&gt;真のArray.MaxValue&lt;/h2&gt;
&lt;p&gt;.NET 6以前では、配列の要素数はバイト配列(1バイト構造体の配列)と、それ以外の配列で異なる値がリミットに設定されていました。例えば&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/api/system.array?view=net-6.0"&gt;System.Arrayのドキュメント&lt;/a&gt;を引いてくると&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;配列のサイズは、合計で40億の要素に制限され、任意の次元の0X7FEFFFFF の最大インデックス (バイト配列の場合は0X7FFFFFC7、1バイト構造体の配列の場合) に制限されます。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;つまり、0X7FFFFFC7の場合と、0X7FEFFFFFの場合がある、と。&lt;/p&gt;
&lt;p&gt;と、いうはずだったのですが、.NET 6から&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/api/system.array.maxlength"&gt;Array.MaxLength&lt;/a&gt;というプロパティが新規に追加されて、これは単一の定数を返します。その値は、0X7FFFFFC7です。よって、いつのまにかひっそりと配列の限界値は(ちょびっと大きい方に)大統一されました。&lt;/p&gt;
&lt;p&gt;この変更は意外とカジュアルに行われ、まず最大値を取得する、ただし単一じゃないため型によって結果の変わる &lt;code&gt;Array.GetMaxLength&amp;lt;T&amp;gt;()&lt;/code&gt; を入れよう、&lt;a href="https://github.com/dotnet/runtime/pull/43301"&gt;という実装があがってきました&lt;/a&gt;。そうしたら、そのPR上での議論で、そもそも当初は最適化を期待したけど別にそんなことなかったし、統一しちゃってよくね？という話になり、そのまま限界値は統一されました。そして新規APIも無事、Array.MaxLengthという定数返しプロパティになりました。&lt;/p&gt;
&lt;p&gt;まぁ、シンプルになって良いですけどね。大きい方で統一されたので実害も特にないでしょうし。前述のSystem.Arrayのドキュメントは更新されてないということで、正しくは、.NET 6からは0x7FFFFFC7が限界で、その値はArray.MaxLengthで取れる。ということになります。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt;の限界値はint.MaxValueなので、限界に詰め込んだ&lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt;をそのままToArray()すると死ぬ、という微妙な問題が発生することがあるんですが、まぁそこはしょうがないね。&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;NativeArrayという名前にしたかったのですがUnityと被ってしまうので避けました。しょーがない。&lt;/p&gt;
&lt;p&gt;着手当時はマネージド配列のチャンクベースで作っていたのですが(&lt;a href="https://gist.github.com/neuecc/e6293b1d88244cf942753d6408b3e966"&gt;LargeArray.cs&lt;/a&gt;)、Sliceが作りづらいし、ネイティブメモリでやったほうが出来ること多くて何もかもが圧倒的にいいじゃん、ということに作業進めている最中に気づいて、破棄しました。参照型の配列が作れるという点で利点はありますが、まぁ参照型で巨大配列なんて作らねーだろ、思うと、わざわざ実装増やして提供するメリットもないかな、とは。&lt;/p&gt;
&lt;p&gt;配列はもう昔からあるのでint Lengthなのはしょうがないのですが、&lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;Memory&amp;lt;T&amp;gt;&lt;/code&gt;のLengthはlongであって欲しかったかなー、とは少し思っています。&lt;a href="https://github.com/dotnet/apireviews/tree/main/2016/11-04-SpanOfT#spant-and-64-bit"&gt;2016年の段階でのSpanのAPIどうするかドキュメント&lt;/a&gt;によると、候補は幾つかあったけど、結果的に配列踏襲のint Lengthになったそうで。2GBでも別に十分だろ、みたいなことも書いてありますが、いや、そうかなー？年にそこそこの回数でたまによく引っかかるんだけどねー？&lt;/p&gt;
&lt;p&gt;そして2016年の議論時点ではなかった、C# 9.0で&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/csharp/language-reference/builtin-types/nint-nuint"&gt;nuint, nuint&lt;/a&gt;が追加されたので、&lt;code&gt;nuint Span&amp;lt;T&amp;gt;/Memory&amp;lt;T&amp;gt;.Length&lt;/code&gt;はありなんじゃないかな、と。&lt;/p&gt;
&lt;p&gt;ただNativeMemoryArrayの開発当初は&lt;code&gt;nuint Length&lt;/code&gt;で作っていたのですが、&lt;code&gt;AsSpan(nuint start, nuint length)&lt;/code&gt;みたいなAPIは、カジュアルにintやlongを突っ込めなくて死ぬほど使いづらかったので、最終的にlongで統一することにしました。ので、&lt;code&gt;nuint Length&lt;/code&gt;は、なしかな。つまり一周回って現状維持。そんなものかー、そんなもんですねー。&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Wed, 22 Dec 2021 00:00:00 +0900</pubDate>
      <a10:updated>2021-12-22T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2021/12/04.html</guid>
      <link>https://neue.cc/2021/12/04.html</link>
      <title>.NET 6とAngleSharpによるC#でのスクレイピング技法</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2021/12/04.html"&gt;.NET 6とAngleSharpによるC#でのスクレイピング技法&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2021-12-04&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;&lt;a href="https://qiita.com/advent-calendar/2021/csharplang"&gt;C# Advent Calendar 2021&lt;/a&gt;の参加記事となっています。去年は2個エントリーしたあげく、1個すっぽかした（！）という有様だったので、今年は反省してちゃんと書きます。&lt;/p&gt;
&lt;p&gt;スクレイピングに関しては10年前に&lt;a href="https://neue.cc/2010/03/02_244.html"&gt;C#でスクレイピング:HTMLパース(Linq to Html)のためのSGMLReader利用法&lt;/a&gt;という記事でSGMLReaderを使ったやり方を紹介していたのですが、10年前ですよ、10年前！さすがにもう古臭くて、現在ではもっとずっと効率的に簡単にできるようになってます。&lt;/p&gt;
&lt;p&gt;今回メインで使うのは&lt;a href="https://anglesharp.github.io/"&gt;AngleSharp&lt;/a&gt;というライブラリです。AngleSharp自体は2015年ぐらいからもう既に定番ライブラリとして、日本でも紹介記事が幾つかあります。が、いまいち踏み込んで書かれているものがない気がするので、今回はもう少しがっつりと紹介していきたいと思っています。それと直近Visual StudioのWatchウィンドウの使い方を知らん、みたいな話を聞いたりしたので、デバッグ方法の手順みたいなものを厚めに紹介したいなあ、という気持ちがあります！&lt;/p&gt;
&lt;p&gt;AngleSharpの良いところは、まずはHTMLをパースしてCSSセレクターで抽出できるところです。以前はLINQ(to DOM)があればCSSセレクターじゃなくてもいいっす、WhereとSelectManyとDescendantsでやってきますよ、とか言ってましたが、そんなにきちんと構造化されてるわけじゃないHTMLを相手にするのにあたっては、CSSセレクターのほうが100億倍楽！CSSセレクターの文法なんて大したことないので、普通に覚えて使えってやつですね。SQLと正規表現とCSSセレクターは三大言語関係なく覚えておく教養、と。&lt;/p&gt;
&lt;p&gt;もう一つは、それ自体でネットワークリクエストが可能なこと。FormへのSubmitなどもサポートして、Cookieも保持し続けるとかが出来るので、ログインして会員ページを弄る、といったようなクローラーが簡単に書けるんですね。この辺非常に良く出来ていて、もう自前クローラーなんて投げ捨てるしかないです。また、&lt;a href="https://github.com/sebastienros/jint"&gt;Jint&lt;/a&gt;というPure C#なJavaScriptインタプリタと統合したプラグインも用意されているので、JavaScriptがDOMをガリガリっと弄ってくる今風のサイトにも、すんなり対応できます。&lt;/p&gt;
&lt;p&gt;AngleSharpの紹介記事では、よくHttpClientなどで別途HTMLを取ってきたから、それをAngleSharpのHtmlParserに読み込ませる、というやり方が書かれていることが多いのですが、取得も含めて全てAngleSharp上で行ったほうが基本的には良いでしょう。&lt;/p&gt;
&lt;p&gt;ここまで来るとPure C#の軽量なヘッドレスブラウザとしても動作する、ということになるので、カジュアルなE2Eテストの実装基盤にもなり得ます。普通のユニットテストと並べて &lt;code&gt;dotnet test&lt;/code&gt; だけでその辺もある程度まかなえたら、とても素敵なことですよね？がっつりとしたE2Eテストを書きたい場合は&lt;a href="https://github.com/microsoft/playwright"&gt;Playwright&lt;/a&gt;などを使わなければ、ということになってしまいますが、まずは軽い感じから始めたい、という時にうってつけです。C#で書けるし。いいことです。&lt;/p&gt;
&lt;h2&gt;BrowingContextとQuerySelectorの基本&lt;/h2&gt;
&lt;p&gt;まずはシンプルなHTMLのダウンロードと解析を。基本は &lt;code&gt;BrowsingContext&lt;/code&gt; を作って、それをひたすら操作していくことになります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// この辺で色々設定する
var config = Configuration.Default
    .WithDefaultLoader(); // LoaderはデフォではいないのでOpenAsyncする場合につける

// Headless Browser的なものを作る
using var context = BrowsingContext.New(config);

// とりあえずこのサイトの、右のArchivesのリンクを全部取ってみる
var doc = await context.OpenAsync(&amp;quot;https://neue.cc&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;OpenAsyncで取得できた &lt;code&gt;IDocument&lt;/code&gt; をよしなにCSSセレクターで解析していくわけですが、ここで絞り込みクエリー作成に使うのがVisual StudioのWatchウィンドウ。（Chromeのデベロッパーツールなどで機械的に取得したい要素のCSSセレクターを取得できたりしますが、手セレクターのほうがブレなくルールは作りやすいかな、と）。&lt;/p&gt;
&lt;p&gt;デバッガーを起動して、とりあえずウォッチウィンドウを開いておもむろに、Nameのところでコードを書きます。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/144583627-0c7982e4-4933-41f7-ba04-81836f10da8c.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;ウォッチウィンドウは見たい変数を並べておく、お気に入り的な機能、と思いきや本質的にはそうじゃなくて、式を自由に書いて、結果を保持する、ついでに式自体も保持できるという、実質REPLなのです。代入もラムダ式もLINQも自由に書けるし、入力補完も普通に出てくる。Immediate Windowよりも結果が遥かに見やすいので、Immediate Windowは正直不要です。&lt;/p&gt;
&lt;p&gt;デバッガー上で動いているので実データを自由に扱えるというところがいいですね。というわけで、ToHtml()でHTMLを見て、QuerySelectorAllをゆっくり評価しながら書いていきましょう。まずはサイドバーにあるので &lt;code&gt;.side_body&lt;/code&gt; を出してみると、あれ、二個あるの？と。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/144582934-371930f2-dbff-4341-9f92-87e27c56d477.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;中開けてInnerHtml見ると、なるほどProfile部分とArchive部分、と。とりあえず後ろのほうで固定のはずなのでlast-childね、というところで一旦評価して大丈夫なのを確認した後に、あとはa、と。でここまでで期待通りの結果が取れていれば、コピペる。よし。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// 基本、QuerySelectorかQuerySelectorAllでDOMを絞り込む
var anchors = doc.QuerySelectorAll(&amp;quot;.side_body:last-child a&amp;quot;)
    .Cast&amp;lt;IHtmlAnchorElement&amp;gt;() // AngleSharp.Html.Dom
    .Select(x =&amp;gt; x.Href)
    .ToArray();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;単一の要素に絞り込んだ場合は、 &lt;code&gt;IHtml***&lt;/code&gt; にキャストしてあげると扱いやすくなります(attributeのhrefのtextを取得、みたいにしなくていい)。頻出パターンなので、&lt;code&gt;QuerySelectorAll&amp;lt;T&amp;gt;&lt;/code&gt;でCastもセットになってすっきり。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;doc.QuerySelectorAll&amp;lt;IHtmlAnchorElement&amp;gt;(&amp;quot;.side_body:last-child a&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;せっかくなので、年に何本記事を書いていたかの集計を出してみたいと思います！URLから正規表現で年と月を取り出すので、とりあえずここでもウォッチウィンドウです。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/144590970-34c3bff4-0f0b-4db3-a259-f37a6f1e5f40.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;anchrosの[0]を確認して、これをデータソースとしてRegex.Matchを書いて、どのGroupに収まったのかを見ます。この程度だったら特にミスらないでしょー、と思いきや普通に割とミスったりするのが正規表現なので、こういうので確認しながらやっていけるのはいいですね。&lt;/p&gt;
&lt;p&gt;後は普通の（？）LINQコード。グルーピングした後に、ひたすら全ページをOpenAsyncしていきます。記事の本数を数えるのはh1の数をチェックするだけなので、特に複雑なCSSセレクターは必要なし。本来はページングの考慮は必要ですが、一月単位だとページングが出てくるほどの記事量がないので、そこも考慮なしで。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var yearGrouped = anchors
    .Select(x =&amp;gt;
    {
        var match = Regex.Match(x, @&amp;quot;(\d+)/(\d+)&amp;quot;);
        return new
        {
            Url = x,
            Year = int.Parse(match.Groups[1].Value),
            Month = int.Parse(match.Groups[2].Value)
        };
    })
    .GroupBy(x =&amp;gt; x.Year);

foreach (var year in yearGrouped.OrderBy(x =&amp;gt; x.Key))
{
    var postCount = 0;
    foreach (var month in year)
    {
        var html = await context.OpenAsync(month.Url);
        postCount += html.QuerySelectorAll(&amp;quot;h1&amp;quot;).Count(); // h1 == 記事ヘッダー
    }
    Console.WriteLine($&amp;quot;{year.Key}年記事更新数: {postCount}&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;結果は&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2009年記事更新数: 92
2010年記事更新数: 61
2011年記事更新数: 66
2012年記事更新数: 30
2013年記事更新数: 33
2014年記事更新数: 22
2015年記事更新数: 19
2016年記事更新数: 24
2017年記事更新数: 13
2018年記事更新数: 11
2019年記事更新数: 14
2020年記事更新数: 11
2021年記事更新数: 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ということで右肩下がりでした、メデタシメデタシ。今年は特に書いてないなあ、せめて2ヶ月に1本は書きたいところ……。&lt;/p&gt;
&lt;p&gt;なお、&lt;a href="https://neue.cc/2021/11/21.html"&gt;C#による自家製静的サイトジェネレーターに移行した話&lt;/a&gt;
で紹介しているのですが、このサイトは完全に&lt;a href="https://github.com/neuecc/Blog2/tree/master/articles"&gt;GitHub上に.mdがフラットに並んで.mdが管理されている&lt;/a&gt;ので、こういうの出すなら別にスクレイピングは不要です。&lt;/p&gt;
&lt;h2&gt;UserAgentを変更する&lt;/h2&gt;
&lt;p&gt;スクレイピングといったらログインしてごにょごにょする。というわけで、そうしたログイン処理をさくっとやってくれるのがAngleSharpの良いところです。ので紹介していきたいのですが、まずはやましいことをするので（？）、UserAgentを偽装しましょう。&lt;/p&gt;
&lt;p&gt;AngleSharpが現在何を送っているのかを確認するために、とりあえずダミーのサーバーを立てます。その際には .NET 6 のASP .NET から搭載されたMinimal APIが非常に便利です！そしてそれを&lt;a href="https://www.linqpad.net/"&gt;LINQPad&lt;/a&gt;で動かすと、テスト用サーバーを立てるのにめっちゃ便利です！やってみましょう。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/144586706-aa067b51-d8d3-44ac-91b3-552c62e7ce6d.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;たった三行でサーバーが立ちます。便利。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;await context.OpenAsync(&amp;quot;http://localhost:5000/headers&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;でアクセスして、 &lt;code&gt;AngleSharp/1.0.0.0&lt;/code&gt; で送られていることが確認できました。&lt;/p&gt;
&lt;p&gt;なお、LINQPadでASP.NETのライブラリを使うには、Referene ASP.NET Core assembliesのチェックを入れておく必要があります。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/144586956-fddb4821-59a3-4f37-9086-1624d471ed36.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;他、よく使うNuGetライブラリや名前空間なども設定したうえで、&lt;code&gt;Set as default for new queries&lt;/code&gt;しておくと非常に捗ります。&lt;/p&gt;
&lt;p&gt;さて、で、このUser-Agentのカスタマイズの方法ですが、AngleSharpはServicesに機能が詰まっているようなDI、というかService Locatorパターンの設計になっているので、ロードされてるServicesを(Watch Windowで)一通り見ます。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/144601687-3ee78e1d-2f95-404f-b2f9-162deb8eeda0.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;型に限らず全Serviceを取得するメソッドが用意されていない場合でも、&lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt;で取ってやると全部出てくるような実装は割と多い（ほんと）ので、とりあえずやってみるのはオススメです。今回も無事それで取れました。&lt;/p&gt;
&lt;p&gt;で、型名を眺めてそれっぽそうなのを見ると &lt;code&gt;DefaultHttpRequester&lt;/code&gt; というのがかなりそれっぽく、その中身を見るとHeadersという輩がいるので、これを書き換えればいいんじゃないだろうかと当たりがつきます。&lt;/p&gt;
&lt;p&gt;ここはやましい気持ちがあるので（？）Chromeに偽装しておきましょう。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var requester = context.GetService&amp;lt;DefaultHttpRequester&amp;gt;();
requester.Headers[&amp;quot;User-Agent&amp;quot;] = &amp;quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再びOpenAsyncしてLINQPadの表示を見て、変更されてること確認できました。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/144602382-aba63413-2065-46ed-bd52-f4adf65bd30f.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;ちなみに、DefaultじゃないHttpRequesterをConfigurationに登録しておく、ということも出来ますが、よほどカスタムでやりたいことがなければ、デフォルトのものをちょっと弄るぐらいの方向性でやっていったほうが楽です。&lt;/p&gt;
&lt;h2&gt;FormにSubmitする&lt;/h2&gt;
&lt;p&gt;クローラーと言ったらFormにSubmit、つまりログイン！そしてクッキーをいただく！認証！&lt;/p&gt;
&lt;p&gt;さて、が、まぁ認証付きの何かを例にするのはアレなので、googleの検索フォームを例にさせていただきたいと思います。先にまずはコード全体像と結果を。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using AngleSharp;
using AngleSharp.Dom;
using AngleSharp.Html.Dom; // 拡張メソッドとかで有効化されたりするのでusing大事
using AngleSharp.Io;

var config = Configuration.Default
    .WithDefaultLoader()
    .WithDefaultCookies(); // login form的なものの場合これでクッキーを持ち歩く

using var context = BrowsingContext.New(config);

// お行儀悪いので（？）前述のこれやっておく
var requester = context.GetService&amp;lt;DefaultHttpRequester&amp;gt;();
requester.Headers[&amp;quot;User-Agent&amp;quot;] = &amp;quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/537.36&amp;quot;;

var doc = await context.OpenAsync(&amp;quot;https://google.com/&amp;quot;);
var form = doc.Forms[0];
var result = await form.SubmitAsync(new { q = &amp;quot;AngleSharp&amp;quot; }); // name = valueは匿名型が使える

// とりあえず結果を表示しておく
var titles = result.QuerySelectorAll&amp;lt;IHtmlHeadingElement&amp;gt;(&amp;quot;h3&amp;quot;).Select(x =&amp;gt; x.TextContent);
var i = 1;
foreach (var item in titles)
{
    Console.WriteLine($&amp;quot;{i++:00}: {item}&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/144704506-b0d7038f-ad26-42e4-b8dd-b63b250759c5.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WithDefaultLoader&lt;/code&gt; と、そして認証クッキー持ち歩きのために &lt;code&gt;WithDefaultCookies&lt;/code&gt; をコンフィギュレーションに足しておくことが事前準備として必須です。User-Agentの書き換えはご自由に、ただやましいこと、ではなくてUA判定をもとにして処理する、みたいなサイトも少なからずあるので、余計ないこと考えなくて済む対策としてはUAをChromeに偽装しておくのはアリです。&lt;/p&gt;
&lt;p&gt;FormへのSubmit自体は3行というか2行です。ページをOpenしてFormに対してSubmitするだけ。超簡単。 &lt;code&gt;.Forms&lt;/code&gt; で &lt;code&gt;IHtmlElementForms&lt;/code&gt;がすっと取れるので、あとは単純にSubmitするだけです。渡す値は &lt;code&gt;{ name = value }&lt;/code&gt;の匿名型で投げ込めばOK。&lt;/p&gt;
&lt;p&gt;度々出てくるウォッチウィンドウの宣伝ですが、この何の値を投げればいいのか、を調べるのにHTMLとニラメッコではなく、ウォッチウィンドウで調査していきます。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/146650708-d2f1beb1-c21b-4a0a-851b-d0e78628bc00.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;まず(&amp;quot;input&amp;quot;)を拾うのですが、9個ある。多いね、で、まぁこれはほとんどtype = &amp;quot;hidden&amp;quot;なので無視して良い（AngleSharpがSubmitAsync時にちゃんと自動でつけて送信してくれる）。値を入れる必要があるのはhiddden以外のものなので、それをウォッチで普通にLINQで書けば、3件に絞れました。で、中身見ると必要っぽいのはqだけなので、 new { q = &amp;quot;hogemoge&amp;quot; } を投下、と。&lt;/p&gt;
&lt;p&gt;認証が必要なサイトでは、これでBrowingContextに認証クッキーがセットされた状態になるので、以降のこのContextでのOpenや画像、動画リクエストは認証付きになります。&lt;/p&gt;
&lt;h2&gt;画像や動画を拾う&lt;/h2&gt;
&lt;p&gt;スクレイピングといったら画像集めマンです（？）。AngleSharpでのそうしたリソース取得のやり方には幾つかあるのですが、私が最も良いかな、と思っているのはIDocumentLoader経由でのフェッチです。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// BrowsingContextから引っ張る。Contextが認証クッキー取得済みなら認証が必要なものもダウンロードできる。
var loader = context.GetService&amp;lt;IDocumentLoader&amp;gt;();

// とりあえず適当にこのブログの画像を引っ張る
var response = await loader.FetchAsync(new DocumentRequest(new Url(&amp;quot;https://user-images.githubusercontent.com/46207/142736833-55f36246-cb7f-4b62-addf-0e18b3fa6d07.png&amp;quot;))).Task;

using var ms = new MemoryStream();
await response.Content.CopyToAsync(ms);

var bytes = ms.ToArray(); // あとは適当にFile.WriteAllBytesでもなんでもどうぞ
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;内部用なので少し引数やAPIが冗長なところもありますが、それは後述しますが別になんとでもなるところなので、どちらかというと生のStreamが取れたりといった柔軟性のところがプラスだと思っています。普通にHttpClientで自前で取るのと比べると、認証周りやってくれた状態で始められるのが楽ですね。&lt;/p&gt;
&lt;p&gt;並列ダウンロードもいけます、例えば、このブログの全画像を引っ張るコードを、↑に書いた全ページ取得コードを発展させてやってみましょう。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using AngleSharp;
using AngleSharp.Dom;
using AngleSharp.Html.Dom;
using AngleSharp.Io;

var config = Configuration.Default
    .WithDefaultLoader()
    .WithDefaultCookies();

using var context = BrowsingContext.New(config);

var requester = context.GetService&amp;lt;DefaultHttpRequester&amp;gt;();
requester.Headers[&amp;quot;User-Agent&amp;quot;] = &amp;quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/537.36&amp;quot;;

var doc = await context.OpenAsync(&amp;quot;https://neue.cc/&amp;quot;);
var loader = context.GetService&amp;lt;IDocumentLoader&amp;gt;();

foreach (var arvhives in doc.QuerySelectorAll&amp;lt;IHtmlAnchorElement&amp;gt;(&amp;quot;.side_body:last-child a&amp;quot;))
{
    var page = await context.OpenAsync(arvhives.Href);

    // content(ページ本体)下のimgを全部。
    // 今回はページ単位で5並列ダウンロードすることにする(粒度の考え方は色々ある)
    var imgs = page.QuerySelectorAll&amp;lt;IHtmlImageElement&amp;gt;(&amp;quot;#content img&amp;quot;);
    await Parallel.ForEachAsync(imgs, new ParallelOptions { MaxDegreeOfParallelism = 5 }, async (img, ct) =&amp;gt;
     {
         var url = new Url(img.Source);
         var response = await loader.FetchAsync(new DocumentRequest(url)).Task;

         // とりあえず雑にFile書き出し。
         Console.WriteLine($&amp;quot;Downloading {url.Path}&amp;quot;);
         using (var fs = new FileStream(@$&amp;quot;C:\temp\neuecc\{url.Path.Replace('/', '_')}&amp;quot;, FileMode.Create))
         {
             await response.Content.CopyToAsync(fs, ct);
         }
     });
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;.NET 6から &lt;a href="https://docs.microsoft.com/ja-jp/dotnet/api/system.threading.tasks.parallel.foreachasync"&gt;Parallel.ForEachAsync&lt;/a&gt; が追加されたので、asyncコードを並列数(MaxDegreeOfParallelism)で制御した並列実行が容易に書けるようになりました。async/await以降、Parallel系の出番は圧倒的に減ったのは確かなのですが、Task.WhenAllだけだと並列に走りすぎてしまって逆に非効率となってしまって、そこを制御するコードを自前で用意する必要が出てきていたりと面倒なものも残っていました。それが、このParallel.ForEachAsyncで解消されたと思います。&lt;/p&gt;
&lt;h2&gt;Kurukuru Progress&lt;/h2&gt;
&lt;p&gt;数GBの動画をダウンロードする時などは、プログレスがないとちゃんと動いているのか確認できなくて不便です。しかし、ただ単にConsole.WriteLineするだけだとログが凄い勢いで流れていってしまって見辛くて困りものです。そこを解決するC#ライブラリが&lt;a href="https://github.com/mayuki/Kurukuru"&gt;Kurukuru&lt;/a&gt;で、見ればどんなものかすぐわかるので、まずは実行結果を見てもらいましょう（素の回線だと一瞬でダウンロード終わってしまったので回線の低速シミュレーションしてます）&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/144711389-7fa99e14-3f77-4fef-a7e7-5d12724aacd1.gif" alt="guruguru" /&gt;&lt;/p&gt;
&lt;p&gt;一行だけを随時書き換えていってくれるので、見た目も非常に分かりやすくて良い感じです。これはとても良い。Kurukuru、今すぐ使いましょう。ちなみに今回の記事で一番時間がかかったのは、Kurukuruの並列リクエスト対応だったりして（対応していなかったのでコード書いてPR上げて、今日リリースしてもらいましたできたてほやほやコード）。&lt;/p&gt;
&lt;p&gt;AngleSharp側のコードですが、この例は&lt;a href="https://file-examples.com/index.php/sample-video-files/sample-mp4-files/"&gt;File Examples
&lt;/a&gt;のMP4を並列で全部取るというものです。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using AngleSharp;
using AngleSharp.Dom;
using AngleSharp.Html.Dom;
using AngleSharp.Io;
using Kurukuru;
using System.Text;

// Kurukuruを使う上で大事なおまじない
// え、デフォルトのEncodingがUTF8じゃないシェルがあるんです！？←Windows
Console.OutputEncoding = Encoding.UTF8;

var config = Configuration.Default
    .WithDefaultLoader()
    .WithDefaultCookies();

using var context = BrowsingContext.New(config);

var requester = context.GetService&amp;lt;DefaultHttpRequester&amp;gt;();
requester.Headers[&amp;quot;User-Agent&amp;quot;] = &amp;quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/537.36&amp;quot;;

var doc = await context.OpenAsync(&amp;quot;https://file-examples.com/index.php/sample-video-files/sample-mp4-files/&amp;quot;);
var loader = context.GetService&amp;lt;IDocumentLoader&amp;gt;();

// ここから本体
var mp4s = doc.QuerySelectorAll&amp;lt;IHtmlAnchorElement&amp;gt;(&amp;quot;a&amp;quot;).Where(x =&amp;gt; x.Href.EndsWith(&amp;quot;.mp4&amp;quot;));
Console.WriteLine(&amp;quot;Download sample-mp4-files&amp;quot;);
await Parallel.ForEachAsync(mp4s, new ParallelOptions { MaxDegreeOfParallelism = 5 }, async (mp4, ct) =&amp;gt;
{
    var bin = await loader.FetchBytesAsync(mp4.Href);
    // あとはFile.WriteAllBytesするとか好きにして
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ポイントは &lt;code&gt;var bin = await loader.FetchBytesAsync(mp4.Href);&lt;/code&gt; で、これは拡張メソッドです。loaderにProgress付きでbyte[]返すメソッドを生やしたことで、随分シンプルに書けるようになりました。StreamのままFileStreamに書いたほうがメモリ節約的にはいいんですが、中途半端なところでコケたりした場合のケアが面倒くさいので、ガチガチなパフォーマンスが重視される場合ではないならbyte[]のまま受けちゃってもいいでしょう。1つ4GBの動画を5並列なんですが？という場合でも、たかがメモリ20GB程度なので普通にメモリ積んで処理すればいいっしょ。&lt;/p&gt;
&lt;p&gt;FetchBytesAsyncの中身は以下のようなコードになります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public static class DocumentLoaderExtensions
{
    public static async Task&amp;lt;byte[]&amp;gt; FetchBytesAsync(this IDocumentLoader loader, string address, CancellationToken cancellationToken = default)
    {
        var url = new AngleSharp.Url(address);
        var response = await loader.FetchAsync(new DocumentRequest(url)).Task;
        if (response.StatusCode != System.Net.HttpStatusCode.OK)
        {
            return Array.Empty&amp;lt;byte&amp;gt;(); // return empty instead of throws error(ここをどういう挙動させるかは好みで……。)
        }

        // Content-Lengthが取れない場合は死でいいということにする
        var contentLength = int.Parse(response.Headers[&amp;quot;Content-Length&amp;quot;]);

        using var progress = new ProgressSpinner(url.Path.Split('/').Last(), contentLength);
        try
        {
            return await ReadAllDataAsync(response.Content, contentLength, progress, cancellationToken);
        }
        catch
        {
            progress.Cancel();
            throw;
        }
    }

    static async Task&amp;lt;byte[]&amp;gt; ReadAllDataAsync(Stream stream, int contentLength, IProgress&amp;lt;int&amp;gt; progress, CancellationToken cancellationToken)
    {
        var buffer = new byte[contentLength];
        var readBuffer = buffer.AsMemory();
        var len = 0;
        while ((len = await stream.ReadAsync(readBuffer, cancellationToken)) &amp;gt; 0)
        {
            progress.Report(len);
            readBuffer = readBuffer.Slice(len);
        }
        return buffer;
    }
}

public class ProgressSpinner : IProgress&amp;lt;int&amp;gt;, IDisposable
{
    readonly Spinner spinner;
    readonly string fileName;
    readonly int? totalBytes;
    int received = 0;

    public ProgressSpinner(string fileName, int? totalBytes)
    {
        this.totalBytes = totalBytes;
        this.fileName = fileName;
        this.spinner = new Spinner($&amp;quot;Downloading {fileName}&amp;quot;);
        this.spinner.Start();
    }

    public void Report(int value)
    {
        received += value;
        if (totalBytes != null)
        {
            var percent = (received / (double)totalBytes) * 100;
            spinner.Text = $&amp;quot;Downloading {fileName} {ToHumanReadableBytes(received)} / {ToHumanReadableBytes(totalBytes.Value)} ( {Math.Floor(percent)}% )&amp;quot;;
        }
        else
        {
            spinner.Text = $&amp;quot;Downloading {fileName} {ToHumanReadableBytes(received)}&amp;quot;;
        }
    }

    public void Cancel()
    {
        spinner.Fail($&amp;quot;Canceled {fileName}: {ToHumanReadableBytes(received)}&amp;quot;);
        spinner.Dispose();
    }

    public void Dispose()
    {
        spinner.Succeed($&amp;quot;Downloaded {fileName}: {ToHumanReadableBytes(received)}&amp;quot;);
        spinner.Dispose();
    }

    static string ToHumanReadableBytes(int bytes)
    {
        var b = (double)bytes;
        if (b &amp;lt; 1024) return $&amp;quot;{b:0.00} B&amp;quot;;
        b /= 1024;

        if (b &amp;lt; 1024) return $&amp;quot;{b:0.00} KB&amp;quot;;
        b /= 1024;

        if (b &amp;lt; 1024) return $&amp;quot;{b:0.00} MB&amp;quot;;
        b /= 1024;

        if (b &amp;lt; 1024) return $&amp;quot;{b:0.00} GB&amp;quot;;
        b /= 1024;

        if (b &amp;lt; 1024) return $&amp;quot;{b:0.00} TB&amp;quot;;
        b /= 1024;

        return $&amp;quot;{0:0.00} PB&amp;quot;;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;KurukuruのSpinnerを内包した &lt;code&gt;IProgress&amp;lt;T&amp;gt;&lt;/code&gt; を作ってあげて、その中でよしなにやってあげるということにしました。まぁちょっと長いですが、一回用意すれば後はコピペするだけなので全然いいでしょう。みなさんもこのProgressSpinner、使ってやってください。&lt;/p&gt;
&lt;h2&gt;コマンド引数やロギング処理やオプション取得&lt;/h2&gt;
&lt;p&gt;クローラーとしてガッツシやりたいなら、モードの切り替えとかロギングとか入れたいです、というか入れます。そこで私が定形として使っているのは&lt;a href="https://github.com/Cysharp/ConsoleAppFramework"&gt;ConsoleAppFramework&lt;/a&gt;と&lt;a href="https://github.com/Cysharp/ZLogger"&gt;ZLogger&lt;/a&gt;。Cysharpの提供です。ワシが作った。それと今回のようなケースだと&lt;a href="https://github.com/Cysharp/Kokuban"&gt;Kokuban&lt;/a&gt;も便利なので入れます。やはりCysharpの提供です。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;ItemGroup&amp;gt;
    &amp;lt;PackageReference Include=&amp;quot;AngleSharp&amp;quot; Version=&amp;quot;1.0.0-alpha-844&amp;quot; /&amp;gt;
    &amp;lt;PackageReference Include=&amp;quot;Kurukuru&amp;quot; Version=&amp;quot;1.4.0&amp;quot; /&amp;gt;
    &amp;lt;PackageReference Include=&amp;quot;ConsoleAppFramework&amp;quot; Version=&amp;quot;3.3.2&amp;quot; /&amp;gt;
    &amp;lt;PackageReference Include=&amp;quot;ZLogger&amp;quot; Version=&amp;quot;1.6.1&amp;quot; /&amp;gt;
    &amp;lt;PackageReference Include=&amp;quot;Kokuban&amp;quot; Version=&amp;quot;0.2.0&amp;quot; /&amp;gt;
&amp;lt;/ItemGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この場合Program.csは以下のような感じになります。割と短いですよ！&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using ConsoleAppFramework;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using System.Text;
using ZLogger;

Console.OutputEncoding = Encoding.UTF8;

await Host.CreateDefaultBuilder()
    .ConfigureLogging(x =&amp;gt;
    {
        x.ClearProviders();
        x.AddZLoggerConsole();
        x.AddZLoggerFile($&amp;quot;logs/{args[0]}-{DateTime.Now.ToString(&amp;quot;yyyMMddHHmmss&amp;quot;)}.log&amp;quot;);
    })
    .ConfigureServices((hostContext, services) =&amp;gt;
    {
        services.Configure&amp;lt;NanikaOptions&amp;gt;(hostContext.Configuration.GetSection(&amp;quot;Nanika&amp;quot;));
    })
    .RunConsoleAppFrameworkAsync(args);

public class NanikaOptions
{
    public string UserId { get; set; } = default!;
    public string Password { get; set; } = default!;
    public string SaveDirectory { get; set; } = default!;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;コンソールログだけだとウィンドウ閉じちゃったときにチッとかなったりするので（？）、ファイルログあると安心します。ZLoggerは秘伝のxmlコンフィグなどを用意する必要なく、これだけで有効化されるのが楽でいいところです。それでいてパフォーマンスも抜群に良いので。&lt;/p&gt;
&lt;p&gt;ConsoleAppFrameworkはGenericHostと統合されているので、コンフィグの読み込みもOptionsで行います。appsettings.jsonを用意して&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
  &amp;quot;Nanika&amp;quot;: {
    &amp;quot;UserId&amp;quot;: &amp;quot;hugahuga&amp;quot;,
    &amp;quot;Password&amp;quot;: &amp;quot;takotako&amp;quot;,
    &amp;quot;SaveDirectory&amp;quot;: &amp;quot;C:\\temp\\dir&amp;quot;,
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;.csprojのほうに&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;ItemGroup&amp;gt;
    &amp;lt;None Update=&amp;quot;appsettings.json&amp;quot;&amp;gt;
    &amp;lt;CopyToOutputDirectory&amp;gt;Always&amp;lt;/CopyToOutputDirectory&amp;gt;
    &amp;lt;/None&amp;gt;
&amp;lt;/ItemGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;と書いてあげれば、自動で読み込まれるようになるという仕様です。そして本体のコードは&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class NanikaDownloader : ConsoleAppBase
{
    readonly ILogger&amp;lt;NanikaDownloader&amp;gt; logger;
    readonly NanikaOptions options;

    // コンストラクタインジェクションでOptionsを受け取る
    public NanikaDownloader(ILogger&amp;lt;NanikaDownloader&amp;gt; logger, IOptions&amp;lt;NanikaOptions&amp;gt; options)
    {
        this.logger = logger;
        this.options = options.Value;
    }

    public async Task DownloadAre()
    {
        // Context.CancellationTokenを渡すのを忘れないように！(Ctrl+Cのキャンセル対応に必須)
        await loader.FecthAsyncBytes(&amp;quot;...&amp;quot;, Context.CancellationToken)
    }

    public async Task DownloadSore(int initialPage)
    {
        // Kokubanを使うとConsoleに出す文字列の色分けが簡単にできる！( `Chalk.Color +` だけで色が付く)
        logger.LogInformation(Chalk.Green + $&amp;quot;Download sore {initialPage} start&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;のように書きます。これの場合は、引数で &lt;code&gt;NanikaDownloader.DownloadAre&lt;/code&gt;, &lt;code&gt;NanikaDownloader.DownloadSore -initialPage *&lt;/code&gt; の実行切り替えができるようになるわけですね……！&lt;/p&gt;
&lt;p&gt;また、文字色が一色だけだとコンソール上のログはかなり見づらいわけですが、Kokubanを使うことで色の出し分けが可能になります。これは、地味にめちゃくちゃ便利なのでおすすめ。別にバッチ系に限らず、コンソールログの色を調整するのってめっちゃ大事だと、最近実感しているところです。&lt;/p&gt;
&lt;p&gt;ASP .NET Core(とかMagicOnionとか)で、ZLoggerでエラーを赤くしたい！とか、フレームワークが吐いてくる重要でない情報はグレーにして目立たなくしたい！とかの場合は、ZLoggerのPrefix/SuffixFormatterを使うのをオススメしてます(Kokubanのようにさっくり書けはしないのですが、まぁConfigurationのところで一回やるだけなので)&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;logging.AddZLoggerConsole(options =&amp;gt;
{
#if DEBUG
    // \u001b[31m =&amp;gt; Red(ANSI Escape Code)
    // \u001b[0m =&amp;gt; Reset
    // \u001b[38;5;***m =&amp;gt; 256 Colors(08 is Gray)
    options.PrefixFormatter = (writer, info) =&amp;gt;
    {
        if (info.LogLevel == LogLevel.Error)
        {
            ZString.Utf8Format(writer, &amp;quot;\u001b[31m[{0}]&amp;quot;, info.LogLevel);
        }
        else
        {
            if (!info.CategoryName.StartsWith(&amp;quot;MyApp&amp;quot;)) // your application namespace.
            {
                ZString.Utf8Format(writer, &amp;quot;\u001b[38;5;08m[{0}]&amp;quot;, info.LogLevel);
            }
            else
            {
                ZString.Utf8Format(writer, &amp;quot;[{0}]&amp;quot;, info.LogLevel);
            }
        }
    };
    options.SuffixFormatter = (writer, info) =&amp;gt;
    {
        if (info.LogLevel == LogLevel.Error || !info.CategoryName.StartsWith(&amp;quot;MyApp&amp;quot;))
        {
            ZString.Utf8Format(writer, &amp;quot;\u001b[0m&amp;quot;, &amp;quot;&amp;quot;);
        }
    };
#endif

}, configureEnableAnsiEscapeCode: true); // configureEnableAnsiEscapeCode
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;こういうの、地味に開発効率に響くので超大事です。やっていきましょう。&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;AngleSharpにかこつけてウォッチウィンドウをとにかく紹介したかったのです！ウォッチウィンドウ最強！値の変化があると赤くなってくれたりするのも便利ですね、使いこなしていきましょう。別にUnityとかでもクソ便利ですからね？&lt;/p&gt;
&lt;p&gt;あ、で、AngleSharpはめっちゃいいと思います。他の言語のスクレピングライブラリ(Beautiful Soupとか)と比べても、全然張り合えるんじゃないかな。冒頭に書きましたがE2Eテストへの応用なども考えられるので、使いこなし覚えるのとてもいいんじゃないかと思います。ドキュメントが色々書いてあるようで実は別にほとんど大したこと書いてなくて役に立たないというのは若干問題アリなんですが、まぁ触って覚えるでもなんとかなるので、大丈夫大丈夫。&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Sat, 04 Dec 2021 00:00:00 +0900</pubDate>
      <a10:updated>2021-12-04T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2021/11/21.html</guid>
      <link>https://neue.cc/2021/11/21.html</link>
      <title>C#による自家製静的サイトジェネレーターに移行した話</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2021/11/21.html"&gt;C#による自家製静的サイトジェネレーターに移行した話&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2021-11-21&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;見た目はほとんど変わっていませんが(とはいえ横幅広くしたので印象は結構変わったかも)、このサイト、フルリニューアルしました。内部構造が。完全に。別物に。元々はWordPressだったのですが、今回から自作の静的サイトジェネレーターでhtmlを生成し、GitHub Pagesでホストするようにしました。元になるソース(&lt;code&gt;.md&lt;/code&gt;)もGitHub上に置き、GitHub ActionsでビルドしてGitHub Pagesでホスティングされるという、完全GitHub完結ソリューション。また、記事を書くエディタも&lt;a href="https://docs.github.com/ja/codespaces/the-githubdev-web-based-editor"&gt;GitHub web-based editor&lt;/a&gt;(リポジトリのトップで&lt;code&gt;.&lt;/code&gt;を打つと、VS Codeそのものが起動するやつ)を利用することで、非常に快適で、というかMarkdownエディタとしては最高品質のものが乗っかっていて、たかがブログ書くにしては面倒くさいPush/Pullもなくダイレクトコミットで反映出来てしまうというのがとても良い体験になっています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/neuecc/Blog2/"&gt;neuecc/Blog2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;.&lt;/code&gt;でエディタを起動して、&lt;a href="https://github.com/neuecc/Blog2/tree/master/articles"&gt;articles&lt;/a&gt;配下に&lt;code&gt;YYYY-MM-DD.md&lt;/code&gt;ファイルを新規作成。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/142737666-ec09db39-d517-4fb9-aa9f-b61bfb2cbfe7.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;完全にVS Codeそのものでデスクトップアプリのものと全く区別が付かないレベルで、これを超える品質のエディタを普通のサイトに乗せることは不可能でしょう。当然もちろん画像のプレビューもできますし、なんだったら拡張すら入る。&lt;/p&gt;
&lt;p&gt;GitHub管理だと画像置き場（アップロード）が面倒くさい問題があるのですが、これはIssueを画像アップローダーとして使うことで回避しています。Issueの入力フォームは、画像をCtrl+Vでそのままアップロードが可能です。そして嬉しいことに、マークダウンに変換してくれているのでコピペするだけでOK。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/142736683-d2b2acac-8523-4f54-a325-c1dbb12aa959.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/142736700-18928390-e53b-4014-a931-9cd974afcf56.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;上がった先の&lt;code&gt;user-images.githubusercontent&lt;/code&gt;は別にIssueそのものと紐付いているわけではないので、 アップローダ用に使ったIssueはSubmitすることなくポイ、です。そうしてどこにも紐付いていない&lt;code&gt;user-images.githubusercontent&lt;/code&gt;ですが、別にだからといって削除されることもなく永続的に上がり続けているので、遠慮なく使わせてもらうことにします。まぁちゃんとGitHub上に上げてるコンテンツ用に使っているので、許されるでしょう、きっと。多分。&lt;/p&gt;
&lt;p&gt;そうして出来上がった記事は、そのままエディタ上のgit UIからコミットすると、自身が作業している領域は直接サーバー上のmaster(main)なので、プッシュ不要で反映されます。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/142736833-55f36246-cb7f-4b62-addf-0e18b3fa6d07.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;こうなると、もうWordPressで投稿をポスト、するのと変わらないわけです。ブログ記事程度でcloneしてpullしてstagingしてpushしてというのは地味に重たいので、このぐらい身軽で行きたいですね。（実際、投稿後に編集ラッシュとかよくあるので、ちょっと手数が増えるだけで猛烈に嫌気がさす）&lt;/p&gt;
&lt;p&gt;ジェネレートは&lt;a href="https://github.com/neuecc/Blog2/blob/master/.github/workflows/build.yml"&gt;workflows/buildy.yml&lt;/a&gt;で、このリポジトリ内に配置されてるC#プロジェクトを直接ビルド/実行することで生成処理をしています。&lt;code&gt;dotnet run&lt;/code&gt;便利。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;build-blog:
runs-on: ubuntu-latest
steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - run: dotnet run --project ./src/Blog2/Blog2.csproj -c Release -- ./articles ./publish
    - uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./publish
        keep_files: true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;生成されたファイルは&lt;a href="https://github.com/peaceiris/actions-gh-pages"&gt;peaceiris/actions-gh-pages&lt;/a&gt;を使って&lt;code&gt;gh-pages&lt;/code&gt;ブランチと同期します。その際、デフォルトでは既に上がってるファイルを全削除してしまうので、今回はstyleやassetを、同期とは別に置いてあるので削除されると困るので、&lt;code&gt;keep_files: true&lt;/code&gt;も指定しています。そうすると記事の削除がしづらくなるんですが、記事の削除はしない or どうしても削除しなかったら二重に(articlesとgh-pages)削除すればいいだけ、という運用で回避。&lt;/p&gt;
&lt;p&gt;と、いうわけでシステム的には満足です。&lt;/p&gt;
&lt;p&gt;C#でも&lt;a href="https://www.statiq.dev/"&gt;Statiq&lt;/a&gt;などといった静的サイトジェネレーターは存在するのですが、あえて自作した理由は、サイトのシステムをそっくり移行するという都合上、URLを前のものと完璧に合わせたかったというのがあります。&lt;a href="https://github.com/neuecc/Blog2/tree/gh-pages"&gt;生成結果のファイル一覧&lt;/a&gt;が若干変というかクドいというか、といったところがあるのですが、これは前のWordPressでやっていたルーティングをそのまんま再現するためということで。WordPressからのエクスポートも、DB直接見てC#でそのままテーブルダンプから作ったので、まぁ別に大したコードが必要なわけでもないので一気に作っちゃえという気になったというのもあります。&lt;/p&gt;
&lt;p&gt;外部ライブラリとしてはMarkdownのHTML化に&lt;a href="https://github.com/xoofx/markdig"&gt;Markdig&lt;/a&gt;を採用しました。色々高機能ではあるのですが、今回は &lt;code&gt;Markdown.ToHtml(input)&lt;/code&gt; しか使っていませんけれど、感触的にはとても良かったです。&lt;/p&gt;
&lt;p&gt;シンタックスハイライトには&lt;a href="https://prismjs.com/"&gt;Prism.js&lt;/a&gt;を用いました。Markdigの出力する```csharpの変換を、特に何も意識せずとも対象にしてくれるのが良かったですね。プラグインはautoloaderとnormalize-whitespaceを合わせて投下しています。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;script src=&amp;quot;&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/components/prism-core.min.js&amp;quot;&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/plugins/autoloader/prism-autoloader.min.js&amp;quot;&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/plugins/normalize-whitespace/prism-normalize-whitespace.min.js&amp;quot;&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;最近ブログ投稿がだいぶ減ってしまっていたのですが、システムも一新したことでやる気が出てきたのでいいことです。まぁ見た目は本当にあんま全然変わってないんですが……！&lt;/p&gt;
&lt;p&gt;なお、反映に必要な所要時間は30秒弱。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/142737556-eac40d7a-46c8-4534-96de-38895104d4cb.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;遅いっちゃあ遅いですが、許容できるといえば許容できますね。サイトジェネレートプログラムの実行時間自体は1秒以下で、別に全然時間かかってないんで、CIセットアップとか、それ以外の時間が何かとかかっちゃってます。GitHub Actionsの仕組み的にしょうがないといえばしょうがないんですが、もう少しなんとかなってほしいかなあ。あとGitHub Pages自体が反映が若干遅い。遅い上に進捗が分からないのが地味にストレスフル。とはいえとはいえ、良いんじゃあないでしょうか。良さの殆どはGitHub web-based editorから来てますね、これは本当に革命的に良い。というわけで、このweb-based editorを活かすシステムを作っていくという手段と目的を逆転させた思考が最終的に実際良いんじゃないかと思ってます！&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Sun, 21 Nov 2021 00:00:00 +0900</pubDate>
      <a10:updated>2021-11-21T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2021/08/23_602.html</guid>
      <link>https://neue.cc/2021/08/23_602.html</link>
      <title>C#でgoogle/zx風にシェルスクリプトを書く</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2021/08/23_602.html"&gt;C#でgoogle/zx風にシェルスクリプトを書く&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2021-08-23&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;あまりシェルスクリプトを書かない私なのですが（小物でもなんでも書き捨てC#で書くスタイル）、CI だの .NET Core だのなんなので、全く書かないというわけにもいかない昨今です。まぁしかしcmdは嫌だし今更(？)PowerShellもなぁという感じもあり、bashねぇ、とかブツブツ言いながらしょっぱいスクリプトを書く羽目になるわけです。&lt;/p&gt;
&lt;p&gt;そこに颯爽と現れたのが &lt;a href="https://github.com/google/zx"&gt;google/zx&lt;/a&gt;。素敵そうだなーと思いつつJavaScriptを日常的に書くわけでもないのでスルーしてたのですが、こないだも&lt;a href="https://scrapbox.io/lacolaco-engineering/%E3%81%A1%E3%82%87%E3%81%A3%E3%81%A8%E8%A4%87%E9%9B%91%E3%81%AA%E3%82%B7%E3%82%A7%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%82%92JavaScript%E3%81%A7%E6%9B%B8%E3%81%8F"&gt;ちょっと複雑なシェルスクリプトをJavaScriptで書く&lt;/a&gt;で紹介されていて、なるほど色物じゃなくて便利なのか、そうだよね便利だよね！と思い、私は日常的にC#を書くので、C#だったら便利だな、同じ感じで書けるなら、と、思い至ったのでした。&lt;/p&gt;
&lt;p&gt;というかまぁzx見て思ったのが、これぐらいの内部DSL、C#でもいけるよ、ということであり……。そして以下のようなものが誕生しました。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/130373766-0f16e9ad-57ba-446b-81ee-c255c7149035.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;もともと&lt;a href="http://neue.cc/2020/01/30_590.html"&gt;ProcessX - C#でProcessを C# 8.0非同期ストリームで簡単に扱うライブラリ&lt;/a&gt;というものを公開していたので、更にそれをDSL風味に、zxっぽくシンタックスを弄りました。C# 5.0 async/awaitの拡張性、C# 6.0 using static、C# 6.0 String Interpolation、そしてC# 9.0のTop level statementsと、C#も内部DSLを容易にする構文がどんどん足されています。現在previewのC# 10.0でも、Improvement Interpolated Stringsとして、InterpolatedStringHandlerによって$&amp;quot;&amp;quot;の生成時の挙動そのものを生で弄ることが可能になり、よりますます表現のハックが可能になり、色々と期待が持てます。&lt;/p&gt;
&lt;p&gt;さて、で、これが使いやすいかというと、見た通りで、使いやすい、です……！stringをawaitしていることに一瞬違和感はめちゃくちゃあるでしょうが、DSLだと思って慣れれば全然自然です（そうか？）。なんか言われてもgoogle/zxなもんです、で逃げれば説得力マシマシになった（そうか？）のが最高ですね。cmd/PowerShell/bashに対する利点は、google/zxの利点と同じように&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;型が効いてる(C#なので)&lt;/li&gt;
&lt;li&gt;async/awaitが便利(C#なので)&lt;/li&gt;
&lt;li&gt;フォーマッタもある(C#なので)&lt;/li&gt;
&lt;li&gt;エディタ支援が最高(C#なので)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ということで、ぜひぜひお試しください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Cysharp/ProcessX"&gt;https://github.com/Cysharp/ProcessX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PM&amp;gt; Install-Package ProcessX&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;csx vs new csproj vs ConsoleAppFramework&lt;/h2&gt;
&lt;p&gt;C#には.csxという失われしC#スクリプティングな構文が用意されていて、まさに1ファイルでC#の実行が完結するのでこうしたシェルスクリプト風味に最適、と思いきや、実行もエディッティング環境も貧弱で、まさに失われしテクノロジーになっているので、見なかったことにしておきましょう。実際、より良いC#スクリプティング的なシンプルC#の提案が &lt;a href="https://github.com/dotnet/designs/pull/213"&gt;Add Simple C# Programs&lt;/a&gt; として出ています(つまりcsxは完全に産廃、NO FUTURE……)。提案(&lt;a href="https://github.com/dotnet/designs/blob/a27fd42a68370f315bc2293dc748145f4075697f/proposed/simple-csharp-programs.md"&gt;proposed/simple-csharp-pgorams.md&lt;/a&gt;)読むと面白いですが、ちょっと少し時間かかりそうですね。&lt;/p&gt;
&lt;p&gt;というわけで、csprojとProgram.csの2ファイル構成が良いんじゃないかと思います。ちょっと冗長ではあるけれど、しょーがないね。実行に関しては dotnet run でビルドと実行がその場でできるので、ビルドなしの直接スクリプト実行みたいな雰囲気にはできます。これは普通に便利で、CIとかでもgit pullしている状態のリポジトリ内のスクリプトに対して一行でdotnet run書くだけで動かせるので、非常に良い。こうした .NET Core以降のシンプルになったcsprojとdotnetコマンドの充実から、csxの価値がどんどん消えていったんですねえ。&lt;/p&gt;
&lt;p&gt;さて、実際のプロジェクトなどでは、そもそもシェルスクリプト（に限らずバッチなんかも）は一つどころか大量にあったりすることもあるでしょう。そこでCysharpの提供している&lt;a href="https://github.com/Cysharp/ConsoleAppFramework/"&gt;Cysharp/ConsoleAppFramework&lt;/a&gt;を使うと、クラスを定義するだけで簡単に実行対象を増やしていけるので、大量のスクリプトの管理を1csprojでまかなうことが可能になります。実行は dotnet run -- foo/bar のようにすればいいだけです。非常におすすめ。シェルスクリプト的なものは、ConsoleAppFramework + ProcessX/zx で書いて回るのは、悪くない選択になると思います。&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Mon, 23 Aug 2021 00:00:00 +0900</pubDate>
      <a10:updated>2021-08-23T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2021/07/02_601.html</guid>
      <link>https://neue.cc/2021/07/02_601.html</link>
      <title>Microsoft MVP for Developer Technologies(C#)を再々々々々々々々々々受賞しました</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2021/07/02_601.html"&gt;Microsoft MVP for Developer Technologies(C#)を再々々々々々々々々々受賞しました&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2021-07-02&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;11回目。一年ごとに再審査があって7月に一斉更新されるシステムになっていて、今年も継続しました。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/neuecc/MessagePack-CSharp/"&gt;MessagePack for C#&lt;/a&gt;はprotobuf-netを抜いて、 .NET で最もGitHubのスター数の多いバイナリシリアライザになりそうな感じです（今はまだちょっと負けてるので、勢い的に8月か9月ぐらいには）。まぁ、たった3000ちょいがMost StarsというC#の狭さみたいなところがなきにしもあらずではありますが(JavaScriptだと桁が違うからなあ）、.NET の存在感というのは決して劣ってはいないと思います。&lt;/p&gt;
&lt;p&gt;MessagePack for C#は&lt;a href="https://github.com/neuecc/MessagePack-CSharp/pull/1272"&gt;v3を計画&lt;/a&gt;しています。パフォーマンスの大幅な向上（特にUnityで！）や、より良い使い勝手、ゼロアロケーションを超えたゼロコピー、SourceGenerator対応によるAOT対応の強化などなどを、破壊的変更も含めた上で考えてます。改めて、 .NET 6時代の最高のシリアライザを目指しています。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Cysharp"&gt;GitHub/Cysharp&lt;/a&gt;で公開しているものも、新規には &lt;a href="https://github.com/Cysharp/MessagePipe"&gt;MessagePipe&lt;/a&gt;は結構良いと思いますし、引き続き &lt;a href="https://github.com/Cysharp/MagicOnion"&gt;MagicOnion&lt;/a&gt;や&lt;a href="https://github.com/Cysharp/UniTask"&gt;UniTask&lt;/a&gt;は開発進めています。&lt;/p&gt;
&lt;p&gt;つまり全体的にとてもC#に貢献している。なるほどえらい。そりゃ更新も当然ですね（&lt;/p&gt;
&lt;p&gt;今年は会社として、今ひとつ大きなプロダクトを仕込んでいる最中でして、それで大きなインパクトを Unity と .NET 、双方で引き起こせるはず、です……！乞うご期待。&lt;/p&gt;
&lt;p&gt;というわけかで引き続きC#の最前線で戦っていきますので、今年もよろしくおねがいします。&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Fri, 02 Jul 2021 00:00:00 +0900</pubDate>
      <a10:updated>2021-07-02T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2021/05/08_600.html</guid>
      <link>https://neue.cc/2021/05/08_600.html</link>
      <title>2021年のC# Roslyn Analyzerの開発手法、或いはUnityでの利用法</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2021/05/08_600.html"&gt;2021年のC# Roslyn Analyzerの開発手法、或いはUnityでの利用法&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2021-05-08&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;C#のAnalyzer、.NET 5時代の現在では標準でも幾つか入ってきたり、&lt;a href="https://github.com/dotnet/roslyn-analyzers"&gt;dotnet/roslyn-analyzers&lt;/a&gt;として準標準なものも整備されてきたり（非同期関連だと他に&lt;a href="https://github.com/microsoft/vs-threading/blob/main/doc/analyzers/index.md"&gt;microsoft/vs-threading&lt;/a&gt;のAnalyzerも便利)、&lt;a href="https://docs.unity3d.com/2020.2/Documentation/Manual/roslyn-analyzers.html"&gt;Unity 2020.2からはUnityもAnalyzer対応したり&lt;/a&gt;、MicrosoftもUnity向けの&lt;a href="https://github.com/microsoft/Microsoft.Unity.Analyzers"&gt;microsoft/Microsoft.Unity.Analyzers&lt;/a&gt;という便利Analyzerが登場してきたりと、特に意識せずとも自然に使い始めている感じになってきました。&lt;/p&gt;
&lt;p&gt;Analyzerって何？というと、まぁlintです。lintなのですが、Roslyn(C#で書かれたC# Compiler)から抽象構文木を取り出せるので、それによってユーザーが自由にルールを作って、警告にしたりエラーにしたりできる、というのがミソです。更に高度な機能として、CodeFix(コードを任意に修正)もついているのですが、それはそれとして。&lt;/p&gt;
&lt;p&gt;このサイトでも幾つか書いてきましたが、初出の2014年-2015年辺りに固まってますね。もう6年前！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://neue.cc/2014/11/20_485.html"&gt;VS2015のRoslynでCode Analyzerを自作する(ついでにUnityコードも解析する)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://neue.cc/2014/12/08_496.html"&gt;VS2015+RoslynによるCodeRefactoringProviderの作り方と活用法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://neue.cc/2015/05/11_512.html"&gt;UniRxでの空呼び出し検出、或いはRoslynによるCode Aware Libraries時代の到来について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://neue.cc/2015/06/13_513.html"&gt;NotifyPropertyChangedGenerator - RoslynによるVS2015時代の変更通知プロパティの書き方&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実用的という点では、&lt;a href="https://github.com/neuecc/MessagePack-CSharp"&gt;MessagePack for C#&lt;/a&gt;に同梱しているMessagePackAnalyzerは今も現役でしっかり便利に使える代物になっています。&lt;/p&gt;
&lt;p&gt;と、いうわけで使う分にはいい感じになってきた、のですが、作る側はそうでもありません。初出の2015年辺りからテンプレートは変わってなくて、NuGetからすんなり入れれる時代になっても、VSIXがついてくるようなヘヴィなテンプレート。このクロスプラットフォームの時代に.NET Frameworkべったり、Visual Studioベッタリって……。Analyzerと似たようなシステムを使うSource Generator(&lt;a href="http://neue.cc/2020/12/15_597.html"&gt;UnitGenerator - C# 9.0 SourceGeneratorによるValueObjectパターンの自動実装とSourceGenerator実装Tips
&lt;/a&gt;)は、まぁまぁ今風のそこそこ作りやすい環境になってきたのに、Analyzerは取り残されている雰囲気があります。&lt;/p&gt;
&lt;p&gt;AnalyzerはCodeFixまで作ると非常に面倒なのですが、Analyzer単体でも非常に有益なんですよね。そしてプロジェクト固有の柔軟なエラー処理というのは、あって然りであり、もっとカジュアルに作れるべきなのです。が、もはや私でも腰が重くなってしまうぐらいに、2021年に作りたくないVisual Studio 2019のAnalyzerテンプレート……。&lt;/p&gt;
&lt;p&gt;どうしたものかなー、と思っていたのですが、非常に良い記事を見つけました、2つ！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/ryuix/items/36dabbf3c7e4e395e49e"&gt;SourceGeneratorのデバッグ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/naminodarie/articles/32973a36fcbe99"&gt;【C#】アナライザー・ソースジェネレーター開発のポイント&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前者の記事ではVS2019 16.10 preview2で ソースジェネレーターのデバッガーサポートが追加された、 &lt;code&gt;&amp;lt;IsRoslynComponent&amp;gt;true&amp;lt;/IsRoslynComponent&amp;gt;&lt;/code&gt; とすればいい。という話。なるほどめっちゃ便利そう、でもソースジェネレーターばっか便利になってくのはいいんですがAnalyzer置いてきぼりですかぁ？と思ったんですが、 &lt;code&gt;IsRoslynComponent&lt;/code&gt; だし、なんか挙動的にも別にAnalyzerで動いても良さそうな雰囲気を醸し出してる。と、いうわけで試してみたら無事動いた！最高！VS2019 16.10はまだpreviewですが(現時点では16.9が安定版の最新)、これはもうこれだけでpreview入れる価値ありますよ（あと少し待てば普通に正式版になると思うので待っても別にいいですが）&lt;/p&gt;
&lt;p&gt;後者の記事は .NET 5 時代のすっきりしたAnalyzerのcsprojの書き方を解説されています。つまり、この2つを合体させればシンプルにAnalyzerを開発できますね……？&lt;/p&gt;
&lt;p&gt;というわけでやっていきましょう。中身は本当に上記2つの記事そのものなので、そちらのほうも参照してください。&lt;/p&gt;
&lt;h2&gt;SuperSimpleAnalyzerをシンプル構成で作る&lt;/h2&gt;
&lt;p&gt;まずは Visual Studio 2019 16.10 をインストールします。16.10はついこないだ正式版になったばかりなので、バージョンを確認して16.10未満の場合はアップデートしておきましょう。&lt;/p&gt;
&lt;p&gt;Analyzerはnetstarndard2.0、Analyzerを参照するテスト用のConsoleAppプロジェクトをnet5.0で作成します。最終的には以下のようなソリューション構造にします。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/117477060-7c494b00-af98-11eb-8b45-b52734713821.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;さて、ではSuperSimpleAnalyzerのほうのcsprojをコピペ的に以下のものにしましょう。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;
    &amp;lt;PropertyGroup&amp;gt;
        &amp;lt;OutputType&amp;gt;library&amp;lt;/OutputType&amp;gt;
        &amp;lt;TargetFramework&amp;gt;netstandard2.0&amp;lt;/TargetFramework&amp;gt;
        &amp;lt;LangVersion&amp;gt;latest&amp;lt;/LangVersion&amp;gt;
        &amp;lt;Nullable&amp;gt;enable&amp;lt;/Nullable&amp;gt;
        &amp;lt;IsRoslynComponent&amp;gt;true&amp;lt;/IsRoslynComponent&amp;gt;
        &amp;lt;TargetsForTfmSpecificContentInPackage&amp;gt;$(TargetsForTfmSpecificContentInPackage);PackBuildOutputs&amp;lt;/TargetsForTfmSpecificContentInPackage&amp;gt;
        &amp;lt;IncludeBuildOutput&amp;gt;false&amp;lt;/IncludeBuildOutput&amp;gt;
        &amp;lt;IncludeSymbols&amp;gt;false&amp;lt;/IncludeSymbols&amp;gt;
        &amp;lt;SuppressDependenciesWhenPacking&amp;gt;true&amp;lt;/SuppressDependenciesWhenPacking&amp;gt;
        &amp;lt;DevelopmentDependency&amp;gt;true&amp;lt;/DevelopmentDependency&amp;gt;
    &amp;lt;/PropertyGroup&amp;gt;

    &amp;lt;ItemGroup&amp;gt;
        &amp;lt;PackageReference Include=&amp;quot;Microsoft.CodeAnalysis.Analyzers&amp;quot; Version=&amp;quot;3.3.2&amp;quot;&amp;gt;
            &amp;lt;IncludeAssets&amp;gt;runtime; build; native; contentfiles; analyzers&amp;lt;/IncludeAssets&amp;gt;
            &amp;lt;PrivateAssets&amp;gt;all&amp;lt;/PrivateAssets&amp;gt;
        &amp;lt;/PackageReference&amp;gt;
        &amp;lt;PackageReference Include=&amp;quot;Microsoft.CodeAnalysis.CSharp&amp;quot; Version=&amp;quot;3.8.0&amp;quot; /&amp;gt;
    &amp;lt;/ItemGroup&amp;gt;

    &amp;lt;Target Name=&amp;quot;PackBuildOutputs&amp;quot; DependsOnTargets=&amp;quot;SatelliteDllsProjectOutputGroup;DebugSymbolsProjectOutputGroup&amp;quot;&amp;gt;
        &amp;lt;ItemGroup&amp;gt;
            &amp;lt;TfmSpecificPackageFile Include=&amp;quot;$(TargetDir)\*.dll&amp;quot; PackagePath=&amp;quot;analyzers\dotnet\cs&amp;quot; /&amp;gt;
            &amp;lt;TfmSpecificPackageFile Include=&amp;quot;@(SatelliteDllsProjectOutputGroupOutput-&amp;gt;'%(FinalOutputPath)')&amp;quot; PackagePath=&amp;quot;analyzers\dotnet\cs\%(SatelliteDllsProjectOutputGroupOutput.Culture)\&amp;quot; /&amp;gt;
        &amp;lt;/ItemGroup&amp;gt;
    &amp;lt;/Target&amp;gt;
&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;基本的に&lt;a href="https://zenn.dev/naminodarie/articles/32973a36fcbe99"&gt;【C#】アナライザー・ソースジェネレーター開発のポイント&lt;/a&gt;から丸コピペさせてもらっちゃっているので、それぞれの詳しい説明は参照先記事に譲ります……！幾つか重要な点を出すと、&lt;code&gt;Microsoft.CodeAnalysis.CSharp&lt;/code&gt;のバージョンは新しすぎると詰みます。現在の最新は3.9.0ですが、3.9.0だと、今の正式版VS2019(16.9)だと動かない(動かなかったです、私の環境では、どうなんですかね？)ので、ちょっと古めの3.8.0にしておきます。&lt;/p&gt;
&lt;p&gt;もう一つは、件の &lt;code&gt;&amp;lt;IsRoslynComponent&amp;gt;true&amp;lt;/IsRoslynComponent&amp;gt;&lt;/code&gt; の追加です。&lt;/p&gt;
&lt;p&gt;では、次にConsoleApp.csprojのほうに行きましょう。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;

    &amp;lt;PropertyGroup&amp;gt;
        &amp;lt;OutputType&amp;gt;Exe&amp;lt;/OutputType&amp;gt;
        &amp;lt;TargetFramework&amp;gt;net5.0&amp;lt;/TargetFramework&amp;gt;
    &amp;lt;/PropertyGroup&amp;gt;

    &amp;lt;ItemGroup&amp;gt;
        &amp;lt;ProjectReference Include=&amp;quot;..\AnalyzerDemo\SuperSimpleAnalyzer.csproj&amp;quot;&amp;gt;
            &amp;lt;ReferenceOutputAssembly&amp;gt;false&amp;lt;/ReferenceOutputAssembly&amp;gt;
            &amp;lt;OutputItemType&amp;gt;Analyzer&amp;lt;/OutputItemType&amp;gt;
        &amp;lt;/ProjectReference&amp;gt;
    &amp;lt;/ItemGroup&amp;gt;

&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;こちらは別に特段変わったことなく、Analyzerのcsprojを参照するだけです。その際に &lt;code&gt;&amp;lt;OutputItemType&amp;gt;Analyzer&amp;lt;/OutputItemType&amp;gt;&lt;/code&gt;を欠かさずに。&lt;/p&gt;
&lt;p&gt;では再び SuperSimpleAnalyzer に戻って、プロパティ→デバッグから、「起動」をRoslyn Componentに変更すると以下のような形にできます。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/117478072-ab13f100-af99-11eb-9904-f7fae1b899a7.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;（この時、Target Projectが真っ白で何も選択できなかったら、ConsoleAppのほうでAnalyzer参照をしてるか確認の後、とりあえずVisual Studioを再起動しましょう）&lt;/p&gt;
&lt;p&gt;これで、SuperSimpleAnalyzerをF5するとAnalyzerがConsoleAppで動いてる状態でデバッガがアタッチされます！&lt;/p&gt;
&lt;p&gt;のですが、最後にじゃあそのAnalyzerの実体をコピペできるように置いておきます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;#pragma warning disable RS2008

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Diagnostics;
using System.Collections.Immutable;
using System.Linq;

[DiagnosticAnalyzer(LanguageNames.CSharp)]
public class SuperSimpleAnalyzer : DiagnosticAnalyzer
{
    // どうせローカライズなんてしないのでString直書きしてやりましょう
    private static readonly DiagnosticDescriptor Rule = new DiagnosticDescriptor(
        id: &amp;quot;SuperSimpleAnalyzer&amp;quot;,
        title: &amp;quot;SuperSimpleAnalyzer&amp;quot;,
        messageFormat: &amp;quot;MyMessageFormat&amp;quot;,
        category: &amp;quot;Naming&amp;quot;,
        defaultSeverity: DiagnosticSeverity.Warning,
        isEnabledByDefault: true,
        description: &amp;quot;Nanika suru.&amp;quot;);

    public override ImmutableArray&amp;lt;DiagnosticDescriptor&amp;gt; SupportedDiagnostics { get { return ImmutableArray.Create(Rule); } }
    
    public override void Initialize(AnalysisContext context)
    {
        // お約束。
        context.ConfigureGeneratedCodeAnalysis(GeneratedCodeAnalysisFlags.None);
        context.EnableConcurrentExecution();

        // 解析起動させたい部分を選ぶ。あとRegisterなんとかかんとかの種類は他にもいっぱいある。
        context.RegisterSymbolAction(AnalyzeSymbol, SymbolKind.NamedType);
    }

    private static void AnalyzeSymbol(SymbolAnalysisContext context)
    {
        // ここを適当に書き換える（これはサンプル通りの全部Lowerじゃないクラス名があった場合に警告を出す）
        var namedTypeSymbol = (INamedTypeSymbol)context.Symbol;

        if (namedTypeSymbol.Name.ToCharArray().Any(char.IsLower))
        {
            // Diagnosticを作ってReportDiagnosticに詰める。
            var diagnostic = Diagnostic.Create(Rule, namedTypeSymbol.Locations[0], namedTypeSymbol.Name);
            context.ReportDiagnostic(diagnostic);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Resourcesとか別に使う必要ないと思うので、ハイパーベタ書きの.csファイル一個に収めてあります。これでF5をすると……&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/117478737-7d7b7780-af9a-11eb-95cd-f1d970d2c22d.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;もちろんConsoleAppのほうでは、実際に動いて警告出している様が確認できます。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/117478595-558c1400-af9a-11eb-9516-47295823423c.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;昔のVSIXの時は、別のVisual Studioを起動させていたりしたので重たくて面倒くさかったのですが、今回の IsRoslynComponent では、普通のデバッグの感覚で実行できるので、めちゃくちゃ楽です。最高に書きやすい、これが2021年……！&lt;/p&gt;
&lt;h2&gt;ユニットテストもする&lt;/h2&gt;
&lt;p&gt;ユニットテストのいいところは、テストをデバッグ実行すればコードの中身をダイレクトにステップ実行できるところにもあります。ある程度、上のように実コードでデバッグ実行して雰囲気を作れた後は、ユニットテスト上で再現コードを作っていくと、より捗るでしょう。&lt;/p&gt;
&lt;p&gt;基本的にはxUnitのテンプレートでプロジェクトを作って、 &lt;code&gt;Microsoft.CodeAnalysis.CSharp.Analyzer.Testing.XUnit&lt;/code&gt; を参照に追加するだけ。ではあるのですが、net5でシンプルに作ったら連なってる依存関係のせいなのか .NET Frameworkのものの参照が入って警告されたりで鬱陶しいことになったので、とりあえず以下のが警告の出ないパターン（？）で作ったものになります。netcoreapp3.1で。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;

    &amp;lt;PropertyGroup&amp;gt;
        &amp;lt;TargetFramework&amp;gt;netcoreapp3.1&amp;lt;/TargetFramework&amp;gt;
        &amp;lt;IsPackable&amp;gt;false&amp;lt;/IsPackable&amp;gt;
    &amp;lt;/PropertyGroup&amp;gt;

    &amp;lt;ItemGroup&amp;gt;
        &amp;lt;PackageReference Include=&amp;quot;Microsoft.CodeAnalysis.Analyzers&amp;quot; Version=&amp;quot;3.3.2&amp;quot;&amp;gt;
            &amp;lt;IncludeAssets&amp;gt;runtime; build; native; contentfiles; analyzers&amp;lt;/IncludeAssets&amp;gt;
            &amp;lt;PrivateAssets&amp;gt;all&amp;lt;/PrivateAssets&amp;gt;
        &amp;lt;/PackageReference&amp;gt;
        &amp;lt;PackageReference Include=&amp;quot;Microsoft.CodeAnalysis.CSharp&amp;quot; Version=&amp;quot;3.8.0&amp;quot; /&amp;gt;
        &amp;lt;PackageReference Include=&amp;quot;Microsoft.CodeAnalysis.CSharp.Workspaces&amp;quot; Version=&amp;quot;3.8.0&amp;quot; /&amp;gt;
        &amp;lt;PackageReference Include=&amp;quot;Microsoft.CodeAnalysis.CSharp.Analyzer.Testing.XUnit&amp;quot; Version=&amp;quot;1.1.0&amp;quot; /&amp;gt;

        &amp;lt;PackageReference Include=&amp;quot;Microsoft.NET.Test.Sdk&amp;quot; Version=&amp;quot;16.9.4&amp;quot; /&amp;gt;
        &amp;lt;PackageReference Include=&amp;quot;xunit&amp;quot; Version=&amp;quot;2.4.1&amp;quot; /&amp;gt;
        &amp;lt;PackageReference Include=&amp;quot;xunit.runner.visualstudio&amp;quot; Version=&amp;quot;2.4.3&amp;quot;&amp;gt;
            &amp;lt;IncludeAssets&amp;gt;runtime; build; native; contentfiles; analyzers; buildtransitive&amp;lt;/IncludeAssets&amp;gt;
            &amp;lt;PrivateAssets&amp;gt;all&amp;lt;/PrivateAssets&amp;gt;
        &amp;lt;/PackageReference&amp;gt;
    &amp;lt;/ItemGroup&amp;gt;
&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このプロジェクトに作ったAnalyzerの参照を足して、以下のようなテストコードを書きます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;        [Fact]
        public async Task SimpleTest2()
        {
            var testCode = @&amp;quot;
class Program
{
    static void Main()
    {
    }
}&amp;quot;;

            await Microsoft.CodeAnalysis.CSharp.Testing.XUnit.AnalyzerVerifier&amp;lt;SuperSimpleAnalyzer&amp;gt;
                .VerifyAnalyzerAsync(testCode, new DiagnosticResult(&amp;quot;SuperSimpleAnalyzer&amp;quot;, DiagnosticSeverity.Warning).WithSpan(0, 0, 0, 0));
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;やることはVerifyAnalyzerAsyncに、それによって発生するエラー部分をDianogsticResultで指定する、という感じです。&lt;/p&gt;
&lt;p&gt;シンプルなケースはそれでいいのですが、テストコードにNuGetで外部ライブラリ参照があったり、プロジェクト参照があったりすると、これだけだとテストできません。そこで、そうしたケースが必要な場合は CSharpAnalyzerTest に追加の参照関係を指定してあげる必要があります( XUnit.AnalyzerVerifier は CSharpAnalyzerTest をxUnitのシンプルなケースに特化してラップしただけのものです）。&lt;/p&gt;
&lt;p&gt;例えば&lt;a href="https://github.com/Cysharp/MessagePipe/"&gt;MessagePipe&lt;/a&gt;では以下のようなユーティリティを用意してテストしました。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;static async Task VerifyAsync(string testCode, int startLine, int startColumn, int endLine, int endColumn)
{

    await new CSharpAnalyzerTest&amp;lt;MessagePipeAnalyzer, XUnitVerifier&amp;gt;
    {
        ReferenceAssemblies = ReferenceAssemblies.Default.WithPackages(ImmutableArray.Create(new PackageIdentity(&amp;quot;MessagePipe&amp;quot;, &amp;quot;1.4.0&amp;quot;))),
        ExpectedDiagnostics = { new DiagnosticResult(&amp;quot;MPA001&amp;quot;, DiagnosticSeverity.Error).WithSpan(startLine, startColumn, endLine, endColumn) },
        TestCode = testCode
    }.RunAsync();
}

static async Task VerifyNoErrorAsync(string testCode)
{

    await new CSharpAnalyzerTest&amp;lt;MessagePipeAnalyzer, XUnitVerifier&amp;gt;
    {
        ReferenceAssemblies = ReferenceAssemblies.Default.WithPackages(ImmutableArray.Create(new PackageIdentity(&amp;quot;MessagePipe&amp;quot;, &amp;quot;1.4.0&amp;quot;))),
        ExpectedDiagnostics = { },
        TestCode = testCode
    }.RunAsync();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これで&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;        [Fact]
        public async Task SimpleTest()
        {
            var testCode = @&amp;quot;using MessagePipe;

class C
{
    public void M(ISubscriber&amp;lt;int&amp;gt; subscriber)
    {
        subscriber.Subscribe(x =&amp;gt; { });
    }
}&amp;quot;;

            await VerifyAsync(testCode, 7, 9, 7, 39);
        }

        [Fact]
        public async Task NoErrorReport()
        {
            var testCode = @&amp;quot;using MessagePipe;

class C
{
    public void M(ISubscriber&amp;lt;int&amp;gt; subscriber)
    {
        var d = subscriber.Subscribe(x =&amp;gt; { });
    }
}&amp;quot;;

            await VerifyNoErrorAsync(testCode);
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;のようにテストが書けました。&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;というわけでAnalyzer書いていきましょう。今現在は結局Visual Studioだけかよ！みたいな気もしなくもないですが、そのうちVS CodeとかRiderでも出来るようになるんじゃないでしょうか、どうだろうね、そのへんはわかりません。&lt;/p&gt;
&lt;p&gt;ところでUnity 2020.2からAnalyzerが使えると言いましたが、そのサポート状況はなんだかヘンテコで、ぶっちゃけあんま使えないんじゃ疑惑があります。特に問題は、Unity Editor側では有効になっているけどIDE側で有効にならない場合が割とあります。これはUnityの生成したcsprojに、カスタムで追加したAnalyzerの参照が適切に入ってなかったりするせいなのですが、それだと使いづらいですよね、というかAnalyzerってコード書いてる最中にリアルタイムに警告あるのがイケてるポイントなので。&lt;/p&gt;
&lt;p&gt;そこでCysharpで&lt;a href="https://github.com/Cysharp/CsprojModifier"&gt;CsprojModifier&lt;/a&gt;というUnity用の拡張をオープンソースで公開しました。ついさっき。6時間ぐらい前に。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/Cysharp/CsprojModifier/raw/master/docs/images/Screen-01.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;これがあるとUnityでも正しくAnalyzerの参照の入ったcsprojを使える他に、例えば&lt;a href="https://github.com/dotnet/roslyn-analyzers/blob/main/src/Microsoft.CodeAnalysis.BannedApiAnalyzers/BannedApiAnalyzers.Help.md"&gt;BannedApiAnalyzers&lt;/a&gt;という、任意のクラスやメソッド、プロパティの呼び出しを禁止するという、かなり使えるAnalyzerがあるんですが（例えばUnityだとGameObject.Find絶対禁止マンとかが作れます）、これはどのメソッドの呼び出しを禁止するかをBannedSymbols.txtというファイルに書く必要があり、Unityのcsproj生成まんまだとこのBannedSymbols.txtへの参照が作れないんですね。で、CsprojModifierなら、参照を入れたcsprojが作れるので、問題なくUnityでBannedApiAnalyzersが使えるようになるというわけです。&lt;/p&gt;
&lt;p&gt;というわけで改めて、Analyzer、書いていきましょう……！&lt;/p&gt;
&lt;p&gt;実際こないだリリースした&lt;a href="https://github.com/Cysharp/MessagePipe/"&gt;MessagePipe&lt;/a&gt;用に、Subscribe放置を絶対に許さない（エラー化する）Analyzerを公開しました。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/117535259-da753d00-b02f-11eb-9818-0ab5ef3049b1.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;こういうの、必要だし、そしてちゃんと導入するととても強力なんですよね。せっかくのC#の強力な機能なので、やっていきましょう。&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Sat, 08 May 2021 00:00:00 +0900</pubDate>
      <a10:updated>2021-05-08T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2021/02/26_599.html</guid>
      <link>https://neue.cc/2021/02/26_599.html</link>
      <title>C#のasync/await再考, タイムアウト処理のベストプラクティス, UniTask v2.2.0</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2021/02/26_599.html"&gt;C#のasync/await再考, タイムアウト処理のベストプラクティス, UniTask v2.2.0&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2021-02-26&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;お題を3つ並べましたが、記事は逆順で書いていきます！というわけで、&lt;a href="https://github.com/Cysharp/UniTask"&gt;UniTask v2.2.0&lt;/a&gt;を出しました。改めてUniTask v2とは&lt;a href="https://tech.cygames.co.jp/archives/3417/"&gt;Unityのためのゼロアロケーションasync/awaitと非同期LINQ&lt;/a&gt;を実現するライブラリで、とv2リリース時の解説記事を貼っつけましたが、ちょいちょい細かい改善を続けてまして、今回v2.2.0になります。&lt;/p&gt;
&lt;h2&gt;PlayerLoopへのループ挿入のカスタマイズ対応&lt;/h2&gt;
&lt;p&gt;現状のUnityはPlayerLoop上で動いていて、&lt;a href="https://gist.github.com/neuecc/bc3a1cfd4d74501ad057e49efcd7bdae"&gt;Unity 2020.1のリストをここに置いておきました&lt;/a&gt;が、デフォルトでは120個ぐらいのループがエンジンから駆動されています。Updateループだけでも&lt;code&gt;ScriptRunBehaviourUpdate&lt;/code&gt;, &lt;code&gt;ScriptRunDelayedDynamicFrameRate&lt;/code&gt;, &lt;code&gt;ScriptRunDelayedTasks&lt;/code&gt;, &lt;code&gt;DirectorUpdate&lt;/code&gt;と色々あります。UniTaskも基本的にはPlayerLoop上で動かしているのですが、自由に任意の実行箇所を選べるように、28個のループを挿入しています。これにより &lt;code&gt;UniTask.Yield(PlayerLoopTiming.PreLateUpdate)&lt;/code&gt; などといったような指定を可能にしているわけですが、28個ってちょっと多いんじゃないか？という。デフォで120個あるうちのプラス28個、多いっちゃあ多いけど、ループの中身も空っぽに近いし、空UpdateのMonoBehaviourを10000個並べるみたいなのとは比較にならないほど小さい話だから許容範囲内ぢゃん、と思ってはいるんですが、例えばAndroidでDeep Profilingなんかすると、ちょとプロファイラのデータに出てきちゃったりなんかは指摘されたことがあります（Deep Profilingの影響があるので、実際のビルドではそうでもないんですが）。&lt;/p&gt;
&lt;p&gt;何れにせよ、99.99%はUpdateしか使わねえよ、みたいなのはあると思います。というわけで、UniTaskのPlayerLoopの挿入量を任意に調整できるようにしました。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterAssembliesLoaded)]
public static void InitUniTaskLoop()
{
    var loop = PlayerLoop.GetCurrentPlayerLoop();
    PlayerLoopHelper.Initialize(ref loop, InjectPlayerLoopTimings.Minimum);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これで、&lt;code&gt;Update | FixedUpdate | LastPostLateUpdate&lt;/code&gt; の3つしか挿入されなくなります。&lt;code&gt;InjectPlayerLoopTimings&lt;/code&gt;は任意のLoopTimingの選択、例えば &lt;code&gt;InjectPlayerLoopTimings.Update | InjectPlayerLoopTimings.FixedUpdate | InjectPlayerLoopTimings.PreLateUpdate&lt;/code&gt; のような指定と、3つのプリセット、 &lt;code&gt;All&lt;/code&gt;(デフォルトです), &lt;code&gt;Standard&lt;/code&gt;(Lastを抜いたもの、挿入量が半分になる(ただし一番最後のLastPostLateUpdateは挿入する))、&lt;code&gt;Minimum&lt;/code&gt;(Update, FixedUpate, LastPostLateUpdate)が選べます。正直なところ9割の人はMinimumで十分だと思ってますが、まぁ状況に応じて任意に足したり引いたりしてもらえればいいんじゃないかと。&lt;/p&gt;
&lt;p&gt;ところで、そうすると、挿入していないループタイミングを指定するとどうなるんですか？というと、実行時例外です。えー、それじゃー困るよーと思うので、そこで使えるのが&lt;a href="https://github.com/dotnet/roslyn-analyzers/blob/master/src/Microsoft.CodeAnalysis.BannedApiAnalyzers/BannedApiAnalyzers.Help.md"&gt;Microsoft.CodeAnalysis.BannedApiAnalyzers&lt;/a&gt;というやつで、(&lt;a href="https://docs.unity3d.com/2020.2/Documentation/Manual/roslyn-analyzers.html"&gt;Unity 2020.2からAnalyzerが何のハックもなくそのまま使えるようになった&lt;/a&gt;のでAnalyzerは普通に使えますよ！)、例えばInjectPlayerLoopTimings.Minimum用に、このBannedApiAnalyzersの設定、BannedSymbols.txtを書くとこうなります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-txt"&gt;F:Cysharp.Threading.Tasks.PlayerLoopTiming.Initialization; Isn't injected this PlayerLoop in this project.
F:Cysharp.Threading.Tasks.PlayerLoopTiming.LastInitialization; Isn't injected this PlayerLoop in this project.
F:Cysharp.Threading.Tasks.PlayerLoopTiming.EarlyUpdate; Isn't injected this PlayerLoop in this project.
F:Cysharp.Threading.Tasks.PlayerLoopTiming.LastEarlyUpdate; Isn't injected this PlayerLoop in this project.d
F:Cysharp.Threading.Tasks.PlayerLoopTiming.LastFixedUpdate; Isn't injected this PlayerLoop in this project.
F:Cysharp.Threading.Tasks.PlayerLoopTiming.PreUpdate; Isn't injected this PlayerLoop in this project.
F:Cysharp.Threading.Tasks.PlayerLoopTiming.LastPreUpdate; Isn't injected this PlayerLoop in this project.
F:Cysharp.Threading.Tasks.PlayerLoopTiming.LastUpdate; Isn't injected this PlayerLoop in this project.
F:Cysharp.Threading.Tasks.PlayerLoopTiming.PreLateUpdate; Isn't injected this PlayerLoop in this project.
F:Cysharp.Threading.Tasks.PlayerLoopTiming.LastPreLateUpdate; Isn't injected this PlayerLoop in this project.
F:Cysharp.Threading.Tasks.PlayerLoopTiming.PostLateUpdate; Isn't injected this PlayerLoop in this project.
F:Cysharp.Threading.Tasks.PlayerLoopTiming.TimeUpdate; Isn't injected this PlayerLoop in this project.
F:Cysharp.Threading.Tasks.PlayerLoopTiming.LastTimeUpdate; Isn't injected this PlayerLoop in this project.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;こうすると、例えば PlayerLoopTiming.LastUpdate をコード上に書くと RS0030 のWarningとなります。WarningじゃなくてErrorでいいので、そこはUnityのドキュメントの通りにwarn-&amp;gt;errorに設定を入れてやれば、以下の画像のようになります。&lt;/p&gt;
&lt;img src="https://user-images.githubusercontent.com/46207/109150837-bb933880-77ac-11eb-85ba-4fd15819dbd0.png" width=600 /&gt;
&lt;p&gt;このぐらい出来ていれば、十分でしょう。ところでBannedApiAnalyzersはめっちゃ使えるやつなので、これの対応以外にも普通に入れておくと捗ります。どうしてもこのメソッドはプロジェクトでは使用禁止！といったようなものはあると思います、それを規約じゃなくてコンパイルエラー（警告）に変換できるわけです。例えばGameObject.Find(&amp;quot;name&amp;quot;) 絶対殺すマンとかがさくっと設定できるわけです。&lt;/p&gt;
&lt;p&gt;（と思ったのですが、現状のUnity 2020.2のAnalyzer標準対応はかなりヘッポコのようで、そのままだとBannedApiAnalyzersはうまく使えなさそうです(BannedSymbols.txtの適用ができないとか、その他色々。csproj生成をフックして差し込むことはできるので、それによって差し込んでIDE側で利用する、ぐらいが妥協点になりそう)&lt;/p&gt;
&lt;h2&gt;タイムアウト処理について&lt;/h2&gt;
&lt;p&gt;タイムアウトはキャンセルのバリエーションと見なせます。つまり、CancellationTokenを渡すところに、時限発火のCancellationTokenを渡せばいいのです。そうすれば、タイムアウトの時間が来るとキャンセルが発動する。それがタイムアウト処理です。UniTaskでは &lt;code&gt;CancellationTokenSouce.CancelAfterSlim(TimeSpan)&lt;/code&gt; というのがあるので、それを使います。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var cts = new CancellationTokenSource();
cts.CancelAfterSlim(TimeSpan.FromSeconds(5)); // 5sec timeout.

try
{
    await UnityWebRequest.Get(&amp;quot;http://foo&amp;quot;).SendWebRequest().WithCancellation(cts.Token);
}
catch (OperationCanceledException ex)
{
    if (ex.CancellationToken == cts.Token) // Tokenの比較をすることで厳密に発火元を調べることができますが、この場合100%タイムアウトなので比較しなくてもそれはそれでいい
    {
        UnityEngine.Debug.Log(&amp;quot;Timeout&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;CancellationTokenSource は.NET標準のクラスであり、CancelAfterというメソッドが標準にありますが、これは（例によって）使わないでください。標準で備え付けられているものは当然のようにスレッドタイマーを用いますが、これはUnityにおいては不都合な場合が多いでしょう。CancelAfterSlimはUniTaskが用意している拡張メソッドで、PlayerLoopベースでタイマー処理を行います。パフォーマンス上でも軽量です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;タイムアウトによるキャンセル処理と、別のキャンセル処理を組み合わせたい場合も少なくないでしょう。その場合は &lt;code&gt;CancellationTokenSource.CreateLinkedTokenSource&lt;/code&gt; を使ってCancellationTokenを合成します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var cancelToken = new CancellationTokenSource();
cancelButton.onClick.AddListener(()=&amp;gt;
{
    cancelToken.Cancel(); // cancel from button click.
});

var timeoutToken = new CancellationTokenSource();
timeoutToken.CancelAfterSlim(TimeSpan.FromSeconds(5)); // 5sec timeout.

try
{
    // combine token
    var linkedTokenSource = CancellationTokenSource.CreateLinkedTokenSource(cancelToken.Token, timeoutToken.Token);

    await UnityWebRequest.Get(&amp;quot;http://foo&amp;quot;).SendWebRequest().WithCancellation(linkedTokenSource.Token);
}
catch (OperationCanceledException ex)
{
    if (timeoutToken.IsCancellationRequested)
    {
        UnityEngine.Debug.Log(&amp;quot;Timeout.&amp;quot;);
    }
    else if (cancelToken.IsCancellationRequested)
    {
        UnityEngine.Debug.Log(&amp;quot;Cancel clicked.&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これによってキャンセルボタンのクリックによるキャンセル発火と、タイムアウトによるキャンセル発火を合成することが出来ました。&lt;/p&gt;
&lt;h2&gt;TimeoutController&lt;/h2&gt;
&lt;p&gt;ここまでが王道パターンのキャンセル処理だったのですが、今回UniTask v2.2.0では新しくTimeoutControllerというクラスを追加しました。これはタイムアウトが発火しない場合はアロケーションがなく再利用可能なCancellationTokenSourceです。タイムアウトは例外的状況なはずなので、これによってほとんどの状況で、タイムアウト処理のためのアロケーションをゼロにすることができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;TimeoutController timeoutController = new TimeoutController(); // setup to field for reuse.

async UniTask FooAsync()
{
    try
    {
        // you can pass timeoutController.Timeout(TimeSpan) to cancellationToken.
        await UnityWebRequest.Get(&amp;quot;http://foo&amp;quot;).SendWebRequest()
            .WithCancellation(timeoutController.Timeout(TimeSpan.FromSeconds(5)));
        timeoutController.Reset(); // call Reset(Stop timeout timer and ready for reuse) when succeed.
    }
    catch (OperationCanceledException ex)
    {
        if (timeoutController.IsTimeout())
        {
            UnityEngine.Debug.Log(&amp;quot;timeout&amp;quot;);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再利用（と、内部のタイマーの停止）のために、awaitが正常終了したらResetを手動で呼んでください、という一点だけ気をつけてください。&lt;/p&gt;
&lt;p&gt;CreateLinkedTokenSource的な使い方をする場合は、コンストラクタの引数に別のCancellationTokenを渡せます。これによってTimeout(TimeSpan)で得られるCancellationTokenがリンクされたものとなります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;TimeoutController timeoutController;
CancellationTokenSource clickCancelSource;

void Start()
{
    this.clickCancelSource = new CancellationTokenSource();
    this.timeoutController = new TimeoutController(clickCancelSource);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ところでここで告知が幾つか有りまして、まず、UniTaskには標準で &lt;code&gt;.Timeout&lt;/code&gt;, &lt;code&gt;.TimeoutWithoutException&lt;/code&gt; というメソッドが生えているのですが、これらは可能であれば使わないでください。というのも、 &lt;code&gt;.Timeout&lt;/code&gt;は外部からタイムアウト処理を行うもので、その場合に動いているタスク本体を停止することができないのです。タイムアウトが発火してもTask自体は動いていて、やってることは結果を無視するということです（世の中、AbortできないAPIも少なくなくて、そういうもののキャンセル処理ってこういうことなので、別にこれ自体は悪いわけではない）。かたやCancellationTokenをメソッドに渡す場合は、内部からのタイムアウト処理となるので、その場合TaskがAbort可能なものであれば、正しく処理がAbortされます。まとめると、CancellationTokenを渡すことができないメソッドに対して外付けでタイムアウト処理を行いたいときだけ、&lt;code&gt;.Timeout&lt;/code&gt;を使いましょう、ということになります。正直名前ももう少し、あんま使わないで感を醸し出す名前に変更したいぐらいなのですが、まぁとりあえずは、ということで……。&lt;/p&gt;
&lt;p&gt;もう一つ、UniTaskには &lt;code&gt;AsyncOperation.WithCancellation&lt;/code&gt; とは別に &lt;code&gt;UniTask.WithCancellation&lt;/code&gt; というメソッドが生えていたのですが、&lt;code&gt;UniTask.WithCancellation&lt;/code&gt;のほうの名前を&lt;code&gt;AttachExternalCancellation&lt;/code&gt;に変更しました。これもTimeoutの話と同じで、 &lt;code&gt;AsyncOperation.WithCancellation&lt;/code&gt; が内部からのキャンセル処理で、 &lt;code&gt;UniTask.WithCancellation&lt;/code&gt; は外部からのキャンセル処理となっていて、挙動は似ていても内部動作が全く違うからです。内部キャンセルのほうが望ましいんですが、コードを見ただけだと内部キャンセルなのか外部キャンセルなのか分からないのは非常に良くない。つーかマズい。ダメ。ので変えました。名前的にも、使いたくない雰囲気を漂わせてる名前であるとおり、あんま使わないでねという意図が込められています。&lt;/p&gt;
&lt;p&gt;最後に微妙に細かいところなのですが、&lt;code&gt;AsyncOperation.WithCancellation&lt;/code&gt;の挙動を&lt;code&gt;.ToUniTask(cancellationToken)&lt;/code&gt;のただのショートカットにしました。Timeout処理で使うのに微妙に都合が悪かったからです。挙動はあんま変わらないんですが、細かく厳密なことを言うと少し違うんですが、まぁ、そういうことということで。&lt;/p&gt;
&lt;p&gt;この手の初期のデザインミスの修正は、あんま破壊的変更祭り死ね、とはならない程度に、ちょいちょいやらなきゃなあとは思ってるので、すみませんが宜しくおねがいします。&lt;/p&gt;
&lt;h2&gt;async/awaitは何故無限に分からないのか&lt;/h2&gt;
&lt;p&gt;async/await自体は非同期処理を容易にするための仕組みであり、雰囲気としては誰でも同期処理と同じように書けることをゴールにしています。そして、実際のところそれは、達成できてます。同期と同じことしかしなければ。asyncと宣言してawaitと書けば、同期処理と同じです。それは全く嘘偽りなく正しい。別にラムダ式も出てこないし特殊なコールバックも実行順序もない。ちゃんとループも書けるしtry-catchもできる。そういうように作られてる。&lt;/p&gt;
&lt;p&gt;じゃあなぜ難しいのかというと、同期処理よりも出来ることが増えているからです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直列にすべきか並行にすべきか&lt;/li&gt;
&lt;li&gt;キャンセルにどう対応すべきか&lt;/li&gt;
&lt;li&gt;伝搬の終点をどう扱うべきか&lt;/li&gt;
&lt;li&gt;Task(UniTask)が伝搬するのをよしとすべきか&lt;/li&gt;
&lt;li&gt;投げっぱなし処理にすべきか&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;で、これらってそもそも同期処理だと出来ないことなんですよね、キャンセルって同期だと原則できないわけで。だからキャンセルなんて考えず黙ってawait、以上。とすればいいのです。別に並行(WhenAll)なんてしなくても直列で回してもいいのです、だって同期だったら黙って直列でやってた話じゃないですか。以上。&lt;/p&gt;
&lt;p&gt;が、まぁ人間出来るとなると欲が出るし、そもそも実際そういうわけにはいかないので、同期処理と比べて、よりベターな処理にするために、考えることが増える。やるべきことが増える。そこが難しさのポイントです。でも出来ることが多いってのは良いアプリケーション作りのためには悪いことではない。ブロッキング処理がなくなればUIの体験は非常に良くなるし、並行処理で高速に読み込まれれば嬉しいし、きちんとキャンセル処理されたほうがいいに決まってる。だから、非同期は重要なのです。&lt;/p&gt;
&lt;p&gt;というわけで、とりあえず一個一個考えていきましょうか。&lt;/p&gt;
&lt;h2&gt;直列にすべきか並行にすべきか&lt;/h2&gt;
&lt;p&gt;これ、JavaScriptの記事とかで、 Promise.all 使わないのは素人、バーカバーカ。みたいな記事がめちゃくちゃ良くありますが、んなこたーなくて使うかどうかはものによる。もちろん簡単に並行に束ねられるのは素晴らしいことなので、それはいいです。大いにやるべきだ。じゃあ直列処理は間違ってるかというと、別に間違っちゃあいないし、そうすべき局面だってそれなりにある。あと、allを使う必要があるからasync/awaitよりPromiseだ、みたいなのは意味不明なので無視していい。そもそも、そういう人たちってロクにコード書いたことないからなのか、thenとallぐらいしか用例を知らない説すらある。awaitはただのthenの糖衣構文「ではない」し、thenだけだと無理があるみたいなパターンもいっぱいあります。例えば非同期のミドルウェアパターンを&lt;a href="http://neue.cc/2020/08/20_594.html"&gt;async decoratorパターンによるUnityWebRequestの拡張とUniTaskによる応用的設計例&lt;/a&gt;で紹介しましたが、これなんかはasync/awaitだからこそ成立させられる、そして非常に強力な用例です。&lt;/p&gt;
&lt;p&gt;と、脱線しましたが、とはいえこうした並行処理を簡単に書けるようになったのがasync/await（つまりはPromise/Future/Task/UniTask）のいいところです。同期処理の場合では書けないのは勿論、コールバックベースでも難しくて無理がある、のでやらないものだったのが、async/awaitの登場によって頻繁に出てくるパターン、そして誰でも比較的安全に処理できるパターンとなりました。ちなみにこれ、Promiseだけでも誰でも使えるパターンとはなり得なくて、async/awaitがあるからこそ、Promiseのコード上での出現頻度が上がり、それによって適用可能になるシチュエーションが増えるという側面があると思っています。&lt;/p&gt;
&lt;h2&gt;Task(UniTask)が伝搬するのをよしとすべきか&lt;/h2&gt;
&lt;p&gt;前の話から続けると、asyncのための型(Promise/Task/UniTask)が頻出するのは、いいことだと思ってます。そのお陰で、効果的に適用できるシチュエーションが増えるんですから。とはいえ面倒くせーしグチャグチャするし嫌だ、という気持ちは大いにわかる。はい。&lt;/p&gt;
&lt;p&gt;と、ここで最新型のasync/await実装であるSwift 6から幾つか例を見てみましょう。日本語でわかりやすくまとまってる &lt;a href="https://zenn.dev/koher/articles/swift6-concurrency"&gt;Swift 6で来たる並行処理の大型アップデート近況&lt;/a&gt; と &lt;a href="https://speakerdeck.com/koher/await"&gt;先取り！ Swift 6 の async/await&lt;/a&gt; から引かせてもらいますが、まずメソッドの宣言。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;func download(from url: URL) async -&amp;gt; Data
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dataが戻り値なわけですが UniTask[Data] みたいになっていない、Promiseが出てこないやったー、かというと、別にそんなこたぁないかなあ、と思います。Swiftの場合、asyncで宣言したメソッドにはawaitが必須であり、awaitを使うにはasyncである必要がある、と、伝搬していっているわけなので、 &lt;code&gt;async -&amp;gt; Data&lt;/code&gt; の一塊で見れば、制約や機能は UniTask[Data] のようなものと大きな違いはありません（型として明示されない分だけ、より強い制約がかかってるのですが、そのへんは後述）。&lt;/p&gt;
&lt;p&gt;そういうわけでasyncが伝搬している（悪いような言い方をすればコードを汚染している）わけですが、それに関してはどうでしょう。Swiftがいい対称性を持っているのは&lt;a href="https://qiita.com/koher/items/e4c1d88981291c35d571"&gt;Swiftの検査例外&lt;/a&gt;と似たような雰囲気で捉えられるところで、エラーの発生しうるメソッド(throws)の呼び出しにはawaitのようにtryが必要で、tryにはthrowかcatchが必要、と。&lt;/p&gt;
&lt;p&gt;なので、最下層でエラーなしメソッドからエラーありメソッドに変えたら、呼び出し側はどんどんさかのぼってエラー処理を書く必要がある。別にこれはGoも一緒ですよね、戻り値が(value)から(value, error)に変わり、対応していく必要がある。そういう対応が面倒くさいので、そうしたエラーに関しては検査しない勢もいる（C#や非検査例外のJavaなんかはそうですよね、どちらかというとむしろそのほうが多数派）わけで、良し悪し、とは言いませんが、現代的にエラー処理を強制的に伝搬させることは絶対に忌避するもの、というほどの価値観ではなくなってるのではないかと思います。&lt;/p&gt;
&lt;p&gt;で、async/awaitの話しに戻りますが、非同期もまた同様に最下層で同期から非同期に処理を変更したら伝搬していく。で、エラー処理をやったほうがいいのと同じように、同期から非同期へと性質が異なるものになったので、そしてそのことが型で明示されるのは当然いいことなので、伝搬していくのは当たり前じゃないですか？性質が変化したことを型(UniTask)なり宣言(async)なりで示し、上層側に性質が変化したことにより増えた出来ることの選択(並行処理/キャンセル/etc...)を与える。悪いことじゃないので受け入れるべきだし、async汚染とか言って喜んでるのはやめるべきですね。&lt;/p&gt;
&lt;p&gt;全部非同期というか、そういうことを全く意識させないような言語としてデザインする、というアイディアも当然あって、Goは実際それに近くて、しかも圧倒的に少数派で独特なデザインなのに大成功を収めているのが凄い。まぁじゃあそれが理想的で全ての言語がそうなっていくべきかというとそうではないとは思います（例えばキャンセルやタイムアウト処理などは結局意識させなきゃいけないので、Contextを伝搬させる必要があるため、完全に透過的にできているかというとそうではない。また全体のシンプル化の結果WaitGroupのような他ではあまり出てこないプリミティブな処理や、Channelが頻出する、もちろんそれはトレードオフなのでデザインとしてナシではないですが）。みんな違ってみんないい、とは思いませんが、目の前のプロダクトのために現在の現実の時間で何を選ぶべきか、という話ですね。&lt;/p&gt;
&lt;p&gt;伝搬はしょーがないとしても、書き味を良くするやり方はありますよね。Swiftの場合は、非同期で宣言している関数に同期関数を突っ込める。雑多なところでいうと、Task.FromResult()書いて回らなくていい、的な良さがありますね。ただまあ呼び出し側のawait, asyncの伝搬のほうが面倒くさ度というか、書くことはずっと多いので、あったほうがいいけど、なくても許容できるぐらいの感じかしら。&lt;/p&gt;
&lt;p&gt;それと async -&amp;gt; Data には UniTask[Data] のようなTask型が出てこない。これも一々ジェネリクスで書くの面倒くさいので、asyncって言ってるんだからイチイチ、そっちの型でまで書きたくない、と。めっちゃいいですね。はい、いいです。また、文法とタイトにくっついてるのでUniTaskのawait二度漬け禁止とか、フィールドには持たないで欲しいなぁみたいなのが文法レベルで制限かけられる。これもいいところです。&lt;/p&gt;
&lt;p&gt;じゃあそれと比べたC#の良いところというか現状こうなってるという点では、asyncで宣言した戻り値の型によって実行する非同期ランタイム(AsyncMethodBuilder)が切り替えられます。asyncで宣言したメソッドを非同期ステートマシンに変換するのはコンパイラの仕事ですが、そのステートマシンの各ポイントでどう処理するかの実行機は型に紐付いています。Taskで宣言しているメソッドはTaskの非同期ランタイム、ValueTaskで宣言してるメソッドはValueTaskの非同期ランタイム、そしてUniTaskで宣言してるメソッドはUniTaskの非同期ランタイムで動きます。UniTaskがやっているように、この非同期ランタイムはユーザーがC#で実装できます。&lt;/p&gt;
&lt;p&gt;世の中の99%は別に既定の非同期ランタイムで不自由しない、と思いきや、そうではなくて、完全にデフォルトの実装を無視して100%実行環境(Unity)に特化して最適化することの効果、意味みたいなことを実証したのがUniTaskで、ちゃんと成功しています。非同期実行ランタイムを切り替えられる言語は他にもありますが(Rustもそうですね)、C#のそれは私が自分で書いてそこそこうまく普及させたというのもありますが、現状よくできた仕組みになっているんじゃないかとは思います。&lt;/p&gt;
&lt;h2&gt;伝搬の終点&lt;/h2&gt;
&lt;p&gt;asyncは伝搬していきますが、一番根っこで何か処理しなきゃいけないのはC#もそうですし、別にSwiftも同様です。Swift 6の仕様を見る限り@asyncHandlerでマークされたメソッドは伝搬を打ち切った根っこのメソッドになるようですが、つまりようするにこれってC#でいうところの &lt;code&gt;async void&lt;/code&gt; です。&lt;/p&gt;
&lt;p&gt;伝搬をどういう風に打ち切ればいいのかというのは、実際初心者殺しなところがありますが、フレームワークがasync/await前提で作られている場合は意識させないことが可能です。例えばMVCウェブフレームワークのControllerで言ったら&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class FooController : Controller
{
    // Foo/Helloでアクセスできる
    public async Task Hello()
    {
        // Usercode...
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;というようにすると、ユーザーのコード記述のエントリポイントは async Task Hello であり、非同期伝搬の最上位の処理(async void)はMVCフレームワークの中で隠蔽されています。&lt;/p&gt;
&lt;p&gt;コンソールアプリケーションのMainもそうです&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;static async Task Main()
{
    // Usercode...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最上位がMainなので、伝搬の終点なんて考えなくていい。&lt;/p&gt;
&lt;p&gt;じゃあUnityは、とかWinFormsやWPFは？というと、async/awaitなんて存在しない時代からのフレームワークであり、別にそれを前提としていないので、最上位を自分で作る必要があります。これが悩ましさを増させてしまうんですね。まぁ大抵はユーザーの入力が起点なので、Buttonのイベントハンドラーに対して UniTaskVoid(async void) を突っ込む、みたいな運用になってきますが……。あとはStartCoroutineと同じような雰囲気で、MonoBehaviourのどこかでFireAndForgetですね。何れにせよ、自分で最上位となるポイントを判断しなきゃいけないというのが、ひと手間感じるところで、難しいと言われてもしょうがない話です。async voidは使うんじゃねえ（正しくはある）、みたいな話もあるから余計分からなくなるという。使っても良いんですよ、最上位では……。&lt;/p&gt;
&lt;p&gt;UniTaskの場合はUniTaskVoidという存在がまた面倒くささを増量しているのですが、上の方でC#は戻り値の型で非同期ランタイムを切り替えられると書きましたが、つまりvoidに対するC#既定のランタイムがあり、voidで宣言する以上、それは変えられないのです。そのためasync UniTaskVoid と書かせるのですが、voidは特殊な存在でありUniTaskVoidは普通の戻り値の型なので、C#コンパイラの都合上、最上位として使うためにはなんらかのハンドリング(空の警告を抑制するためだけの.Forget()呼び出し)が強いられるという……。&lt;/p&gt;
&lt;p&gt;C# 10.0 だから C# 11.0 だかに向けての提案に&lt;a href="https://github.com/dotnet/csharplang/blob/master/proposals/async-method-builders.md"&gt;AsyncMethodBuilder override&lt;/a&gt;という仕様があって、メソッド単位で非同期ランタイムを選択できるようになる、可能性があります。そうしたら&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[AsyncMethodBuilderOverride(typeof(UniTaskVoidMethodBuilder))]
async void FooAsync() { }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;みたいに書けるようになるかもしれません。うーん、でも別にこれ全然書き味悪いですねぇ。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[UniTaskVoid]
async void FooAsync() { }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ぐらいまで縮められるようになって欲しい、まぁまだProposalなので今後に期待、あとどっか適当なタイミングで提案しておこう（そもそも C# で現実的に稼働してる 非同期ランタイム を実装してるのはMicrosoftのTask/ValueTask実装者(Stephen Toub)と私ぐらいしかいないのだ）&lt;/p&gt;
&lt;h2&gt;キャンセルにどう対応すべきか&lt;/h2&gt;
&lt;p&gt;C#において、asyncメソッドは引数の最後にCancellationTokenを受け入れるべきだというふんわりした規約があります。これが、ダセーしウゼーし面倒くせーと大不評で。なるほどね、そうだね！私もそう思う！&lt;/p&gt;
&lt;p&gt;なんでこうなってるかというと、asyncに使うTask型って別にasyncで宣言したメソッドからしか作れないわけじゃなくて、手動で作れるんですよね。new Taskみたいな。Task.FromResultみたいな。それどころか別にawaitできる型もGetAwaiterという決め打ちな名前のメソッドを後付けで（拡張メソッドで）実装すればawaitできるようになりますからね。ゆるふわー。&lt;/p&gt;
&lt;p&gt;それはそれで非常に拡張性があって、そもそもasync/awaitに全然対応していないもの(Unity)に対してもユーザー側(UniTask)が対応させることが出来たりして、とても良かったのです、が、awaitする型全体を通してコンパイラがChildTask的な、便利Contextを裏側で自動で伝搬してあげるみたいな仕組みを作りづらいわけです。&lt;/p&gt;
&lt;p&gt;Swiftの場合は言語とタイトにくっついたasyncが用意されているので、&lt;code&gt;let handle = Task.runDetached { await ...}  handle.cancel()&lt;/code&gt; みたいに書ける、つまりObservableをSubscribeしたのをDisposeすればCancelでこれがUniRxで良かったのにUniTaskは面倒くせえなおい、みたいなことが出来てハッピーっぽそうです。独立したCancellationTokenを持っているのは、それはそれで柔軟な取り回しができて悪くない場合もあるんですが、まぁ99.99%の状況で上位から伝搬するCancellationTokenだけで済むのは間違いないでしょう。&lt;/p&gt;
&lt;p&gt;ともあれ現状のC#的にはどうにもなんないししょーがないかなぁ、と思ってます。（GoだってContext手動で取り回すわけだし、ね）。はい。実際にはExecutionContextというスロットをawaitの伝搬で共有していて、SynchronizationContext.Currentはそれ経由で格納されてるので、そこにCancellationToken.Currentみたいなものを仕込むこと自体はランタイム的には出来るんですけどね。でも、ExecutionContextのスロットを使うというオーバーヘッドも避けれるなら避けたほうがいいというのもあります（などもあって、Taskで自動的に行われているExecutionContextの伝搬をUniTaskでは切っています）。&lt;/p&gt;
&lt;p&gt;一応、文化として「引数の最後にCancellationTokenを受け入れる」というルールが普及していること自体は良かったと思います。JavaScriptだとAbortControllerがCancellationTokenのような機能を果たしますが、これを使っていくのが一般的という雰囲気でもないので、キャンセルに対する統一的なやり方が作れてない感じがあるので。&lt;/p&gt;
&lt;h2&gt;CPU資源の有効活用とスケジューラー&lt;/h2&gt;
&lt;p&gt;まず、非同期とCPU使って並列処理だー、みたいなのは被るけど被らないんですね。そして、CPUをぶん回さない非同期に価値はないかというと、んなわきゃぁないんですね。まずI/Oの非同期について考えるのが大事で、JavaScriptがシングルスレッドだから全然使えないかと言ったらんなわきゃあねえだろ、であり(Node.jsで見事実証されてます)、Redisがアーキテクチャとしてシングルスレッドを選択しても価値ある性能を出せることを証明してます。&lt;/p&gt;
&lt;p&gt;その上で使える資源は色々使えたほうがいいよーということであり、C#のasync/awaitの場合はTaskが、というかawaitからawaitの間が実行単位になってきます。Unityの場合はawaitの最中にゲームエンジン(C++)に処理を渡して、エンジンが処理結果をメインスレッドに戻してきたのをC#がawaitで受け取る流れになってます。エンジン側に処理をぶん投げまくってC#側のメインスレッドを空けるのが現状のUnityにおける非同期というかasync/awaitというわけですね（この辺はJavaScriptに非常に似ています）。&lt;/p&gt;
&lt;p&gt;.NET の場合はasyncメソッドは最終的にどこかの非同期I/Oに叩き込まれて、awaitで戻ってくるときにスレッドプールを使います。async/awaitが言語に実装されて以降、C#はスレッドプールをめちゃくちゃ使うようになりました、というかawaitするとスレッドプールに行くので、本質的にもはやプログラムは全てスレッドプール上で動いているといっても過言ではない。のです。全てがGoルーチンみたいな世界観と同じです（言い過ぎ）。というわけで、スレッドプールのスケジューラーへの改善の投資は続いて、もちろんワークスティーリングもしますし、ただのスレッドのプール、ではない賢い動作をする、.NETの非同期処理の心臓部となっています。&lt;/p&gt;
&lt;p&gt;.NET 6ではこのスレッドプールはPure C#実装になります。というのもC#が動くランタイムも複数あって（.NET Coreであったりmonoであったり）、それぞれが個別のネイティブ実装だと、一つのランタイムがアルゴリズム改善しても、他のランタイムに反映されなくなってしまうなどなど。.NET Core以降、C#上で低レベルなコードが書けるようになったこととランタイムの実行速度の改善が続いていることもあり、.NET 6においてはネイティブ実装→Pure C#実装への切り替えはパフォーマンス的な向上にも繋がったそうです。&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;C#のasync/awaitが登場したのは2012年、preview辺りの頃から考えるともう10年前！実用言語での大規模投入は間違いなく初めてで、最初の実装(C# 5.0)が現在から見て良かったかというと、まずかった部分も少なからずあります。しかしまぁ、6.0, 7.0, 8.0と改良を進めて来た現在のC#のasync/awaitは別に他と比べて劣っているとは思えません。8.0 のasync streamsやAsync LINQは&lt;a href="https://github.com/apple/swift-evolution/blob/main/proposals/0298-asyncsequence.md"&gt;Swiftのasync seqeunceのproposal(つまりまだ先)&lt;/a&gt;みたいなところもありますし。&lt;/p&gt;
&lt;p&gt;Unity上でUniTaskみたいな独自非同期ランタイムを作るのも、別にC#で無理してやってるというわけでもなく、自分の中では自然なことです。現実にモバイルゲームを開発していこうというところで、まず動かせない要素を決める、つまりUnityというのは不動な要素。そしてそこに乗ってるC#も外れない言語。その中で、現在可能な技術(C# 8.0)の範囲で、最高の結果を引き出すための手法を選んで、手を動かす。&lt;/p&gt;
&lt;p&gt;こないだ私の会社で出してるOSSの紹介をしたのですが、非現実的な理想ではなくて、今表現できる最高のものを生み出していく。というのをモットーにしてます。エンジニアなら評論家にならず手を動かして結果で示せ、ということですね。&lt;/p&gt;
&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/abifk9UuCO8pDc" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt; &lt;/iframe&gt; &lt;div style="margin-bottom:5px"&gt; &lt;strong&gt; &lt;a href="//www.slideshare.net/neuecc/a-quick-tour-of-the-cysharp-oss" title="A quick tour of the Cysharp OSS" target="_blank"&gt;A quick tour of the Cysharp OSS&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href="https://www.slideshare.net/neuecc" target="_blank"&gt;Yoshifumi Kawai&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;
&lt;p&gt;というわけでまぁUniTask v2.2.0もいい感じになっていると思うので、ぜひぜひ使っていただければです！&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Fri, 26 Feb 2021 00:00:00 +0900</pubDate>
      <a10:updated>2021-02-26T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2020/12/30_598.html</guid>
      <link>https://neue.cc/2020/12/30_598.html</link>
      <title>2020年を振り返る</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2020/12/30_598.html"&gt;2020年を振り返る&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2020-12-30&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;今年は前半が絶好調で、&lt;a href="http://neue.cc/2020/01/09_588.html"&gt;ConsoleAppFramework&lt;/a&gt;、&lt;a href="http://neue.cc/2020/01/30_590.html"&gt;ProcessX&lt;/a&gt;、&lt;a href="https://tech.cygames.co.jp/archives/3383/"&gt;ZString&lt;/a&gt;、&lt;a href="https://tech.cygames.co.jp/archives/3401/"&gt;ZLogger&lt;/a&gt;、そして&lt;a href="https://tech.cygames.co.jp/archives/3417/"&gt;UniTask v2&lt;/a&gt;と、凄い勢いでプログラミング的なクリエイティビティを発揮できていました。なので今年トータルとしてみれば良かったと言えます。&lt;/p&gt;
&lt;p&gt;が、後半が絶不調で無。とにかく無。なんでこんな無になったのか分からないほどに無。コロナか、コロナが悪いんか。それも実際あるんですが、いや、というかそれが全てかなー。リモートワーク向いてないんすよー、みたいな。リモート前半で魂の貯金を使い切った。無が加速してからヤバいと思って自主リモート返納（自分だけオフィスワーク）に戻したんですが、それでもなんか違うんですよねえ。まぁ、言い訳なんですけどね！新環境に適応できない旧世代民には死あるのみ、って感じなので、来年は脳みそ入れ替えてやってきたいと思います。&lt;/p&gt;
&lt;p&gt;この12月は、書く予定だったアドベントカレンダーも書けずにフィニッシュと最悪な感じですからねえ、終わりが全くしまらなかった結果、今年の印象としてはあんま良くない。でも客観的に一年通しで見たら、中々の成果を上げたとは言えます。&lt;/p&gt;
&lt;p&gt;OSSがかなり出揃ったことで、&lt;a href="https://cysharp.co.jp/"&gt;Cysharp&lt;/a&gt;という会社の輪郭をはっきりさせられた年になりました。対外的には何やってる会社か分からない、まぁ実際そこは今もよくわからないと思うんですが、それでもC#の最先端を突っ走っている会社だというイメージは確固たるものになったのではないでしょうか。去年ではまだまだ足りてないと考えていたのですが、今年追加したOSS群によって、一つポジションを引き上げられたと思っています。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Cysharp/MagicOnion/"&gt;MagicOnion&lt;/a&gt;もv4になって .NET 5/Pure C# gRPC 対応を果たしましたし、今年は実際に採用しているアプリケーションがリリースされていったことで、よりCysharpの目指しているヴィジョンの現実感が出てきました。来年はそのヴィジョンをより鮮明にしていくことと、もうプラスαに仕込んでいるものがあるので、その辺の露出がうまくできるといいかなーと思ってます。&lt;/p&gt;
&lt;p&gt;私個人の能力の成長という点でも、UniTask v2を始めとしてパワーある実装をやりきったことと、そこから深く学んだこともいっぱいあるので、まだまだ行けるぞという感じです。ちゃんとね、毎年成長してますよ。はい。人間、停滞＝衰退ですから。&lt;/p&gt;
&lt;p&gt;私は出したもののウケ度に割と拘るところがあるんですが、これは自分の感覚と市場の感覚が乖離していないかを測っているという面もあります。今日が誕生日でもうN回この振り返りも書いてるわけですが、そろそろ油断すると感性が腐る頃合いなんですよね。なんかピンとのズレたことを言い始めてしまうという。端的に言えばそれが老害というわけなんですが、自分も油断するとなりかねない。という危機感がそぞろ出てくるような頃合いでして。しかもね、そういうのは自覚がないわけですよ、本人は自覚がない！本人はイケてると思っているのが余計辛い！自覚がないからこそ老害なのだ。みたいなところがある。&lt;/p&gt;
&lt;p&gt;と、いうわけで、客観的な指標が必要で、とりあえず今年はOKじゃないですかね。はい。&lt;/p&gt;
&lt;h2&gt;その他文化&lt;/h2&gt;
&lt;p&gt;今年のGame of the Yearは&lt;a href="https://bethesda.net/ja/game/doom"&gt;DOOM Eternal&lt;/a&gt;ですよね……！震えるほど面白いゲームって本当に数年単位で久々で、腐った感性を復活させてくれた神の救いですよ。というわけでマストバイ。（しかし超期待したDLCは微妙だった……）&lt;/p&gt;
&lt;p&gt;今年のベストアルバムは中村佳穂のAINOUです。&lt;a href="https://mikiki.tokyo.jp/articles/-/19940"&gt;中村佳穂『AINOU』はなぜ2018年を代表する名盤なのか?&lt;/a&gt;とかって記事出てるように全然今年のアルバムじゃないんですが、聴いたのは今年だからshoganai。名盤。&lt;/p&gt;
&lt;p&gt;読み物としては、ちょくちょく&lt;a href="https://www.shibatashoten.co.jp/magazine.php?cid=3"&gt;月刊専門料理&lt;/a&gt;を買ってて、これが面白いんですよね。料理とエンジニアリングは共通するものがあると&lt;a href="https://www.oreilly.co.jp/books/9784873117874/"&gt;Cooking for Geeks&lt;/a&gt;をはじめとしてよく言われるやつですが、それプラス経営的な話とかも中々身に沁みるものがあって良いわけです。あと、料理業界はまだまだ多分アナログなんですよね、だから紙の雑誌にも相応の密度がある。その点エンジニアの場合はウェブ媒体のほうが紙より良い状態なので、雑誌が面白くないんですよね（Web+DBとかもはやつまらんでしょ）。良くも悪くもですが、まぁもう進んでしまった業界は紙の媒体が面白くなることはないのでしょう。&lt;/p&gt;
&lt;h2&gt;来年&lt;/h2&gt;
&lt;p&gt;アドベントカレンダーネタは書いてないしGitHub Issuesもかなり手を付けてないのが残っちゃったしで、あんまりスッキリして来年を迎えられないんですが……！そのへんはなるはやですっきりさせたいとして、今年はCysharpの仕込みフェーズがとてもうまくいった。実際うまくいった。そして仕込みフェーズは終了。つまり来年はどーんといきましょう。というわけで、ぜひぜひ大躍進にご期待くださいな。&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Wed, 30 Dec 2020 00:00:00 +0900</pubDate>
      <a10:updated>2020-12-30T00:00:00+09:00</a10:updated>
    </item>
  </channel>
</rss>