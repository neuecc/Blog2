<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:a10="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>neue cc</title>
    <link>http://neue.cc/</link>
    <description>C# Technical Blog</description>
    <language>ja</language>
    <lastBuildDate>Fri, 27 Jan 2023 19:04:26 +0900</lastBuildDate>
    <item>
      <guid isPermaLink="true">https://neue.cc/2023/01/27_StructureOfArraysGenerator.html</guid>
      <link>https://neue.cc/2023/01/27_StructureOfArraysGenerator.html</link>
      <title>StructureOfArraysGenerator - C#でSoAを簡単に利用するためのSource Generator</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2023/01/27_StructureOfArraysGenerator.html"&gt;StructureOfArraysGenerator - C#でSoAを簡単に利用するためのSource Generator&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2023-01-27&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;最近はSource Generatorブームが続いていて、去年末に&lt;a href="https://neue.cc/2022/12/16_IncrementalSourceGenerator.html"&gt;2022年のC# (Incremental) Source Generator開発手法&lt;/a&gt;という記事を出しましたが、まずは今年第一弾のSource Generatorライブラリです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Cysharp/StructureOfArraysGenerator/"&gt;github.com/Cysharp/StructureOfArraysGenerator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これは何かというと、structure of arrays(SoA)を使いやすくするためのコードを生成するというものです。まずそもそもSoAですが、Wikipediaの&lt;a href="https://en.wikipedia.org/wiki/AoS_and_SoA"&gt;AoS and SoA&lt;/a&gt;という記事によるところ（日本語版はない）、CPUキャッシュを有効活用したりSIMDを適用させやすくなる構造だよ、と。通常C#の配列はstructure of arrays(SoA)になります。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/214814782-fd341e09-731a-4e2f-ba53-ef789a19160e.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;上がSoAでXYZXYZXYZXYZといったように並んでいる構造ですが、下のStructureOfArraysGeneratorで生成したAoSの配列はXXXXYYYYZZZZという並び順になります。実際にシンプルなパフォーマンステスト（Vector3[10000]に対してYの最大値を求める）によるところ&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/215027253-6f94739f-b827-46ba-a395-690d1df89d46.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;そのまま書いても2倍、SIMDで書きやすい状態なのでSIMDで処理してしまえば10倍高速化されます。というわけで、パフォーマンスが求められるシチュエーションで非常に有用です。&lt;/p&gt;
&lt;p&gt;このライブラリはZigという最近、日本でも注目されている言語（Node.jsの高速な代替として注目されている&lt;a href="https://bun.sh/"&gt;Bun&lt;/a&gt;の実装言語）のMultiArrayListにインスパイアされました。Zigの作者 Andrew Kelley氏が講演した &lt;a href="https://vimeo.com/649009599"&gt;A Practical Guide to Applying Data-Oriented Design&lt;/a&gt; という素晴らしい講演があるので是非見て欲しいのですが&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/215052372-1ab33bd2-a578-4c26-8e99-7615a49707ea.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;データ指向設計(Data-Oriented Design)はパフォーマンスを飛躍的に改善する魔法なのです。ん、それはどこかで聞いたような……？そう、&lt;a href="https://unity.com/ja/dots"&gt;UnityのDOTS&lt;/a&gt;です。Data-Oriented Technology Stackです。ECSです。……。まぁ、そんなわけで全体に導入するにはそうとうガラッと設計を変える必要があるので大変厳しくはあるのですが、講演での実例としてZig自身のコンパイラの事例が出てますが、まぁつまりは徹底的にやれば成果は出ます。&lt;/p&gt;
&lt;p&gt;しかしまぁ徹底的にやらず部分的に使っても効果があるのはUnityで Job System + Burst ぐらいでいいじゃん、という気持ちになっていることからも明らかです。というわけで部分的なSoA構造の導入にお使いください、かつ、導入や利用の敷居は全然高くないように設計しました。&lt;/p&gt;
&lt;h2&gt;MultiArray&lt;/h2&gt;
&lt;p&gt;NuGetからインストール（Unityの場合はgit参照か.unitypackageで）するとAnalyzerとして参照されます。StructureOfArraysGeneratorは属性も含めて依存はなく全てのコードが生成コードに含まれる（属性はinternal attributeとして吐かれる）ので、不要なライブラリ依存が増えることはありません。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[MultiArray(Type)]&lt;/code&gt;を配列的に使いたい&lt;code&gt;readonly partial struct&lt;/code&gt;につけます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using StructureOfArraysGenerator;

[MultiArray(typeof(Vector3))]
public readonly partial struct Vector3MultiArray
{
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;するとSource Generatorは内部的にはこういうコードを生成します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;partial struct Vector3MultiArray
{
    // constructor
    public Vector3MultiArray(int length)

    // Span&amp;lt;T&amp;gt; properties for Vector3 each fields
    public Span&amp;lt;float&amp;gt; X =&amp;gt; ...;
    public Span&amp;lt;float&amp;gt; Y =&amp;gt; ...;
    public Span&amp;lt;float&amp;gt; Z =&amp;gt; ...;

    // indexer
    public Vector3 this[int index] { get{} set{} }

    // foreach
    public Enumerator GetEnumerator()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Structure of &lt;strong&gt;Arrays&lt;/strong&gt; と言ってますが、StructureOfArraysGeneratorは Arrays は生成しません。内部的には単一の &lt;code&gt;byte[]&lt;/code&gt; と各開始地点のオフセットのみを持っていて、生成されるプロパティによって&lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt;のビューを返すという設計になっています。&lt;/p&gt;
&lt;p&gt;使い方的には配列のように使えますが、&lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt;の操作、例えばref var item inによるforeachを使うと、より効率的に扱えます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var array = new Vector3MultiArray(4);

array.X[0] = 10;
array[1] = new Vector3(1.1f, 2.2f, 3.3f);

// multiply Y
foreach (ref var item in v.Y)
{
    item *= 2;
}

// iterate Vector3
foreach (var item in array)
{
    Console.WriteLine($&amp;quot;{item.X}, {item.Y}, {item.Z}&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yに2倍を掛ける処理などは、メモリ領域が連続していることにより、&lt;code&gt;Vector3[]&lt;/code&gt;を &lt;code&gt;item.Y *= 2&lt;/code&gt; などとして書くよりも高速に処理されます．&lt;/p&gt;
&lt;p&gt;他に&lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt;のようにAddできる&lt;code&gt;MultiArrayList&lt;/code&gt;や、内部的には&lt;code&gt;byte[]&lt;/code&gt;を持っているだけであることを生かした&lt;a href="https://github.com/Cysharp/MemoryPack"&gt;MemoryPack&lt;/a&gt;での超高速なシリアライズなどにも対応しています。気になったら是非ReadMeのほうを見てください。&lt;/p&gt;
&lt;h2&gt;.NET 7 時代のSIMD&lt;/h2&gt;
&lt;p&gt;.NETはSIMD対応が進んでいて、&lt;a href="https://learn.microsoft.com/ja-jp/dotnet/api/system.runtime.intrinsics.x86"&gt;System.Runtime.Intrinsics.X86&lt;/a&gt;によって、直接ハードウェア命令を書くことが出来ます。&lt;/p&gt;
&lt;p&gt;しかし、しかしですね、最近は .NET を Arm で動かすことが現実的になってきました。iOSやAndroidでけはなくMacのArm化、そしてAWS GravitonのようなArmサーバーはコスト面でも有利で、選択肢に十分入ります。そこでAvx.Addなんて書いていたらArmで動きません。勿論 &lt;a href="https://learn.microsoft.com/ja-jp/dotnet/api/system.runtime.intrinsics.arm"&gt;System.Runtime.Intrinsics.Arm&lt;/a&gt; というクラスも公開されていて、Arm版のSIMDを手書きすることもできるんですが、分岐して似たようなものを二個書けというのか！という話です。&lt;/p&gt;
&lt;p&gt;そこで、 &lt;a href="https://zenn.dev/pcysl5edgo/articles/d3e787599c5c8b"&gt;.NET 7こそがC# SIMDプログラミングを始めるのに最適である理由&lt;/a&gt; という記事があるのですが、確かに .NET 7 から追加された &lt;a href="https://learn.microsoft.com/en-us/dotnet/api/system.runtime.intrinsics.vector256.loadunsafe"&gt;Vector256.LoadUnsafe&lt;/a&gt; がまずめちゃくくちゃイイ！馴染みが深い（？）Unsafeによる ref var T で書けます！そして&lt;a href="https://github.com/dotnet/runtime/issues/49397"&gt;Expose cross-platform helpers for Vector64, Vector128, and Vector256&lt;/a&gt;により、&lt;code&gt;Vector64/128/256&amp;lt;T&amp;gt;&lt;/code&gt;にプラットフォーム抽象化されたSIMD処理が書けるようになりました、やはり .NET 7から。&lt;/p&gt;
&lt;p&gt;例えば .NET 7 でint[]のSumのSIMD化を書いてみます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var array = Enumerable.Range(1, 100).ToArray();

ref var begin = ref MemoryMarshal.GetArrayDataReference(array);
ref var last = ref Unsafe.Add(ref begin, array.Length);

var vectorSum = Vector256&amp;lt;int&amp;gt;.Zero;
ref var current = ref begin;

// Vector256で処理できるだけ処理
ref var to = ref Unsafe.Add(ref begin, array.Length - Vector256&amp;lt;int&amp;gt;.Count);
while (Unsafe.IsAddressLessThan(ref current, ref to))
{
    // 直接足し算できて便利
    vectorSum += Vector256.LoadUnsafe(ref current);
    current = ref Unsafe.Add(ref current, Vector256&amp;lt;int&amp;gt;.Count);
}

// Vector256をintに戻す
 var sum = Vector256.Sum(vectorSum);

// 残りの分は単純処理
while (Unsafe.IsAddressLessThan(ref current, ref last))
{
    sum += current;
    current = ref Unsafe.Add(ref current, 1);
}

Console.WriteLine(sum); // 5050
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;まぁforがwhileのアドレス処理になっていたり、最後にはみ出た分を処理する必要がありますが、かなり自然にSIMDを扱えているといってもいいんじゃないでしょうか。(Unsafeに慣れていれば)かなり書きやすいです。いいね。&lt;/p&gt;
&lt;p&gt;というわけで、.NET 7 からは手書きX86 SIMDはArm対応が漏れやすいので、極力Vectorによって抽象化されたコードで書きましょう、ということになります。どうしてもVectorじゃ書けないところだけ、仕方なく書くという感じですね。&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;反響全然ないだろうなあと想定していましたが、やはり反響全然ないです！まぁでも結構面白いライブラリになったと思うので、是非使ってください。それと、Incremental Source Generatorの作り方がMemoryPackの頃よりも習熟していて、コードがかなり洗練されたものになっているので、Source Generatorの作り方として参照するならMemoryPackのコードよりもこちらのコードのほうがお薦めです。&lt;/p&gt;
&lt;p&gt;というわけで、まだまだSource Generatorネタはいっぱいあるので、今年は大量に量産します！&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Fri, 27 Jan 2023 00:00:00 +0900</pubDate>
      <a10:updated>2023-01-27T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2022/12/30_year.html</guid>
      <link>https://neue.cc/2022/12/30_year.html</link>
      <title>2022年を振り返る</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2022/12/30_year.html"&gt;2022年を振り返る&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2022-12-30&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;今年はCysharpとしては、（控えめながら）露出があったので、何やってるかわからない、むしろ存在してるんですか？といったところから脱却したのではないでしょうか……？相変わらず&lt;a href="https://cysharp.co.jp/"&gt;ホームページはペライチ&lt;/a&gt;ですけれど。そろそろいい加減、更新したい。&lt;/p&gt;
&lt;p&gt;大きなところでは &lt;a href="https://neue.cc/2022/04/"&gt;プリコネ！グランドマスターズのサーバー開発をCysharpが開発協力しました&lt;/a&gt; というわけで、結構長くCygamesと一緒に作っていたゲームがリリースされました。超期間限定だったのでもうプレイできませんが……！技術的な詳細はCygamesのほうから &lt;a href="https://cedil.cesa.or.jp/cedil_sessions/view/2637"&gt;C#によるクライアント/サーバーの開発言語統一がもたらす高効率な開発体制 ～プリコネ！グランドマスターズ開発事例～&lt;/a&gt; という形でCEDECで講演していますが、2022年現在の開発体制としてはかなり先端を走っている、かつ、とてもいい感じに仕上がっています。&lt;/p&gt;
&lt;p&gt;MagicOnion採用タイトルも増えていて、特に今年リリースされたタイトルで一番大きなものは&lt;a href="https://mememori-game.com/"&gt;メメントモリ&lt;/a&gt;でしょうか、&lt;a href="https://twitter.com/neuecc/status/1595729906528587781"&gt;MagicOnion, MessagePack for C#を採用していただいています&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Cysharp/MagicOnion/"&gt;MagicOnion&lt;/a&gt;は12/28にv5をリリースしたばかりです！内部アーキテクチャの変更によるパフォーマンス向上や拡張性の確保、そして&lt;a href="https://github.com/Cysharp/MemoryPack"&gt;MemoryPack&lt;/a&gt;への対応といった、次世代に向けて大きく基盤整理されました。今後もSource Generatorフル対応などが控えています。&lt;/p&gt;
&lt;p&gt;OSS関連も、振り返るとかなり充実していました。後半、既存OSSのメンテが滞り気味だったのは来年消化します……！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://neue.cc/2022/02/28_DFrame.html"&gt;DFrame - C#でテストシナリオを書く分散負荷テストフレームワーク&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://neue.cc/2022/05/11_AlterNats.html"&gt;AlterNats - ハイパフォーマンスな.NET PubSubクライアントと、その実装に見る.NET 6時代のSocketプログラミング最適化のTips、或いはMagicOnionを絡めたメタバース構築のアーキテクチャについて&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://neue.cc/2022/11/04_memorypack.html"&gt;MemoryPackにみる .NET 7/C# 11世代のシリアライザー最適化技法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今年も自分のプログラミング能力の成長を実感できています。技術的に腐り始めたら一瞬！みたいな危機感はあるので、こうして毎年の成長を、ちゃんと対外的にも示し続けられているのはいいことかな。自分はできてると思ってるけど外から見るとやべぇ、みたいなパターンは往々にありますからね、常に実証と共にありたいです。&lt;/p&gt;
&lt;p&gt;特にMemoryPackは次世代の基準を打ち立てられたのではないかと思います。GitHub Starも3ヶ月で1300到達、非常に良い感じです。作ってる最中は、私が今これをやりきらなきゃC#は10年遅れてしまうんだ、みたいな気持ちでヒィヒィいいながら書いてましたが、大言壮語な妄想ではなく実際いい感じのものを出せたのではないでしょうか。&lt;/p&gt;
&lt;p&gt;Source Generatorの解説を &lt;a href="https://neue.cc/2022/12/16_IncrementalSourceGenerator.html"&gt;2022年のC# (Incremental) Source Generator開発手法&lt;/a&gt; として書きましたが、改めてC#にとってSource Generatorはめちゃくちゃ重要なテクノロジーになると、今更ながらに理解しました。いや、2020年の終わりに &lt;a href="https://neue.cc/2020/12/15_597.html"&gt;UnitGenerator&lt;/a&gt; を作ってから（これは今も使ってます）、しかしそこまで突き詰めてこなかったんですよね、今の今まで。来年はSource Generator元年ということで、色々な分野で革命的なものを大量に投下したいと思ってます。今なんかアイディアが溢れてるんですよ……！&lt;/p&gt;
&lt;p&gt;というわけで来年はいっぱいやることがある！今年に悔いが残るとすれば、Cysharpとして現在、自称革命的なサービス（？）を作ってるんですが、それの進捗があまり良くなかったことですかねえ。原因としては私がOSS関連でフラフラしててプロジェクトマネージャー/プロダクトオーナーとして1ミリも機能いてなかったせいなのですが！反省。PM的な話は昔からずっと反省し続けてるので一向に進歩してないですね……。そこに脳みそ注ぎ込む余力がないのだと言い訳してますが……。&lt;/p&gt;
&lt;p&gt;そんなわけで、来年こそは革命的サービスもリリースするので期待していてください。OSS関連も革命的なものをどかどか投下する予定なので、引き続きCysharpは時代の最先端を全力疾走していきます。&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Fri, 30 Dec 2022 00:00:00 +0900</pubDate>
      <a10:updated>2022-12-30T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2022/12/16_IncrementalSourceGenerator.html</guid>
      <link>https://neue.cc/2022/12/16_IncrementalSourceGenerator.html</link>
      <title>2022年のC# (Incremental) Source Generator開発手法</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2022/12/16_IncrementalSourceGenerator.html"&gt;2022年のC# (Incremental) Source Generator開発手法&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2022-12-16&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;このブログでもSource GeneratorやAnalyzerの開発手法に関しては定期的に触れてきていて、新しめだと&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://neue.cc/2020/12/15_597.html"&gt;2020/12/15 - UnitGenerator - C# 9.0 SourceGeneratorによるValueObjectパターンの自動実装とSourceGenerator実装Tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://neue.cc/2021/05/08_600.html"&gt;2021/05/07 - 2021年のC# Roslyn Analyzerの開発手法、或いはUnityでの利用法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;という記事を出していますが、今回 &lt;a href="https://github.com/Cysharp/MemoryPack/"&gt;MemoryPack&lt;/a&gt; の実装で比較的大規模にSource Generatorを使ってみたことで、より実践的なノウハウが手に入りました。また、開発環境も年々良くなっていることや、Unityのサポート状況も強化されているので、状況を一通りまとめてみようと思いました。Source Generatorは非常に強力で、今後必須の開発技法になるので（少なくとも私はもうIL書きません！）是非、この機会に手を出して頂ければです。&lt;/p&gt;
&lt;h2&gt;Microsoft.CodeAnalysis.CSharpのバージョン問題&lt;/h2&gt;
&lt;p&gt;Source Generatorを作成するには &lt;a href="https://www.nuget.org/packages/Microsoft.CodeAnalysis.CSharp/"&gt;Microsoft.CodeAnalysis.CSharp&lt;/a&gt;を参照したライブラリを作ればいい、のですが、ここで大事なのはバージョンです。何も考えずに最新を入れると動かないという罠が待ってます。Source Generatorは、インストールされている .NET のバージョンや IDEのコンパイラバージョンと深く紐づいています。.NETのバージョンだけ上げてもダメで、特にVisual Studioの場合は.NETのバージョンと独立して、同梱されているコンパイラのバージョンがあり、それと合わせる必要があります。Unityの場合も同じく、Unityに含まれるC#コンパイラのバージョン(/Editor/Data/DotNetSdkRoslyn/Microsoft.CodeAnalysis.CSharp.dll)を精査する必要があります。使わているバージョンよりも高いバージョンのものを参照すると、動かないという理屈です。&lt;/p&gt;
&lt;p&gt;Visual Studioのバージョンとの紐づきは &lt;a href="https://learn.microsoft.com/ja-jp/visualstudio/extensibility/roslyn-version-support"&gt;.NET コンパイラ プラットフォーム パッケージ バージョン リファレンス&lt;/a&gt;を見れば分かりますが、現状の私のオススメは &lt;code&gt;4.3.1&lt;/code&gt; です（現時点での最新は &lt;code&gt;4.4.0&lt;/code&gt; ）。これは最小サポートバージョンがVisual Studio 2022 Version 17.3ということで、VS2019は切り捨てでいいでしょう。VS2022使ってるなら、とりあえずそこまでアップデートしてくれ、ということで。古ければ古いほどカバーできる範囲が広がっていい！ようでいて、古ければ古いほど、新しい言語機能の解析ができないなどの問題があるので、お薦めはできません、むしろ何も問題がなければ新しければ新しいほどいいぐらいです。4.3.1がおすすめな最大の理由としては、&lt;code&gt;SyntaxValueProvider.ForAttributeWithMetadataName&lt;/code&gt; という、後で説明しますが、Source Generator作成の際に必須とも言える便利メソッドが追加されていることです。&lt;code&gt;4.4.0&lt;/code&gt; だとC# 11解析サポートが追加されている、はずなのですが公式ドキュメントのほうにVisual Studioとの対応関係がまだ追加されていないというのもあり手を出しにくい……。&lt;/p&gt;
&lt;p&gt;Unityの場合は公式にC#コンパイラのバージョンが何であるかのリストはないので、自分で調べていく必要がありますが、とりあえず&lt;a href="https://docs.unity3d.com/Manual/roslyn-analyzers.html"&gt;Roslyn analyzers and source generators&lt;/a&gt;という公式ドキュメントによると「must use Microsoft.CodeAnalysis 3.8」、というわけで3.8じゃないと動かないぞ、と脅しをかけてきてます。が、実際は現状のLTS環境では3.9が搭載されているようなので、3.9を使ったほうがいいでしょう。例えばUnity 2021.3は3.9が入っていて、実際ちゃんと3.9でも動きますし、APIが3.8と3.9でかなり変わっているので、3.9で作ったほうが楽です。ドキュメントは更新が遅れて最新の話が反映されていない場合が往々にあるので、正しい現状把握は重要ですね。&lt;/p&gt;
&lt;p&gt;Microsoft.CodeAnalysis.CSharpのバージョンは大きく分けて 3.* と 4.* があり、3.* はv1の &lt;code&gt;ISourceGenerator&lt;/code&gt;、4.* はv2である &lt;code&gt;IIncrementalGenerator&lt;/code&gt; が使えます。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/dotnet/roslyn/blob/main/docs/features/incremental-generators.md"&gt;Incremental Generators&lt;/a&gt;は、性能面で大きく改善されている他、作りやすさも大きく上がっているため、現状は Incremental Generators で作ることを最優先で考えたほうがいいでしょう。登場の黎明期では、IDEのバージョン問題があったために、3.* と 4.* の両方のSource Generatorを作って一緒にNuGetパッケージングする、という（かなりややこしい）手法が取られたこともありましたが、もう .NET 7も登場した2022年、も終わろうとしている現在ですので、 3.* は切り捨ててしまってもいいと考えています。&lt;/p&gt;
&lt;p&gt;ただしUnityは除く。調べたところUnityでは Unity 2022.2, Unity 2023.1 から、4.1.0のコンパイラが搭載されているようなので、そこを最小ターゲットにすればIncremental Generatorを動かすこともできなくはないのですが、さすがに攻めすぎなので、Unityをターゲットにする場合のみ 3.* で生成したものを配布する、といった形がいいのではないかと思っています。 3.* と 4.* 版の両方を作るという手間はありますが、NuGetパッケージングのややこしさには手を出さなくてもいい。ぐらいが現状の落としどころじゃないでしょうか。&lt;/p&gt;
&lt;h2&gt;最小プロジェクトとデバッグ実行&lt;/h2&gt;
&lt;p&gt;Source Generator開発は、デバッグ環境をきっちり構築できていないとかなり大変です。なので環境構築をしっかりやってから挑みましょう。ここではWindowsのVisual Studio 2022を使った場合の説明のみしますが、他の環境でも、同等のことができるようにしておかないとめちゃくちゃ大変です。&lt;/p&gt;
&lt;p&gt;まず「.NET Compiler Platform SDK」を入れましょう。標準では入ってないので。入れておかなくても開発はできるのですが、デバッグ起動ができなくなるため、ほぼ必須と思ってください。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/207808216-9b65a422-5cd5-4a74-99a8-8635c65437c6.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;次に、「netstandard2.0」のクラスライブラリプロジェクトを作成します。え、2022年にもなってnetstandard2.0なの？なんで？standard2.1やnet7じゃダメなの？という感じですが、そもそもVisual Studioが .NET Frameworkで動いているというしょっぱい事情があり、Source Generatorプロジェクトはnetstandard2.0で作る必要があるという制限があります。使えるクラスライブラリが少なくて辛い感もありますが我慢です。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;

	&amp;lt;PropertyGroup&amp;gt;
		&amp;lt;TargetFramework&amp;gt;netstandard2.0&amp;lt;/TargetFramework&amp;gt;
		&amp;lt;ImplicitUsings&amp;gt;enable&amp;lt;/ImplicitUsings&amp;gt;
		&amp;lt;Nullable&amp;gt;enable&amp;lt;/Nullable&amp;gt;

		&amp;lt;!-- LangVersionは明示的に書いておこう --&amp;gt;
		&amp;lt;LangVersion&amp;gt;11&amp;lt;/LangVersion&amp;gt;
		&amp;lt;!-- Analyzer(Source Generator)ですという設定 --&amp;gt;
		&amp;lt;IsRoslynComponent&amp;gt;true&amp;lt;/IsRoslynComponent&amp;gt;
		&amp;lt;AnalyzerLanguage&amp;gt;cs&amp;lt;/AnalyzerLanguage&amp;gt;
	&amp;lt;/PropertyGroup&amp;gt;

	&amp;lt;ItemGroup&amp;gt;
		&amp;lt;PackageReference Include=&amp;quot;Microsoft.CodeAnalysis.CSharp&amp;quot; Version=&amp;quot;4.3.1&amp;quot; /&amp;gt;
	&amp;lt;/ItemGroup&amp;gt;

&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using Microsoft.CodeAnalysis;

namespace SourceGeneratorSample;

[Generator(LanguageNames.CSharp)]
public partial class SampleGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // Providerシリーズ
        // context.AdditionalTextsProvider
        // context.AnalyzerConfigOptionsProvider
        // context.CompilationProvider
        // context.MetadataReferencesProvider
        // context.ParseOptionsProvider
        // context.SyntaxProvider

        // Registerシリーズ
        // context.RegisterImplementationSourceOutput
        // context.RegisterPostInitializationOutput
        // context.RegisterSourceOutput
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これで無のSource Generatorができたので（contextの解説は準備が一通り終わったらします）、次に、このGeneratorを参照するConsoleAppを適当に作成します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;

	&amp;lt;PropertyGroup&amp;gt;
		&amp;lt;OutputType&amp;gt;Exe&amp;lt;/OutputType&amp;gt;
		&amp;lt;TargetFramework&amp;gt;net7.0&amp;lt;/TargetFramework&amp;gt;
		&amp;lt;ImplicitUsings&amp;gt;enable&amp;lt;/ImplicitUsings&amp;gt;
		&amp;lt;Nullable&amp;gt;enable&amp;lt;/Nullable&amp;gt;
	&amp;lt;/PropertyGroup&amp;gt;

	&amp;lt;ItemGroup&amp;gt;
		&amp;lt;ProjectReference Include=&amp;quot;..\SourceGeneratorSample\SourceGeneratorSample.csproj&amp;quot;&amp;gt;
			&amp;lt;OutputItemType&amp;gt;Analyzer&amp;lt;/OutputItemType&amp;gt;
			&amp;lt;ReferenceOutputAssembly&amp;gt;false&amp;lt;/ReferenceOutputAssembly&amp;gt;
		&amp;lt;/ProjectReference&amp;gt;
	&amp;lt;/ItemGroup&amp;gt;

&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Source Generatorのプロジェクト参照では、OutputItemTypeとReferenceOutputAssemblyの設定を追加で手書きしてください。&lt;/p&gt;
&lt;p&gt;次にまたSource Generator側のプロジェクトに戻って、プロジェクトのプロパティから「デバッグ起動プロファイルUIを開く」を選んでください。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/208009373-a5f32edb-998b-4fde-844b-f67b52da8747.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;既にあるプロファイルは削除した上で、左上の「新しいプロファイルの作成」から「Roslyn Component」を選択。ここでRoslyn Componentが出てこない場合は、「.NET Compiler Platform SDK」を入れているかどうかの確認と、csprojに&lt;code&gt;&amp;lt;IsRoslynComponent&amp;gt;true&amp;lt;/IsRoslynComponent&amp;gt;&lt;/code&gt;を追加しているかどうかの確認をしてください。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/208009505-a6e86403-c42c-4f0b-bf53-97c5e42d367d.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;そしてTarget Projectに、先ほど作成したSource Generatorを参照しているコンソールアプリプロジェクトを選びます。プロジェクトが選べない場合は、対象プロジェクトがSource GeneratorをAnalyzerとしてのプロジェクト参照をしているかどうかを確認してください。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/208009562-74d267c6-584e-43fd-93a5-c180b1c4de1e.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;これで準備が完了で、Source Generatorをデバッグ実行(F5)すると、対象コンソールアプリプロジェクトを引っ掛けた状態で起動するようになります。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/208011024-62d3cae7-08f7-45d3-b910-312b3137d663.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;あとは、ひたすら、Generatorのコードを書いていくだけです、めでたし。&lt;/p&gt;
&lt;h2&gt;ForAttributeWithMetadataName&lt;/h2&gt;
&lt;p&gt;細かい説明に行く前に、基本的な流れの説明を。Source Generatorは、通常、なにか適当な属性がついているpartial classやpartial methodを探して、それに対して追加のpartial class/methodを生成する、という流れになります。原理的には属性がついていなくてもいいですが、勝手に何かを生成されるとわけわかんなくて困るので、ユーザーに明示的に生成を指示させるような流れにすべき、ということで、起点は属性付与だけと考えていいでしょう。&lt;/p&gt;
&lt;p&gt;そんなわけでSource Generatorでまずやることは、属性が付与されてるclass/methodを探し出すことなのですが、Roslyn 4.3.1からは &lt;code&gt;SyntaxValueProvider.ForAttributeWithMetadataName&lt;/code&gt; というメソッドで一発で探し出すことができるようになりました。&lt;/p&gt;
&lt;p&gt;というわけで、小さなサンプル用ジェネレーターとして、classのToStringをrecordのように自動実装するジェネレーターを作ってみます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace SourceGeneratorSample;

[Generator(LanguageNames.CSharp)]
public partial class SampleGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // PostInitializationOutputでSource Generatorでしか使わない属性を出力
        context.RegisterPostInitializationOutput(static context =&amp;gt;
        {
            // C# 11のRaw String Literal便利
            context.AddSource(&amp;quot;SampleGeneratorAttribute.cs&amp;quot;, &amp;quot;&amp;quot;&amp;quot;
namespace SourceGeneratorSample;

using System;

[AttributeUsage(AttributeTargets.Class, AllowMultiple = false, Inherited = false)]
internal sealed class GenerateToStringAttribute : Attribute
{
}
&amp;quot;&amp;quot;&amp;quot;);
        });

        var source = context.SyntaxProvider.ForAttributeWithMetadataName(
            &amp;quot;SourceGeneratorSample.GenerateToStringAttribute&amp;quot;, // 引っ掛ける属性のフルネーム
            static (node, token) =&amp;gt; true, // predicate, 属性で既に絞れてるので特別何かやりたいことがなければ基本true
            static (context, token) =&amp;gt; context); // GeneratorAttributeSyntaxContextにはNode, SemanticModel(Compilation), Symbolが入ってて便利

        // 出力コード部分はちょっとごちゃつくので別メソッドに隔離
        context.RegisterSourceOutput(source, Emit);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Initializeメソッドの行数の短さ！というわけで、Source Generator作り自体はかなり簡単になりました。ここまでがSourceGeneratorとして属性を引っ掛けて何かするための準備部分の全てであり、過去の諸々に比べると明らかに改善されています。&lt;/p&gt;
&lt;p&gt;ただし、そうして抽出したところを加工して何かする部分は特に変わりないので、気合で頑張っていきましょう。↑のコードの続きは以下のものになります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;    static void Emit(SourceProductionContext context, GeneratorAttributeSyntaxContext source)
    {
        // classで引っ掛けてるのでTypeSymbol/Syntaxとして使えるように。
        // SemaintiModelが欲しい場合は source.SemanticModel
        // Compilationが欲しい場合は source.SemanticModel.Compilation から
        var typeSymbol = (INamedTypeSymbol)source.TargetSymbol;
        var typeNode = (TypeDeclarationSyntax)source.TargetNode;

        // ToStringがoverride済みならエラー出す
        if (typeSymbol.GetMembers(&amp;quot;ToString&amp;quot;).Length != 0)
        {
            context.ReportDiagnostic(Diagnostic.Create(DiagnosticDescriptors.ExistsOverrideToString, typeNode.Identifier.GetLocation(), typeSymbol.Name));
            return;
        }

        // グローバルネームスペース対応漏れするとたまによく泣くので気をつける
        var ns = typeSymbol.ContainingNamespace.IsGlobalNamespace
            ? &amp;quot;&amp;quot;
            : $&amp;quot;namespace {typeSymbol.ContainingNamespace};&amp;quot;;

        // 出力ファイル名として使うので雑エスケープ
        var fullType = typeSymbol.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat)
            .Replace(&amp;quot;global::&amp;quot;, &amp;quot;&amp;quot;)
            .Replace(&amp;quot;&amp;lt;&amp;quot;, &amp;quot;_&amp;quot;)
            .Replace(&amp;quot;&amp;gt;&amp;quot;, &amp;quot;_&amp;quot;);

        // Field/Propertyを抽出する
        var publicMembers = typeSymbol.GetMembers() // MethodがほしければOfType&amp;lt;IMethodSymbol&amp;gt;()などで絞る
            .Where(x =&amp;gt; x is (IFieldSymbol or IPropertySymbol)
                         and { IsStatic: false, DeclaredAccessibility: Accessibility.Public, IsImplicitlyDeclared: false, CanBeReferencedByName: true })
            .Select(x =&amp;gt; $&amp;quot;{x.Name}:{{{x.Name}}}&amp;quot;); // MyProperty:{MyProperty}

        var toString = string.Join(&amp;quot;, &amp;quot;, publicMembers);

        // C# 11のRaw String Literalを使ってText Template的な置換(便利)
        // ファイルとして書き出される時対策として &amp;lt;auto-generated/&amp;gt; を入れたり
        // nullable enableしつつ、nullable系のwarningがウザいのでdisableして回ったりなどをテンプレコードとして入れておいたりする
        var code = $$&amp;quot;&amp;quot;&amp;quot;
// &amp;lt;auto-generated/&amp;gt;
#nullable enable
#pragma warning disable CS8600
#pragma warning disable CS8601
#pragma warning disable CS8602
#pragma warning disable CS8603
#pragma warning disable CS8604

{{ns}}

partial class {{typeSymbol.Name}}
{
    public override string ToString()
    {
        return $&amp;quot;{{toString}}&amp;quot;;
    }
}
&amp;quot;&amp;quot;&amp;quot;;

        // AddSourceで出力
        context.AddSource($&amp;quot;{fullType}.SampleGenerator.g.cs&amp;quot;, code);
    }
}

// DiagnosticDescriptorは大量に作るので一覧性のためにもまとめておいたほうが良い
public static class DiagnosticDescriptors
{
    const string Category = &amp;quot;SampleGenerator&amp;quot;;

    public static readonly DiagnosticDescriptor ExistsOverrideToString = new(
        id: &amp;quot;SAMPLE001&amp;quot;,
        title: &amp;quot;ToString override&amp;quot;,
        messageFormat: &amp;quot;The GenerateToString class '{0}' has ToString override but it is not allowed.&amp;quot;,
        category: Category,
        defaultSeverity: DiagnosticSeverity.Error,
        isEnabledByDefault: true);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;作り方のポイントとしては、Source Generator(Analyzer)で使うものにはSyntaxNodeとISymbolの二系統があって、SyntaxNodeは文字列としてのソースコードの構造を指していて、ISymbolはコンパイルされた状態での型の中間状態を指します。情報を取ったりするにはISymbolのほうが圧倒的にやりやすいので、基本的にはSymbolを辿って処理していきます。SyntaxNodeは、エラーの波線表示の位置を示したりする時のみに使うという感じですね。&lt;/p&gt;
&lt;p&gt;では、これをビルドして、Visual Studioを、再起動します……！というのも、ConsoleApp1側ではSource Generatorを掴みっぱなしになってしまうので、プロジェクト参照でのSource Generatorの更新ができないからです。今回AttributeをGenerator側で追加しているので、再起動してそれの生成を含めてあげる必要があります。今後もConsoleApp1側での動作確認が必要な際は、定期的に再起動する羽目になります。ただしデバッグ起動では更新されたコードで動くので、大きな変動がなければそのまま作業を進められます。といった、IDEを再起動しなきゃいけないシチュエーションなのかしなくてもいいのか、の切り分けが求められます……。&lt;/p&gt;
&lt;p&gt;ConsoleApp1側で以下のようなテスト型を用意して&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using SourceGeneratorSample;

var mc = new MyClass() { Hoge = 10, Bar = &amp;quot;tako&amp;quot; };
Console.WriteLine(mc);

[GenerateToString]
public partial class MyClass
{
    public int Hoge { get; set; }
    public string? Bar { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Source Generator側でデバッグ実行です。いったんの出力の確認でお薦めなのは、AddSourceの直前あたりにブレークポイント貼って見ることですかね。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/208027141-ae09c996-a7a4-4780-bce0-8a9e22727a5e.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;そうして何度かデバッグ実行を繰り返して、理想となるコードが吐けるように調整していって、そして、最終的にそれで大丈夫かどうかはコンパイラ通さないとわからんので、Visual Studioを再起動してConsoleApp1側でコンパイル走らせて、みたいなことになりますね。この段階で問題が出ると、Visual Studio再起動祭りになるのでダルい！&lt;/p&gt;
&lt;p&gt;問題なく吐けていれば、ソリューションエクスプローラーで生成コードを確認することができます。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/208027544-81eb7279-aef7-48ff-8241-fa6fa2b4efa3.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;以上、基本的な流れでした！C# 11のRaw String Literalsのお陰で別途テンプレートエンジンを用いなくても、テンプレート的な処理をC#のコード中に埋め込めるようになったのが、かなり楽になりました。（ただしif や for が埋め込めるわけではないので、複雑なものを書く場合はそれなりの工夫は必要）。&lt;/p&gt;
&lt;p&gt;Source Generatorの良いところはAnalyzerも兼ねているところで、今回はToStringが既に定義されている場合はエラーにするという処理を入れているのですが&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/208030486-1baf9e07-c22e-4c40-8c0c-7b968180ee58.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;属性でどうこうする系ってどうしても今までは実行時エラーになりがちだったのですが、エディット時に間違って定義をばんばん教えてあげられるようになったのは親切度が相当上がっています。&lt;/p&gt;
&lt;h2&gt;IncrementalGeneratorInitializationContext詳解&lt;/h2&gt;
&lt;p&gt;Incremental Generatorの強みは複数のProviderを繋げてパイプラインを作れるところ、ではあるのですが、基本的なことは SyntaxProvider.ForAttributeWithMetadataName がほとんど全部やってくれるから、特に考えなくてもいいかな……。&lt;/p&gt;
&lt;p&gt;ではあるんですが、細かい処理をしたい場合にはいくつか必要になりますので、Provider見ていきましょう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AdditionalTextsProvider&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;AdditionalTextsProviderは、AdditionalFilesを読み取るのに使います。&lt;a href="https://github.com/dotnet/roslyn-analyzers/blob/main/src/Microsoft.CodeAnalysis.BannedApiAnalyzers/BannedApiAnalyzers.Help.md"&gt;BannedApiAnalyzers&lt;/a&gt;などでも活用されていますが、例えばコンフィグを渡したいケースなどに有用です。&lt;/p&gt;
&lt;p&gt;例えば &lt;code&gt;sampleGenerator.config.json&lt;/code&gt; を読み取りたい、といったケースを考えますと、ConsoleApp1側ではこういったcsprojとファイルを用意するとして&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;ItemGroup&amp;gt;
	&amp;lt;AdditionalFiles Include=&amp;quot;sampleGenerator.config.json&amp;quot; /&amp;gt;
&amp;lt;/ItemGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;AdditionalTextsProviderを使ってこんな風に読み取っていきます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var configuration = context.AdditionalTextsProvider.Select((text, token) =&amp;gt;
    {
        if (text.Path.EndsWith(&amp;quot;sampleGenerator.config.json&amp;quot;)) return text.GetText(token);
        return null;
    })
    .Where(x =&amp;gt; x != null)
    .Collect(); //雑Collect

// sampleにあったやつ
var types = context.SyntaxProvider.ForAttributeWithMetadataName(
      &amp;quot;SourceGeneratorSample.GenerateToStringAttribute&amp;quot;,
      static (node, token) =&amp;gt; true,
      static (context, token) =&amp;gt; context)
    .Collect(); //雑Collect

var source = configuration.Combine(types);  // くっつける

context.RegisterSourceOutput(source, static (context, source) =&amp;gt;
{
    var configJson = source.Left.FirstOrDefault();
    var types = source.Right;
    foreach (var type in types)
    {
        // よしなに処理
    }
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;なるほどコードが増えた？&lt;/p&gt;
&lt;p&gt;まず、Providerが触った直後のやつは &lt;code&gt;IncrementalValuesProvider&amp;lt;T&amp;gt;&lt;/code&gt; になります。そしてCollectすると &lt;code&gt;IncrementalValueProvider&amp;lt;ImmutableArray&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; になります。違いはImmutableArray、ではなくて、 ValueProvider と ValuesProvider のほうです。ValueProviderの状態だと(IObservableみたいに)複数値が流れてくるのですが、ValuesProviderの状態だと、ImmutableArrayとして一塊になったものが一発流れてきます。&lt;/p&gt;
&lt;p&gt;で、複数ProviderをCombineで繋いで、RegsiterSourceOutputに流し込むという流れになるわけですが、ValueとValuesが混在してるとCombineの型合わせがめちゃくちゃ大変です……！なんかよくわからんがCombineできない！の原因は型が合わないせいなのですね。というわけで雑にCollectしておくと合わせやすくなるので良いです。&lt;/p&gt;
&lt;p&gt;というわけで、こんな感じで次のProvider行きましょう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AnalyzerConfigOptionsProvider&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;GlobalOptionsと、AdditionalTextやSyntaxTreeに紐付けられたオプションを引っ張るGetOptionsがあります。例えばMemoryPackではcsprojのオプションから取り出すために使いました。&lt;/p&gt;
&lt;p&gt;こういう記述をして&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;ItemGroup&amp;gt;
    &amp;lt;CompilerVisibleProperty Include=&amp;quot;MemoryPackGenerator_SerializationInfoOutputDirectory&amp;quot; /&amp;gt;
&amp;lt;/ItemGroup&amp;gt;
&amp;lt;PropertyGroup&amp;gt;
    &amp;lt;MemoryPackGenerator_SerializationInfoOutputDirectory&amp;gt;$(MSBuildProjectDirectory)\MemoryPackLogs&amp;lt;/MemoryPackGenerator_SerializationInfoOutputDirectory&amp;gt;
&amp;lt;/PropertyGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;こんな風に取り出すことができる( &lt;code&gt;build_property.&lt;/code&gt; が接頭辞に必要)みたいな。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var outputDirProvider = context.AnalyzerConfigOptionsProvider
    .Select((configOptions, token) =&amp;gt;
    {
        if (configOptions.GlobalOptions.TryGetValue(&amp;quot;build_property.MemoryPackGenerator_SerializationInfoOutputDirectory&amp;quot;, out var path))
        {
            return path;
        }

        return (string?)null;
    });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;csproj側があんま書きやすい感じじゃないので、AdditionalFilesでjsonを渡すのとどちらがいいのか、みたいなのは考えどころですね。こちらだとcsproj内のマクロが使える（出力パスとか）のはいいところかもしれません。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CompilationProvider&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Compilationが拾える最重要Provider、のはずが &lt;code&gt;ForAttributeWithMetadataName&lt;/code&gt; がくっつけてくれるので用無し。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MetadataReferencesProvider&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;読み込んでるDLLの情報が拾えます。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/208037687-47a65304-e8d9-42cb-bdd6-f88ea622bc03.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;そんな使わないかも。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ParseOptionsProvider&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;csprojを解析した情報が取れます。例えば言語バージョンやプリプロセッサシンボルから、.NETのバージョンを取り出したりできます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var parseOptions = context.ParseOptionsProvider.Select((parseOptions, token) =&amp;gt;
{
    var csOptions = (CSharpParseOptions)parseOptions;
    var langVersion = csOptions.LanguageVersion;
    var net7 = csOptions.PreprocessorSymbolNames.Contains(&amp;quot;NET7_0_OR_GREATER&amp;quot;);
    return (langVersion, net7);
});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;つまり、言語バージョンや.NETのバージョン別の出し分けに使える、ということですね。細かくやると面倒くさいのであんまギチギチにやらないほうがいいとは思いますが、どうしてもそういう処理が必要なシチュエーションでは使えます。というか実際MemoryPackではこれで出し分けしています。scoped ref(C# 11)やfile scoped namespace(C# 10)、static abstract method(.NET 7)という切り分けですねー。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SyntaxProvider&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;ForAttributeWithMetadataName&lt;/code&gt; を叩くためのやつ。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RegisterPostInitializationOutput&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ここからはRegisterシリーズですが、PostInitializeationOutputは、Source Generatorのためのマーカーとしてしか使わない属性をinternal classとして解析走らせる前に出力しておきたい、というやつですね。&lt;a href="https://github.com/Cysharp/UnitGenerator/"&gt;UnitGenerator&lt;/a&gt;では &lt;code&gt;UnitOfAttribute&lt;/code&gt; をそういった形で吐き出しています（なので結果としてUnitGeneratorを使ったプロジェクトはUnitGeneratorへの依存DLLはなし、ということになる）。一方でMemoryPackで使ってる属性 &lt;code&gt;MemoryPackableAttribute&lt;/code&gt; は、&lt;code&gt;MemoryPack.Core.dll&lt;/code&gt;に含めているので、RegisterPostInitializationOutputは使っていません。どうせReader/Writerとかの他の依存が必要になるので、属性だけ依存なしにしてもしょーがないですからね。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RegisterSourceOutput&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Providerを繋げて、実際にSource Generateさせるやつ。大事というか必須。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;RegisterImplementationSourceOutput&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ドキュメントが一切ない上に、なんか想定通りの動きをしていないような私の想定が悪いのか、まぁよくわからないけどよくわからないのでよくわからないです。ドキュメントも無なので、とりあえず無視しておきましょう。&lt;/p&gt;
&lt;h2&gt;ユニットテスト&lt;/h2&gt;
&lt;p&gt;厳密にやるとキリがないので、そこそこゆるふわ感覚でやるようにしてます。もちろんTDDなんてしません。基本的な考え方としては、ユニットテストプロジェクトがAnalyzerとして開発中のSource Generatorプロジェクトをプロジェクト参照して、ソース生成されるようにしておいて、ユニットテストでは、その生成されたコードが期待通り動いているかのテストをする、みたいな雰囲気で良いんじゃないかと思います。生成ソースコードの中身をチェックして一致するか、みたいなのはちょっと手間が無駄にかかりすぎるので……。&lt;/p&gt;
&lt;p&gt;テストプロジェクトはxUnitと、補助ライブラリとして&lt;a href="https://fluentassertions.com/"&gt;FluentAssertion&lt;/a&gt;を好んで使っています。また、GlobalUsingにテスト系の名前空間を突っ込んでおくと気持ち楽です。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;

	&amp;lt;PropertyGroup&amp;gt;
		&amp;lt;TargetFramework&amp;gt;net7.0&amp;lt;/TargetFramework&amp;gt;
		&amp;lt;ImplicitUsings&amp;gt;enable&amp;lt;/ImplicitUsings&amp;gt;
		&amp;lt;Nullable&amp;gt;enable&amp;lt;/Nullable&amp;gt;
		&amp;lt;IsPackable&amp;gt;false&amp;lt;/IsPackable&amp;gt;
	&amp;lt;/PropertyGroup&amp;gt;

	&amp;lt;ItemGroup&amp;gt;
		&amp;lt;PackageReference Include=&amp;quot;FluentAssertions&amp;quot; Version=&amp;quot;6.7.0&amp;quot; /&amp;gt;
		&amp;lt;PackageReference Include=&amp;quot;Microsoft.CodeAnalysis.CSharp&amp;quot; Version=&amp;quot;4.4.0&amp;quot; /&amp;gt;
		&amp;lt;PackageReference Include=&amp;quot;Microsoft.NET.Test.Sdk&amp;quot; Version=&amp;quot;17.3.1&amp;quot; /&amp;gt;
		&amp;lt;PackageReference Include=&amp;quot;xunit&amp;quot; Version=&amp;quot;2.4.2&amp;quot; /&amp;gt;
		&amp;lt;PackageReference Include=&amp;quot;xunit.runner.visualstudio&amp;quot; Version=&amp;quot;2.4.5&amp;quot;&amp;gt;
			&amp;lt;IncludeAssets&amp;gt;runtime; build; native; contentfiles; analyzers; buildtransitive&amp;lt;/IncludeAssets&amp;gt;
			&amp;lt;PrivateAssets&amp;gt;all&amp;lt;/PrivateAssets&amp;gt;
		&amp;lt;/PackageReference&amp;gt;
	&amp;lt;/ItemGroup&amp;gt;

	&amp;lt;ItemGroup&amp;gt;
		&amp;lt;ProjectReference Include=&amp;quot;..\SourceGeneratorSample\SourceGeneratorSample.csproj&amp;quot;&amp;gt;
			&amp;lt;OutputItemType&amp;gt;Analyzer&amp;lt;/OutputItemType&amp;gt;
            &amp;lt;!-- ReferenceOutputAssemblyをtrueにする! --&amp;gt;
			&amp;lt;ReferenceOutputAssembly&amp;gt;true&amp;lt;/ReferenceOutputAssembly&amp;gt;
		&amp;lt;/ProjectReference&amp;gt;
	&amp;lt;/ItemGroup&amp;gt;

	&amp;lt;ItemGroup&amp;gt;
		&amp;lt;Using Include=&amp;quot;Xunit&amp;quot; /&amp;gt;
		&amp;lt;Using Include=&amp;quot;Xunit.Abstractions&amp;quot; /&amp;gt;
		&amp;lt;Using Include=&amp;quot;FluentAssertions&amp;quot; /&amp;gt;
	&amp;lt;/ItemGroup&amp;gt;

&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;後述しますが C# 11の内部コンパイルを行うために参照する Microsoft.CodeAnalysis.CSharp は 4.4.0 です。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;namespace SourceGeneratorSample.Tests;

public class ToStringTest
{
    [Fact]
    public void Basic()
    {
        var mc = new MyClass() { Hoge = 33, Huga = 99 };
        mc.ToString().Should().Be(&amp;quot;Hoge:33, Huga:99&amp;quot;);
    }
}

[GenerateToString]
public partial class MyClass
{
    public int Hoge { get; set; }
    public int Huga { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;とりあえずこれをテストすればOK、と。なんか生成結果が更新されてない気がして無限にTestがこけるんだが？という時は、例によってVisual Studio再起動です。&lt;/p&gt;
&lt;p&gt;Source Generatorのいいところとして、生成コードへのステップ実行も可能ということで、なんかよーわからん挙動だわーという時はデバッガでどんどん突っ込んでいくといいでしょう。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/208041286-54162ad8-fe1a-41d6-a1f2-37e0dd19c533.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;正常に動くケースはこれで概ねいいんですが、Analyzerとしてコンパイルエラーを出すようなケースをテストしたい場合は、もう一捻り必要です。対応としては &lt;code&gt;CSharpGeneratorDriver&lt;/code&gt; というのが標準で用意されていて、それにソースコード渡せばいい、という話なのですが、少し手間なのは、元になるCSharpCompilationを作らなければいけない、というところで。この辺もよしなに見てくれる便利ジェネレーターユニットテストヘルパーライブラリみたいなのもありますが、原理原則を知るためにも、ここは手で書いてみましょう。&lt;/p&gt;
&lt;p&gt;というわけで、こういうヘルパーを用意してみます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Diagnostics;
using System.IO;
using System.Linq;
using System.Runtime.CompilerServices;

namespace MemoryPack.Tests.Utils;

public static class CSharpGeneratorRunner
{
    static Compilation baseCompilation = default!;

    [ModuleInitializer]
    public static void InitializeCompilation()
    {
        // running .NET Core system assemblies dir path
        var baseAssemblyPath = Path.GetDirectoryName(typeof(object).Assembly.Location)!;
        var systemAssemblies = Directory.GetFiles(baseAssemblyPath)
            .Where(x =&amp;gt;
            {
                var fileName = Path.GetFileName(x);
                if (fileName.EndsWith(&amp;quot;Native.dll&amp;quot;)) return false;
                return fileName.StartsWith(&amp;quot;System&amp;quot;) || (fileName is &amp;quot;mscorlib.dll&amp;quot; or &amp;quot;netstandard.dll&amp;quot;);
            });

        var references = systemAssemblies
            // .Append(typeof(Foo).Assembly.Location) // 依存DLLがある場合はそれも追加しておく
            .Select(x =&amp;gt; MetadataReference.CreateFromFile(x))
            .ToArray();

        var compilation = CSharpCompilation.Create(&amp;quot;generatortest&amp;quot;,
            references: references,
            options: new CSharpCompilationOptions(OutputKind.DynamicallyLinkedLibrary));

        baseCompilation = compilation;
    }

    public static Diagnostic[] RunGenerator(string source, string[]? preprocessorSymbols = null, AnalyzerConfigOptionsProvider? options = null)
    {
        // NET 7 + C# 11
        if (preprocessorSymbols == null)
        {
            preprocessorSymbols = new[] { &amp;quot;NET7_0_OR_GREATER&amp;quot; };
        }
        var parseOptions = new CSharpParseOptions(LanguageVersion.CSharp11, preprocessorSymbols: preprocessorSymbols);
        var driver = CSharpGeneratorDriver.Create(new SourceGeneratorSample.SampleGenerator()).WithUpdatedParseOptions(parseOptions);
        if (options != null)
        {
            driver = (Microsoft.CodeAnalysis.CSharp.CSharpGeneratorDriver)driver.WithUpdatedAnalyzerConfigOptions(options);
        }

        var compilation = baseCompilation.AddSyntaxTrees(CSharpSyntaxTree.ParseText(source, parseOptions));

        driver.RunGeneratorsAndUpdateCompilation(compilation, out var newCompilation, out var diagnostics);

        // combine diagnostics as result.
        var compilationDiagnostics = newCompilation.GetDiagnostics();
        return diagnostics.Concat(compilationDiagnostics).ToArray();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CSharpGeneratorDriver.Create して AddSyntaxTrees して RunGeneratorsAndUpdateCompilation して diagnostics を取り出す。というだけなのですが、Compilationを作るところに癖があります、というか Compilation に渡すDLLをかき集めるのが微妙に面倒くさいです。net7の依存関係のDLLを全部持ってくる、とかが一発でできないんですね。素直に typeof().Assembly.Location だけだと全然持ってこれないため、ディレクトリから漁ってくるという処理をいれています。&lt;/p&gt;
&lt;p&gt;これを使ってテスト書くと、こんな感じでしょうか。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;    [Fact]
    public void ERROR_SAMPLE001()
    {
        // C#11のRaw String Literals本当に便利
        var result = CSharpGeneratorRunner.RunGenerator(&amp;quot;&amp;quot;&amp;quot;
using SourceGeneratorSample;

[GenerateToString]
public partial class MyClass
{
    public int Hoge { get; set; }
    public int Huga { get; set; }

    public override string ToString()
    {
        return &amp;quot;hogemoge&amp;quot;;
    }
}
&amp;quot;&amp;quot;&amp;quot;);

        result.Length.Should().Be(1);
        result[0].Id.Should().Be(&amp;quot;SAMPLE001&amp;quot;);
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;厳密にやるなら、エラーの波線をどこに敷いているかのチェックをすべし、みたいな話もあるのですが、私的にはまぁ面倒くさいのでちゃんと狙ったエラーが出せてるかどうかをDiangnositcsのIdを拾うぐらいでいいかな、みたいな感じでやってます。&lt;/p&gt;
&lt;h2&gt;NuGetパッケージング&lt;/h2&gt;
&lt;p&gt;というわけで &lt;code&gt;dotnet pack&lt;/code&gt; するわけですが、 追加でコンフィグ仕込む必要があります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;

	&amp;lt;PropertyGroup&amp;gt;
		&amp;lt;TargetFramework&amp;gt;netstandard2.0&amp;lt;/TargetFramework&amp;gt;
		&amp;lt;ImplicitUsings&amp;gt;enable&amp;lt;/ImplicitUsings&amp;gt;
		&amp;lt;Nullable&amp;gt;enable&amp;lt;/Nullable&amp;gt;
		&amp;lt;LangVersion&amp;gt;11&amp;lt;/LangVersion&amp;gt;

		&amp;lt;!-- NuGetPackのための追加をもりもり --&amp;gt;
		&amp;lt;IsRoslynComponent&amp;gt;true&amp;lt;/IsRoslynComponent&amp;gt;
		&amp;lt;AnalyzerLanguage&amp;gt;cs&amp;lt;/AnalyzerLanguage&amp;gt;
		&amp;lt;IncludeBuildOutput&amp;gt;false&amp;lt;/IncludeBuildOutput&amp;gt;
		&amp;lt;DevelopmentDependency&amp;gt;true&amp;lt;/DevelopmentDependency&amp;gt;
		&amp;lt;IncludeSymbols&amp;gt;false&amp;lt;/IncludeSymbols&amp;gt;
		&amp;lt;SuppressDependenciesWhenPacking&amp;gt;true&amp;lt;/SuppressDependenciesWhenPacking&amp;gt;
	&amp;lt;/PropertyGroup&amp;gt;

	&amp;lt;ItemGroup&amp;gt;
		&amp;lt;PackageReference Include=&amp;quot;Microsoft.CodeAnalysis.CSharp&amp;quot; Version=&amp;quot;4.3.1&amp;quot; /&amp;gt;
	&amp;lt;/ItemGroup&amp;gt;

	&amp;lt;!-- 出力先を analyzers/dotnet/cs にする --&amp;gt;
	&amp;lt;ItemGroup&amp;gt;
		&amp;lt;None Include=&amp;quot;$(OutputPath)\$(AssemblyName).dll&amp;quot; Pack=&amp;quot;true&amp;quot; PackagePath=&amp;quot;analyzers/dotnet/cs&amp;quot; Visible=&amp;quot;false&amp;quot; /&amp;gt;
	&amp;lt;/ItemGroup&amp;gt;
&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;外部依存DLLがいたりすると(例えばJSON .NET使いたいとか！)もう少し面倒くさくなるので、外部依存DLLは使わないようにしましょう！というのが第一原則になります。どうしても使いたい場合は頑張ってください。&lt;/p&gt;
&lt;h2&gt;Unity対応&lt;/h2&gt;
&lt;p&gt;まずIncremental Source Generator使えないし ForAttributeWithMetadataName も使えないしちくしょーって感じですが、とはいえそこまで差分が多いわけでもないのでやってきましょう。&lt;/p&gt;
&lt;p&gt;まず、簡易的な ForAttributeWithMetadataName っぽいものを用意します。MemoryPackでは以下のコードを使ってます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;class SyntaxContextReceiver : ISyntaxContextReceiver
{
    internal static ISyntaxContextReceiver Create()
    {
        return new SyntaxContextReceiver();
    }

    public HashSet&amp;lt;TypeDeclarationSyntax&amp;gt; ClassDeclarations { get; } = new();

    public void OnVisitSyntaxNode(GeneratorSyntaxContext context)
    {
        var node = context.Node;
        if (node is ClassDeclarationSyntax
                    or StructDeclarationSyntax
                    or RecordDeclarationSyntax
                    or InterfaceDeclarationSyntax)
        {
            var typeSyntax = (TypeDeclarationSyntax)node;
            if (typeSyntax.AttributeLists.Count &amp;gt; 0)
            {
                var attr = typeSyntax.AttributeLists.SelectMany(x =&amp;gt; x.Attributes)
                    .FirstOrDefault(x =&amp;gt;
                    {
                        var packable = x.Name.ToString() is &amp;quot;MemoryPackable&amp;quot; or &amp;quot;MemoryPackableAttribute&amp;quot; or &amp;quot;MemoryPack.MemoryPackable&amp;quot; or &amp;quot;MemoryPack.MemoryPackableAttribute&amp;quot;;
                        if (packable) return true;
                        return false;
                    });
                if (attr != null)
                {
                    ClassDeclarations.Add(typeSyntax);
                }
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ざっくりしてる感じですが、機能はするのでよしとしておきましょう。次にSourceGenerator と IncrementalGenerator を共通化するContextを用意しておきます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// share context for SourceGenerator and IncrementalGenerator
public interface IGeneratorContext
{
    CancellationToken CancellationToken { get; }
    void ReportDiagnostic(Diagnostic diagnostic);
    void AddSource(string hintName, string source);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;そして、最初のサンプルコードでいうところのEmit部分を↑のIGeneratorContextを使うようにしてファイル分離、そしてCompile Includeで.csを参照するようにします。MemoryPackでは以下のようにしています。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;ItemGroup&amp;gt;
    &amp;lt;Compile Include=&amp;quot;../MemoryPack.Generator/**/*.cs&amp;quot; Exclude=&amp;quot;**/obj/**;**/MemoryPackGenerator.cs;**/*TypeScript*.cs&amp;quot; /&amp;gt;
&amp;lt;/ItemGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;大事なのはプロジェクト分離しないこと、ですね！NuGetパッケージングのところでも書きましたがAnalyzer(Source Generator)でごちゃごちゃした依存作ると面倒臭さが跳ね上がるので、シングルアセンブリに収まるように作るべし、ということです。&lt;/p&gt;
&lt;p&gt;あとは&lt;a href="https://docs.unity3d.com/Manual/roslyn-analyzers.html"&gt;Unityのマニュアル&lt;/a&gt;通りにビルド済みdllを配置してRoslynAnalyzerとしてLabel設定したmetaを置いておけば、UPMのgit参照とかでも、特に何もせずに自動で認識されます。dllの配置場所はUnityの公式のジェネレーター(例えば com.unity.properties とか)がRuntime配下にいるので、Editorではなく、Runtime側に配置することとしています。&lt;/p&gt;
&lt;p&gt;なお、Unity用限定のSource Generatorを作る場合でも、通常の .NET のライブラリとして扱い、普通に .NET ライブラリとしての開発環境やユニットテストプロジェクトを作ったほうが良いでしょう。普通に作るにもかなり環境をしっかり作らないと大変なので、Unity限定だから！みたいな気持ちで挑むとしんどみが爆発します。&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;C#に最初にこの手の機構が登場したのは2014年、 &lt;a href="https://neue.cc/2014/11/20_485.html"&gt;VS2015のRoslynでCode Analyzerを自作する(ついでにUnityコードも解析する)&lt;/a&gt; といった記事も書いていたのですが、まぁ正直めっっっちゃくちゃ作りづらかったんですね。&lt;/p&gt;
&lt;p&gt;で、現代、この2022年のSource Generator開発はめっっっっちゃくちゃ作りやすくなってます。もちろん、Roslyn自体の知識が必要で、そしてRoslynはドキュメントが無なので、どちらかというとIntelliSenseから勘をどう働かせるかという勝負になっていて、それはそれで大変ではあるのですが、しかし本当に作りやすくなったな、と思います。もちろんそしてIL.Emitよりも遥かに作りやすいし、パフォーマンスも良い。もうEmitの時代は終わりです。もはや黒魔術を誇る時代でもないのです！動的コード生成の民主化！&lt;/p&gt;
&lt;p&gt;というわけで、どしどしコード生成していきましょう……！私も今温めてるアイディアが3つぐらいあるので、どんどんリリースしていきたいと思ってます。&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Fri, 16 Dec 2022 00:00:00 +0900</pubDate>
      <a10:updated>2022-12-16T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2022/12/08_MemoryPackSessionInDotNetConfRecapTokyo.html</guid>
      <link>https://neue.cc/2022/12/08_MemoryPackSessionInDotNetConfRecapTokyo.html</link>
      <title>C# 11 による世界最速バイナリシリアライザー「MemoryPack」の作り方</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2022/12/08_MemoryPackSessionInDotNetConfRecapTokyo.html"&gt;C# 11 による世界最速バイナリシリアライザー「MemoryPack」の作り方&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2022-12-08&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;と題して、.NET Conf 2022 Recap Event Tokyo というイベントで話してきました。&lt;/p&gt;
&lt;iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/7b71dc84ae4a4241aa241340fa890f65" title="C#11 による世界最速バイナリシリアライザー「MemoryPack」の作り方" allowfullscreen="true" mozallowfullscreen="true" webkitallowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 840px; height: 471px;" data-ratio="1.78343949044586"&gt;&lt;/iframe&gt;
&lt;p&gt;今回は久々の（数年ぶりの！）オフライン登壇イベントということで、なんだか新鮮な気分で、そして実際、オンライン登壇よりも目の前にオーディエンスがいたほうがいいなぁという思いを新たに。事前レコーディングやオンライン登壇だと、どうしてもライブ感のない、冷めた感じになっちゃうな、と。セッション単体の完成度で言ったら何度も取り直して完璧に仕上げた事前録画のほうがいい、かもしれませんが、でもそういうもんじゃあないかなあ、と。スタジオアルバムとライブアルバムみたいなもんですね。そしてスタジオアルバムに相当するのは念入りに書かれたブログ記事とかだったりするので、事前録画のセッションって、なんか中途半端に感じてしまったりはしますね。スタジオライブみたいな。あれってなんかいまいちじゃないですか、そういうことで。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Cysharp/MemoryPack"&gt;MemoryPack&lt;/a&gt;は先程 v1.9.0 をリリースしました！日刊MemoryPackか？というぐらいに更新ラッシュをしていたのですが、バグというかは機能追加をめちゃくちゃやってました。性能面で究極のシリアライザーを目指した、というのはセッションスライドのほうにも書かせてもらっていますが、機能面でも究極のシリアライザーを目指しています、ということで、めちゃくちゃやれる幅が広がってます。GitHub Star数も既に1200と、めちゃくちゃ凄い勢いで伸びているので（過去最高の勢いです）、出す前は独自フォーマットのシリアライザーだと、どのぐらいまで使ってもらえるものだろうか？と不安に思ったところもあったのですが、割と自信もって押していける感じです。実際、性能も機能も凄い。&lt;/p&gt;
&lt;h2&gt;Formatterという名前付けについて&lt;/h2&gt;
&lt;p&gt;特に誰にも聞かれていないのですが説明しておきたいのが &lt;code&gt;MemoryPackFormatter&lt;/code&gt; という名前を。Formatterって正直馴染みがないし(&lt;code&gt;BinaryFormatter&lt;/code&gt;かよ？)、 &lt;code&gt;IMemoryPackSerializer&lt;/code&gt; にしようかな、と当初は考えていたのですが最終的には(MessagePack for C#と同じの)Formatterに落ち着きました。理由は、エントリーポイントである &lt;code&gt;MemoryPackSerializer&lt;/code&gt; と紛らわしいんですよね。 &lt;code&gt;MemoryPackFormatter&lt;/code&gt;は自作でもしない限りは表に出て来ないし、上級向けのオプションなので、すっきりと名前で区別がついたほうが良いかな、という感じでつけてます。System.Text.Jsonの場合は &lt;code&gt;JsonSerializer&lt;/code&gt; と &lt;code&gt;JsonConverter&lt;/code&gt;という分類で、同じような感じです。&lt;/p&gt;
&lt;p&gt;候補になる名前としては&lt;code&gt;Serializer&lt;/code&gt;か&lt;code&gt;Formatter&lt;/code&gt;か&lt;code&gt;Converter&lt;/code&gt;か&lt;code&gt;Encoder&lt;/code&gt;か&lt;code&gt;Codec&lt;/code&gt;という感じでしょうか。単純で当たり前のチョイスのようでいて、ユーザーがなるべく悩まず直感的に理解できるように、しっかり考えて悩みながらつけてるんですよということで。それで出来上がった名前が、単純で当たり前のように思ってもらえれば正解なわけです。&lt;/p&gt;
&lt;h2&gt;イベント2&lt;/h2&gt;
&lt;p&gt;久々のオンフライン登壇！だったのですが、こういうのは始まると続くもので、今月は12/14に &lt;a href="https://bitflyer.connpass.com/event/266685/"&gt;bitFlyer.C#/Azure 01&lt;/a&gt;というイベントに、Azureじゃないほうの枠として登壇する予定です。「AlterNatsにみる .NET 7世代のハイパフォーマンスSocketプログラミング技法」という内容ですが&lt;a href="https://github.com/Cysharp/AlterNats"&gt;AlterNats&lt;/a&gt;というよりかは、最新のC#でハイパフォーマンスなSocketプログラミングをどうすればいいか、ということに重点を置いた内容になってますので、C#の最適化に興味ある方は是非是非来てください。まだ席空いてますので……！&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Thu, 08 Dec 2022 00:00:00 +0900</pubDate>
      <a10:updated>2022-12-08T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2022/11/04_memorypack.html</guid>
      <link>https://neue.cc/2022/11/04_memorypack.html</link>
      <title>MemoryPackにみる .NET 7/C# 11世代のシリアライザー最適化技法</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2022/11/04_memorypack.html"&gt;MemoryPackにみる .NET 7/C# 11世代のシリアライザー最適化技法&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2022-11-04&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;&lt;a href="https://github.com/Cysharp/MemoryPack"&gt;MemoryPack&lt;/a&gt;という、C#に特化することで従来のシリアライザーとは比較にならないほどのパフォーマンスを発揮する新しいシリアライザーを新しく開発しました。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/192748136-262ac2e7-4646-46e1-afb8-528a51a4a987.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;高速なバイナリシリアライザーである &lt;a href="https://github.com/neuecc/MessagePack-CSharp"&gt;MessagePack for C#&lt;/a&gt; と比較しても、通常のオブジェクトでも数倍、データが最適な場合は50~100倍ほどのパフォーマンスにもなります。System.Text.Jsonとでは全く比較になりません。当初は .NET 7 限定としてリリースしましたが、現在は .NET Standard 2.1(.NET 5, 6)やUnity、そしてTypeScriptにも対応しています。&lt;/p&gt;
&lt;p&gt;シリアライザーのパフォーマンスは「データフォーマットの仕様」と「各言語における実装」の両輪で成り立っています。例えば、一般的にはバイナリフォーマットのほうがテキストフォーマット（JSONとか）よりも有利ですが、バイナリシリアライザーより速いJSONシリアライザといったものは有り得ます(Utf8Jsonでそれを実証しました)。では最速のシリアライザーとは何なのか？というと、仕様と実装を突き詰めれば、真の最速のシリアライザーが誕生します。&lt;/p&gt;
&lt;p&gt;私は、今もですが、長年&lt;a href="https://github.com/neuecc/MessagePack-CSharp"&gt;MessagePack for C#&lt;/a&gt;の開発とメンテナンスをしてきました。MessagePack for C#は .NET の世界で非常に成功したシリアライザーで、4000以上のGitHub Starと、Visual Studio内部や、SignalR, Blazor Serverのバイナリプロトコルなど、Microsoftの標準プロダクトにも採用されています。また、この5年間で1000近くのIssueをさばいてきました。そのため、シリアライザーの実装の詳細からユーザーのリアルなユースケース、要望、問題などを把握しています。Roslynを使用したコードジェネレーターによるAOT対応にも当初から取り組み、特にAOT環境(IL2CPP)であるUnityで実証してきました。更にMessagePack for C#以外にも ZeroFormatter(独自フォーマット)、Utf8Json(JSON) といった、これも多くのGitHub Starを獲得したシリアライザーを作成してきているため、異なるフォーマットの性能特性についても深く理解しています。シリアライザーを活用するシチュエーションにおいても、RPCフレームワーク&lt;a href="https://github.com/Cysharp/MagicOnion/"&gt;MagicOnion&lt;/a&gt;の作成、インメモリデータベース&lt;a href="https://github.com/Cysharp/MasterMemory"&gt;MasterMemory&lt;/a&gt;、そして複数のゲームタイトルにおけるクライアント(Unity)/サーバー、両方の実装に関わってきました。&lt;/p&gt;
&lt;p&gt;ようするところ私は .NET のシリアライザー実装について最も詳しい人間の一人であり、MemoryPackはその知見がフルに詰め込まれた、なおかつ、 .NET 7 / C# 11という最新のランタイム/言語機能を使い倒したライブラリになっています。そりゃ速くて当然で異論はないですよね？&lt;/p&gt;
&lt;p&gt;というだけではアレなので、実際なんで速いのかというのを理屈で説明していきます……！きっと納得してもらえるはず！ C#の最適化のTipsとしてもどうぞ。&lt;/p&gt;
&lt;h2&gt;Incremental Source Generator&lt;/h2&gt;
&lt;p&gt;MemoryPackでは .NET 5/C# 9.0 から追加された &lt;a href="https://learn.microsoft.com/en-us/dotnet/csharp/roslyn-sdk/source-generators-overview"&gt;Source Generator&lt;/a&gt;、それも .NET 6 で強化された &lt;a href="https://github.com/dotnet/roslyn/blob/main/docs/features/incremental-generators.md"&gt;Incremental Source Generator&lt;/a&gt;を全面的に採用しています。使い方的には、対象型をpartialに変更する程度で、MessagePack for C#とあまり変わりません（というか極力同じAPIになるように揃えました）。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using MemoryPack;

[MemoryPackable]
public partial class Person
{
    public int Age { get; set; }
    public string Name { get; set; }
}

// usage
var v = new Person { Age = 40, Name = &amp;quot;John&amp;quot; };

var bin = MemoryPackSerializer.Serialize(v);
var val = MemoryPackSerializer.Deserialize&amp;lt;Person&amp;gt;(bin);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Source Generatorの最大の利点はAOTフレンドリーであることで、従来行っていたIL.Emitによる動的コード生成をせずとも、リフレクションを使用しない、各型に最適化されたシリアライザーコードを自動生成しています。それによりUnityのIL2CPPなどでも安全に動作させることが可能です。&lt;/p&gt;
&lt;p&gt;MessagePack for C#では外部ツール(mpc.exe)経由でコード生成することでAOTセーフなシリアライズ処理を実現していましたが、言語機能と統合されたことによって、煩わしい生成プロセス不要で、自然な書き心地のまま高速なシリアライズ処理を可能にしました。&lt;/p&gt;
&lt;p&gt;なお、Unity版の場合は言語/コンパイラバージョンの都合上、Incremental Source Generatorではなくて、古いSource Generatorを採用しています。&lt;/p&gt;
&lt;h2&gt;C#のためのバイナリ仕様&lt;/h2&gt;
&lt;p&gt;キャッチコピーは「Zero encoding」ということで、エンコードしないから速いんだ！という理論を打ち出しています。奇妙に思えて、実のところ別に特殊な話をしているわけではなくて、例えばRustのメジャーなバイナリシリアライザーである&lt;a href="https://github.com/bincode-org/bincode"&gt;bincode&lt;/a&gt;なども似通った仕様を持っています。&lt;a href="https://github.com/google/flatbuffers"&gt;FlatBuffers&lt;/a&gt;も、without parsingな実装のために、メモリデータに近い内容を読み書きします。ただしMemoryPackはFlatBuffersなどと違い、特別な型を必要としない汎用的なシリアライザーであり、POCOに対してのシリアライズ/デシリアライズを行うものです。また、スキーマのメンバー追加へのバージョニング耐性やポリモーフィズムサポート(Union)も持ちます。さすがにメモリダンプしてるだけ、では全く実用にならないわけで、一般的なシリアライザーとして使えるための仕様として整えてあります。&lt;/p&gt;
&lt;h2&gt;varint encoding vs fixed&lt;/h2&gt;
&lt;p&gt;Int32は4バイトですが、例えばJSONでは数値を文字列として、1バイト~11バイト(例えば &lt;code&gt;1&lt;/code&gt; であったり &lt;code&gt;-2147483648&lt;/code&gt; であったり)の可変長なエンコーディングが施されます。バイナリフォーマットでも、サイズの節約のために1~5バイトの可変長にエンコードされる仕様を持つものが多くあります。例えば&lt;a href="https://developers.google.com/protocol-buffers/docs/encoding#varints"&gt;Protocol Buffersの数値型&lt;/a&gt;は、値を7ビットに、後続があるかないかのフラグを1ビットに格納する可変長整数エンコーディングになっています(varint)。これにより数値が小さければ小さいほど、バイト数が少なくなります。逆にワーストケースでは本来の4バイトより大きい5バイトに膨れることになります。とはいえ現実的には小さい数値のほうが圧倒的に頻出するはずなので、とても理にかなった方式です。&lt;a href="https://github.com/msgpack/msgpack/blob/master/spec.md"&gt;MessagePack&lt;/a&gt;や&lt;a href="https://cbor.io/"&gt;CBOR&lt;/a&gt;も同じように、小さい数値では最小で1バイト、大きい場合は最大5バイトになる可変長エンコーディングで処理されます。&lt;/p&gt;
&lt;p&gt;つまり、固定長の場合よりも余計な処理が走ることになります。具体的なコードで比較してみましょう。可変長はprotobufで使われるvarint + &lt;a href="https://developers.google.com/protocol-buffers/docs/encoding#varints"&gt;ZigZagエンコーディング&lt;/a&gt;(負数と正数をまとめる)です。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// 固定長の場合
static void WriteFixedInt32(Span&amp;lt;byte&amp;gt; buffer, int value)
{
    ref byte p = ref MemoryMarshal.GetReference(buffer);
    Unsafe.WriteUnaligned(ref p, value);
}

// 可変長の場合
static void WriteVarInt32(Span&amp;lt;byte&amp;gt; buffer, int value) =&amp;gt; WriteVarInt64(buffer, (long)value);

static void WriteVarInt64(Span&amp;lt;byte&amp;gt; buffer, long value)
{
    ref byte p = ref MemoryMarshal.GetReference(buffer);

    ulong n = (ulong)((value &amp;lt;&amp;lt; 1) ^ (value &amp;gt;&amp;gt; 63));
    while ((n &amp;amp; ~0x7FUL) != 0)
    {
        Unsafe.WriteUnaligned(ref p, (byte)((n &amp;amp; 0x7f) | 0x80));
        p = ref Unsafe.Add(ref p, 1);
        n &amp;gt;&amp;gt;= 7;
    }
    Unsafe.WriteUnaligned(ref p, (byte)n);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;固定長は、つまりC#のメモリをそのまま書き出している(Zero encoding)わけで、さすがにどう見ても固定長のほうが速いでしょう。&lt;/p&gt;
&lt;p&gt;このことは配列に適用した場合、より顕著になります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// https://sharplab.io/
Inspect.Heap(new int[]{ 1, 2, 3, 4, 5 });
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/199924027-492a163c-9bd9-41e7-8489-4f5aa61cac52.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;C#のstructの配列は、データが直列に並びます。この時、&lt;a href="https://learn.microsoft.com/ja-jp/dotnet/csharp/language-reference/builtin-types/unmanaged-types"&gt;structが参照型を持っていない場合(unmanaged type)&lt;/a&gt;は、データが完全にメモリ上に並んでいることになります。MessagePackとMemoryPackでコードでシリアライズ処理を比較してみましょう。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// 固定長の場合(実際には長さも書き込みます)
void Serialize(int[] value)
{
    // サイズが算出可能なので事前に一発で確保
    var size = (sizeof(int) * value.Length) + 4;
    EnsureCapacity(size);

    // 一気にメモリコピー
    MemoryMarshal.AsBytes(value.AsSpan()).CopyTo(buffer);
}

// 可変長の場合
void Serialize(int[] value)
{
    foreach (var item in value)
    {
        // サイズが不明なので都度バッファサイズのチェック
        EnsureCapacity(); // if (buffer.Length &amp;lt; writeLength) Resize();
        // 1要素毎に可変長エンコード
        WriteVarInt32(item);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;固定長の場合は、多くのメソッド呼び出しを省いて、メモリコピー一発だけで済ませることが可能です。&lt;/p&gt;
&lt;p&gt;C#の配列はintのようなプリミティブ型だけではなく、これは複数のプリミティブを持ったstructでも同様の話で、例えば(float x, float y, float z)を持つVector3の配列の場合は、以下のようなメモリレイアウトになります。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/199926307-bad558f9-b912-4b96-90fc-5c2d1a2837ea.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;float(4バイト)はMessagePackにおいて、固定長で5バイトです。追加の1バイトは、その値が何の型(IntなのかFloatなのかStringなのか...)を示す識別子が先頭に入ります。具体的には[0xca, x, x, x, x]といったように。いわばタグ付与エンコーディングを行っているわけです。MemoryPackのフォーマットは識別子を持たないため、4バイトをそのまま書き込みます。&lt;/p&gt;
&lt;p&gt;ベンチマークで50倍の差だった、Vector3[10000]で考えてみましょう。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// 以下の型がフィールドにあるとする
// byte[] buffer
// int offset

void SerializeMemoryPack(Vector3[] value)
{
    // どれだけ複雑だろうとコピー一発で済ませられる
    var size = Unsafe.SizeOf&amp;lt;Vector3&amp;gt;() * value.Length;   
    if ((buffer.Length - offset) &amp;lt; size)
    {
        Array.Resize(ref buffer, buffer.Length * 2);
    }
    MemoryMarshal.AsBytes(value.AsSpan()).CopyTo(buffer.AsSpan(0, offset))
}

void SerializeMessagePack(Vector3[] value)
{
    // 配列の長さ x フィールドの数だけ繰り返す
    foreach (var item in value)
    {
        // X
        {
            // EnsureCapacity
            if ((buffer.Length - offset) &amp;lt; 5)
            {
                // 実際にはResizeではなくてbufferWriter.Advance()です
                Array.Resize(ref buffer, buffer.Length * 2);
            }
            var p = MemoryMarshal.GetArrayDataReference(buffer);
            Unsafe.WriteUnaligned(ref Unsafe.Add(ref p, offset), (byte)0xca);
            Unsafe.WriteUnaligned(ref Unsafe.Add(ref p, offset + 1), item.X);
            offset += 5;
        }
        // Y
        {
            if ((buffer.Length - offset) &amp;lt; 5)
            {
                Array.Resize(ref buffer, buffer.Length * 2);
            }
            var p = MemoryMarshal.GetArrayDataReference(buffer);
            Unsafe.WriteUnaligned(ref Unsafe.Add(ref p, offset), (byte)0xca);
            Unsafe.WriteUnaligned(ref Unsafe.Add(ref p, offset + 1), item.Y);
            offset += 5;
        }
        // Z
        {
            if ((buffer.Length - offset) &amp;lt; 5)
            {
                Array.Resize(ref buffer, buffer.Length * 2);
            }
            var p = MemoryMarshal.GetArrayDataReference(buffer);
            Unsafe.WriteUnaligned(ref Unsafe.Add(ref p, offset), (byte)0xca);
            Unsafe.WriteUnaligned(ref Unsafe.Add(ref p, offset + 1), item.Z);
            offset += 5;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;MessagePackだと30000回のメソッド呼び出しが必要なところが(そしてそのメソッド内では、書き込みメモリが足りているかのチェックと、書き終わった後のオフセットの追加が(愚直に処理する場合)都度必要になる)、一回のメモリコピーだけになります。こうなると、処理時間が文字通り桁違いに変わってきて、冒頭のグラフの50倍~100倍の高速化の理由はここにあります。&lt;/p&gt;
&lt;p&gt;もちろん、デシリアライズ処理もコピー一発になります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// MemoryPackのデシリアライズ、コピーするだけ。
Vector3[] DeserializeMemoryPack(ReadOnlySpan&amp;lt;byte&amp;gt; buffer, int size)
{
    var dest = new Vector3[size];
    MemoryMarshal.Cast&amp;lt;byte, Vector3&amp;gt;(buffer).CopyTo(dest);
    return dest;
}

// ループで都度floatの読み取りが必要
Vector3[] DeserializeMessagePack(ReadOnlySpan&amp;lt;byte&amp;gt; buffer, int size)
{
    var dest = new Vector3[size];
    for (int i = 0; i &amp;lt; size; i++)
    {
        var x = ReadSingle(buffer);
        buffer = buffer.Slice(5);
        var y = ReadSingle(buffer);
        buffer = buffer.Slice(5);
        var z = ReadSingle(buffer);
        buffer = buffer.Slice(5);
        dest[i] = new Vector3(x, y, z);
    }
    return dest;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この辺は、MessagePackのフォーマットそのものの限界のため、仕様に従う限りは、圧倒的な速度差はどうやっても覆せません。ただしMessagePackの場合はext format familyという仕様があり、独自仕様としてこれらの配列だけ特別扱いして処理する（MessagePackとしての互換性はなくなりますが）ことも許されています。実際、MessagePack for C#ではUnity向けに &lt;code&gt;UnsafeBlitResolver&lt;/code&gt; という、上記のような処理をする特別な拡張オプションを用意していました。&lt;/p&gt;
&lt;p&gt;しかし恐らく、ほとんどの人が使っていないでしょう。別に普通にシリアライズできるものを、言語間運用製を壊す、C#だけの独自拡張オプションをわざわざ使おうとは、中々思わない、というのは分かります。そこがまた歯痒かったんですよね、明らかに遅いのに、明らかに速くできるのに、だからせっかく用意したのに、デフォルトではない限り使われない、しかしデフォルトは絶対に仕様に従うべきであり……。&lt;/p&gt;
&lt;h2&gt;string処理の最適化&lt;/h2&gt;
&lt;p&gt;MemoryPackではStringに関して、2つの仕様を持っています。UTF8か、UTF16か、です。C#のstringはUTF16のため、UTF16のままシリアライズすると、UTF8へのエンコード/デコードコストを省くことができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;void EncodeUtf16(string value)
{
    var size = value.Length * 2;
    EnsureCapacity(size);

    // char[] -&amp;gt; byte[] -&amp;gt; Copy
    MemoryMarshal.AsBytes(value.AsSpan()).CopyTo(buffer);
}

string DecodeUtf16(ReadOnlySpan&amp;lt;byte&amp;gt; buffer, int length)
{
    ReadOnlySpan&amp;lt;char&amp;gt; src = MemoryMarshal.Cast&amp;lt;byte, char&amp;gt;(buffer).Slice(0, length);
    return new string(src);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ただし、MemoryPackのデフォルトはUTF8です。これは単純にペイロードのサイズの問題で、UTF16だとASCII文字が2倍のサイズになってしまうため、UTF8にしました（なお、日本語の場合はUTF16のほうがむしろ縮まる可能性が高いです）。&lt;/p&gt;
&lt;p&gt;UTF8の場合でも、他のシリアライザにはない最適化をしています。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;void WriteUtf8MemoryPack(string value)
{
    var source = value.AsSpan();
    var maxByteCount = (source.Length + 1) * 3;
    EnsureCapacity(maxByteCount);
    Utf8.FromUtf16(source, dest, out var _, out var bytesWritten, replaceInvalidSequences: false);
}

void WriteUtf8StandardSerializer(string value)
{
    var maxByteCount = Encoding.UTF8.GetByteCount(value);
    EnsureCapacity(maxByteCount);
    Encoding.UTF8.GetBytes(value, dest);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;var bytes = Encoding.UTF8.GetBytes(value);&lt;/code&gt; は論外です、stringの書き込みで &lt;code&gt;byte[]&lt;/code&gt; のアロケーションは許されません。しかし、多くのシリアライザはで使われている &lt;code&gt;Encoding.UTF8.GetByteCount&lt;/code&gt; も避けるべきです、UTF8は可変長のエンコーディングであり、 GetByteCount は正確なエンコード後のサイズを算出するために、文字列を完全に走査します。つまり GetByteCount -&amp;gt; GetBytes は文字列を二度も走査することになります。&lt;/p&gt;
&lt;p&gt;通常シリアライザーは余裕を持ったバッファの確保が許されています。そこでMemoryPackではUTF8エンコードした場合のワーストケースである文字列長の3倍の確保にすることで、二度の走査を避けています。&lt;/p&gt;
&lt;p&gt;デコードの場合は、更に特殊な最適化を施しています。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;string ReadUtf8MemoryPack(int utf16Length, int utf8Length)
{
    unsafe
    {
        fixed (byte* p = &amp;amp;buffer)
        {
            return string.Create(utf16Length, ((IntPtr)p, utf8Length), static (dest, state) =&amp;gt;
            {
                var src = MemoryMarshal.CreateSpan(ref Unsafe.AsRef&amp;lt;byte&amp;gt;((byte*)state.Item1), state.Item2);
                Utf8.ToUtf16(src, dest, out var bytesRead, out var charsWritten, replaceInvalidSequences: false);
            });
        }
    }
}

string ReadStandardSerialzier(int utf8Length)
{
    return Encoding.UTF8.GetString(buffer.AsSpan(0, utf8Length));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通常、byte[]からstringを取り出すには Encoding.UTF8.GetString(buffer) を使います。MessagePack for C#でもそうです。しかし、改めて、UTF8は可変長のエンコーディングであり、そこからUTF16としての長さは分かりません。そのためUTF8.GetStringだと、stringに変換するためのUTF16としての長さ算出が必要なので、中では文字列を二度走査しています。擬似コードでいうと&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var length = CalcUtf16Length(utf8data);
var str = String.Create(length);
Encoding.Utf8.DecodeToString(utf8data, str);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;といったことになっています。一般的なシリアライザの文字列フォーマットはUTF8であり、当たり前ですがUTF16へのデコードなどといったことは考慮されていないため、C#の文字列としての効率的なデコードのためにUTF16の長さが欲しくても、データの中にはありません。&lt;/p&gt;
&lt;p&gt;しかしMemoryPackの場合はC#を前提においた独自フォーマットのため、文字列はUTF16-LengthとUTF8-Lengthの両方(8バイト)をヘッダに記録しています。そのため、&lt;code&gt;String.Create&amp;lt;TState&amp;gt;(Int32, TState, SpanAction&amp;lt;Char,TState&amp;gt;)&lt;/code&gt; と&lt;a href="https://learn.microsoft.com/en-us/dotnet/api/system.text.unicode.utf8.toutf16"&gt;Utf8.ToUtf16&lt;/a&gt;の組み合わせにより、最も効率的なC# Stringへのデコードを実現しました。&lt;/p&gt;
&lt;h2&gt;ペイロードサイズについて&lt;/h2&gt;
&lt;p&gt;MemoryPackは固定長エンコーディングのため可変長エンコーディングに比べてどうしてもサイズが膨らむ場合があります。特にlongを可変長エンコードすると最小1バイトになるので、固定長8バイトに比べると大きな差となり得ます。しかし、MemoryPackはフィールド名を持たない(JSONやMessagePackのMap)ことやTagがないことなどから、JSONよりも小さいのはもちろん、可変長エンコーディングを持つprotobufやMsgPackと比較しても大きな差となることは滅多にないと考えています。&lt;/p&gt;
&lt;p&gt;データは別に整数だけじゃないので、真にサイズを小さくしたければ、圧縮(LZ4やZStandardなど)を考えるべきですし、圧縮してしまえばあえて可変長エンコーディングする意味はほぼなくなります。より特化して小さくしたい場合は、列指向圧縮にしたほうがより大きな成果を得られる(Apache Parquetなど)ので、現代的には可変長エンコーディングを採用するほうがデメリットは大きいのではないか？と私は考えています。冒頭でも少し紹介しましたが、実際Rustのシリアライザー&lt;a href="https://github.com/bincode-org/bincode"&gt;bincode&lt;/a&gt;のデフォルトは固定長だったりします。&lt;/p&gt;
&lt;p&gt;MemoryPackの実装と統合された効率的な圧縮については、現在BrotliEncode/Decodeのための補助クラスを標準で用意しています。しかし、性能を考えるとLZ4やZStandardを使えたほうが良いため、将来的にはそれらの実装も提供する予定です。&lt;/p&gt;
&lt;h2&gt;.NET 7 / C#11を活用したハイパフォーマンスシリアライザーのための実装&lt;/h2&gt;
&lt;p&gt;MemoryPackは .NET Standard 2.1向けの実装と .NET 7向けの実装で、メソッドシグネチャが若干異なります。.NET 7向けには、最新の言語機能を活用した、より性能を追求したアグレッシブな実装になっています。&lt;/p&gt;
&lt;p&gt;まずシリアライザのインターフェイスは以下のような static abstract membersが活用されています。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public interface IMemoryPackable&amp;lt;T&amp;gt;
{
    // note: serialize parameter should be `ref readonly` but current lang spec can not.
    // see proposal https://github.com/dotnet/csharplang/issues/6010
    static abstract void Serialize&amp;lt;TBufferWriter&amp;gt;(ref MemoryPackWriter&amp;lt;TBufferWriter&amp;gt; writer, scoped ref T? value)
        where TBufferWriter : IBufferWriter&amp;lt;byte&amp;gt;;
    static abstract void Deserialize(ref MemoryPackReader reader, scoped ref T? value);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;MemoryPackはSource Generatorを採用し、対象型が &lt;code&gt;[MemortyPackable]public partial class Foo&lt;/code&gt; であることを要求するため、最終的に対象型は&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[MemortyPackable]
partial class Foo : IMemoryPackable
{
    static void IMemoryPackable&amp;lt;Foo&amp;gt;.Serialize&amp;lt;TBufferWriter&amp;gt;(ref MemoryPackWriter&amp;lt;TBufferWriter&amp;gt; writer, scoped ref Foo? value) 
    {
    }
        
    static void IMemoryPackable&amp;lt;Foo&amp;gt;.Deserialize(ref MemoryPackReader reader, scoped ref Foo? value)
    {
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;といったものを生成します。これにより、仮想メソッド経由呼び出しのコストを避けています。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void WritePackable&amp;lt;T&amp;gt;(scoped in T? value)
    where T : IMemoryPackable&amp;lt;T&amp;gt;
{
    // IMemoryPackableが対象の場合、静的メソッドを直接呼び出しに行く
    T.Serialize(ref this, ref Unsafe.AsRef(value));
}

// 
public void WriteValue&amp;lt;T&amp;gt;(scoped in T? value)
{
    // IMemoryPackFormatter&amp;lt;T&amp;gt; を取得し、仮想メソッド経由で Serialize を呼び出す
    var formatter = MemoryPackFormatterProvider.GetFormatter&amp;lt;T&amp;gt;();
    formatter.Serialize(ref this, ref Unsafe.AsRef(value));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;また、&lt;code&gt;MemoryPackWriter&lt;/code&gt;/&lt;code&gt;MemoryPackReader&lt;/code&gt; では &lt;code&gt;ref field&lt;/code&gt; を活用しています。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public ref struct MemoryPackWriter&amp;lt;TBufferWriter&amp;gt;
    where TBufferWriter : IBufferWriter&amp;lt;byte&amp;gt;
{
    ref TBufferWriter bufferWriter;
    ref byte bufferReference;
    int bufferLength;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ref byte bufferReference&lt;/code&gt;, &lt;code&gt;int bufferLength&lt;/code&gt; の組み合わせは、つまり&lt;code&gt;Span&amp;lt;byte&amp;gt;&lt;/code&gt;のインライン化です。また、&lt;code&gt;TBufferWriter&lt;/code&gt;を&lt;code&gt;ref TBufferWriter&lt;/code&gt;として受け取ることにより、ミュータブルな&lt;code&gt;struct TBufferWriter : IBufferWrite&amp;lt;byte&amp;gt;&lt;/code&gt;を安全に受け入れて呼び出すことができるようになりました。&lt;/p&gt;
&lt;h2&gt;全ての型への最適化&lt;/h2&gt;
&lt;p&gt;例えばコレクションは &lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt; としてシリアライズ/デシリアライズすることで実装の共通化が可能ですが、MemoryPackでは全ての型に対して個別の実装をするようにしています。単純なところでは &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt;を処理するのに&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void Serialize(ref MemoryPackWriter writer, IEnumerable&amp;lt;T&amp;gt; value)
{
    foreach(var item in source)
    {
        writer.WriteValue(item);
    }
}

public void Serialize(ref MemoryPackWriter writer, List&amp;lt;T&amp;gt; value)
{
    foreach(var item in source)
    {
        writer.WriteValue(item);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この2つでは全然性能が違います。&lt;code&gt;IEnumerable&amp;lt;T&amp;gt;&lt;/code&gt;へのforeachは &lt;code&gt;IEnumerator&amp;lt;T&amp;gt;&lt;/code&gt; を取得しますが、&lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt;へのforeachは &lt;code&gt;struct List&amp;lt;T&amp;gt;.Enumerator&lt;/code&gt; という最適化された専用の構造体のEnumeratorを取得するからです。&lt;/p&gt;
&lt;p&gt;しかし、もっと最適化する余地があります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public sealed class ListFormatter&amp;lt;T&amp;gt; : MemoryPackFormatter&amp;lt;List&amp;lt;T?&amp;gt;&amp;gt;
{
    public override void Serialize&amp;lt;TBufferWriter&amp;gt;(ref MemoryPackWriter&amp;lt;TBufferWriter&amp;gt; writer, scoped ref List&amp;lt;T?&amp;gt;? value)
    {
        if (value == null)
        {
            writer.WriteNullCollectionHeader();
            return;
        }

        writer.WriteSpan(CollectionsMarshal.AsSpan(value));
    }
}

// MemoryPackWriter.WriteSpan
[MethodImpl(MethodImplOptions.AggressiveInlining)]
public void WriteSpan&amp;lt;T&amp;gt;(scoped Span&amp;lt;T?&amp;gt; value)
{
    if (!RuntimeHelpers.IsReferenceOrContainsReferences&amp;lt;T&amp;gt;())
    {
        DangerousWriteUnmanagedSpan(value);
        return;
    }

    var formatter = GetFormatter&amp;lt;T&amp;gt;();
    WriteCollectionHeader(value.Length);
    for (int i = 0; i &amp;lt; value.Length; i++)
    {
        formatter.Serialize(ref this, ref value[i]);
    }
}

// MemoryPackWriter.DangerousWriteUnmanagedSpan
[MethodImpl(MethodImplOptions.AggressiveInlining)]
public void DangerousWriteUnmanagedSpan&amp;lt;T&amp;gt;(scoped Span&amp;lt;T&amp;gt; value)
{
    if (value.Length == 0)
    {
        WriteCollectionHeader(0);
        return;
    }

    var srcLength = Unsafe.SizeOf&amp;lt;T&amp;gt;() * value.Length;
    var allocSize = srcLength + 4;

    ref var dest = ref GetSpanReference(allocSize);
    ref var src = ref Unsafe.As&amp;lt;T, byte&amp;gt;(ref MemoryMarshal.GetReference(value));

    Unsafe.WriteUnaligned(ref dest, value.Length);
    Unsafe.CopyBlockUnaligned(ref Unsafe.Add(ref dest, 4), ref src, (uint)srcLength);

    Advance(allocSize);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;まず、そもそも現代では &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt; の列挙は &lt;code&gt;CollectionsMarshal.AsSpan(value)&lt;/code&gt; 経由で、&lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt;を取得して、それを列挙するのが最適です。それによってEnumerator経由というコストすら省くことが可能です。更に、&lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt;が取得できているなら、&lt;code&gt;List&amp;lt;int&amp;gt;&lt;/code&gt;や&lt;code&gt;List&amp;lt;Vector3&amp;gt;&lt;/code&gt;の場合にコピーのみで処理することもできます。&lt;/p&gt;
&lt;p&gt;Deserializeの場合にも、興味深い最適化があります。まず、MemoryPackのDeserializeは &lt;code&gt;ref T? value&lt;/code&gt; を受け取るようになっていて、valueがnullの場合は内部で生成したオブジェクトを（普通のシリアライザと同様）、valueが渡されている場合は上書きするようになっています。これによってDeserialize時の新規オブジェクト生成というアロケーションをゼロにすることが可能です。コレクションの場合も、&lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt;の場合は&lt;code&gt;Clear()&lt;/code&gt;を呼び出すことで再利用します。&lt;/p&gt;
&lt;p&gt;その上で、特殊なSpanの呼び出しをすることにより、 &lt;code&gt;List&amp;lt;T&amp;gt;.Add&lt;/code&gt; すら避けることに成功しました。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public sealed class ListFormatter&amp;lt;T&amp;gt; : MemoryPackFormatter&amp;lt;List&amp;lt;T?&amp;gt;&amp;gt;
{
    public override void Deserialize(ref MemoryPackReader reader, scoped ref List&amp;lt;T?&amp;gt;? value)
    {
        if (!reader.TryReadCollectionHeader(out var length))
        {
            value = null;
            return;
        }

        if (value == null)
        {
            value = new List&amp;lt;T?&amp;gt;(length);
        }
        else if (value.Count == length)
        {
            value.Clear();
        }

        var span = CollectionsMarshalEx.CreateSpan(value, length);
        reader.ReadSpanWithoutReadLengthHeader(length, ref span);
    }
}

internal static class CollectionsMarshalEx
{
    /// &amp;lt;summary&amp;gt;
    /// similar as AsSpan but modify size to create fixed-size span.
    /// &amp;lt;/summary&amp;gt;
    public static Span&amp;lt;T?&amp;gt; CreateSpan&amp;lt;T&amp;gt;(List&amp;lt;T?&amp;gt; list, int length)
    {
        list.EnsureCapacity(length);

        ref var view = ref Unsafe.As&amp;lt;List&amp;lt;T?&amp;gt;, ListView&amp;lt;T?&amp;gt;&amp;gt;(ref list);
        view._size = length;
        return view._items.AsSpan(0, length);
    }

    // NOTE: These structure depndent on .NET 7, if changed, require to keep same structure.

    internal sealed class ListView&amp;lt;T&amp;gt;
    {
        public T[] _items;
        public int _size;
        public int _version;
    }
}

// MemoryPackReader.ReadSpanWithoutReadLengthHeader
public void ReadSpanWithoutReadLengthHeader&amp;lt;T&amp;gt;(int length, scoped ref Span&amp;lt;T?&amp;gt; value)
{
    if (length == 0)
    {
        value = Array.Empty&amp;lt;T&amp;gt;();
        return;
    }

    if (!RuntimeHelpers.IsReferenceOrContainsReferences&amp;lt;T&amp;gt;())
    {
        if (value.Length != length)
        {
            value = AllocateUninitializedArray&amp;lt;T&amp;gt;(length);
        }

        var byteCount = length * Unsafe.SizeOf&amp;lt;T&amp;gt;();
        ref var src = ref GetSpanReference(byteCount);
        ref var dest = ref Unsafe.As&amp;lt;T, byte&amp;gt;(ref MemoryMarshal.GetReference(value)!);
        Unsafe.CopyBlockUnaligned(ref dest, ref src, (uint)byteCount);

        Advance(byteCount);
    }
    else
    {
        if (value.Length != length)
        {
            value = new T[length];
        }

        var formatter = GetFormatter&amp;lt;T&amp;gt;();
        for (int i = 0; i &amp;lt; length; i++)
        {
            formatter.Deserialize(ref this, ref value[i]);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;new List&amp;lt;T&amp;gt;(capacity)&lt;/code&gt; や &lt;code&gt;List&amp;lt;T&amp;gt;.EnsurceCapacity(capacity)&lt;/code&gt; によって、&lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt;の抱える内部の配列のサイズを事前に拡大しておくことが可能です。これにより、都度拡大/コピーが内部で発生することを避けることができます。&lt;/p&gt;
&lt;p&gt;その状態で &lt;code&gt;CollectionsMarshal.CreateSpan&lt;/code&gt; を使うと、取得できるSpanは、長さ0のものです。なぜなら内部のsizeは変更されていないため、です。もし &lt;code&gt;CollectionMarshals.AsMemory&lt;/code&gt;があれば、そこから&lt;code&gt;MemoryMarshal.TryGetArray&lt;/code&gt;のコンボで生配列を取得できて良いのですが、残念ながら Span からは元になっている配列を取得する手段がありません。そこで、&lt;code&gt;Unsafe.As&lt;/code&gt;で強引に型の構造を合わせて、&lt;code&gt;List&amp;lt;T&amp;gt;._size&lt;/code&gt;を弄ることによって、拡大済みの内部配列を取得することができました。&lt;/p&gt;
&lt;p&gt;そうすればunamanged型の場合はコピーだけで済ませてしまう最適化や、&lt;code&gt;List&amp;lt;T&amp;gt;.Add&lt;/code&gt;(これは都度、配列のサイズチェックが入る)を避けた、&lt;code&gt;Span&amp;lt;T&amp;gt;[index]&lt;/code&gt;経由での値の詰め込みが可能になり、従来のシリアライザのデシリアライズよりも遥かに高いパフォーマンスを実現しました。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt;への最適化が代表的ではありますが、他にも紹介しきれないほど、全ての型を精査し、可能な限りの最適化をそれぞれに施してあります。&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;なぜ開発しようかと思ったかというと、MessagePack for C#に不満がでてきたから、です。残念ながら .NET「最速」とはいえないような状況があり、その理由としてバイナリ仕様が足を引っ張っているため、改善するのにも限界があることには随分前から気づいていました。また、実装面でもIL生成とRoslynを使った外部ツールとしてのコードジェネレーター(mpc)の、二種のメンテナンスがかなり厳しくなってきているということもありました。外部ツールとしてのコードジェネレーターはトラブルの種で、何かと環境によって動かないということが多発していて、Source Generatorにフル対応できるのなら、もはや廃止したいぐらいにも思っていました。&lt;/p&gt;
&lt;p&gt;そこに .NET 7/C# 11 の ref fieldやstatic abstract methodを見た時、これをシリアライザー開発に応用したらパフォーマンスの底上げが可能になる、ついでにSource Generator化すれば、いっそIL生成も廃止してSource Generatorに一本化できるのではないか？それならもう、それをMessagPack for C#に適用する前に、パフォーマンス向上に問題のあるバイナリ仕様の限界も無視した、C#のためだけに究極の性能を実現するシリアライザーを作って、本当の最速を実証してしまえばいいのでは？と。&lt;/p&gt;
&lt;p&gt;性能特化の実験的シリアライザーではなくて、実用性も重視したシリアライザーであるために、MessagePack for C#での経験も元にして、多くの機能も備えるようにしました。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;* .NETのモダンI/O API対応(IBufferWriter&amp;lt;byte&amp;gt;, ReadOnlySpan&amp;lt;byte&amp;gt;, ReadOnlySequence&amp;lt;byte&amp;gt;)
* 既存オブジェクトへの上書きデシリアライズ
* ポリモーフィズムなシリアライズ(Union)
* PipeWriter/Readerを活用したストリーミングシリアライズ/デシリアライズ
* (やや限定的ながらも)バージョニング耐性
* TypeScriptコード生成
* Unity(2021.3)サポート
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;欠点としては、バージョニング耐性が、仕様上やや貧弱です。詳しくは&lt;a href="https://github.com/Cysharp/MemoryPack#version-tolerant"&gt;ドキュメントを参照してください&lt;/a&gt;。パフォーマンスをやや落としてバージョニング耐性を上げるオプションを追加することは検討しています。また、メモリコピーを多用するので、実行環境が little-endian であることを前提にしています。ただし現代のコンピューターはほぼすべて little-endian であるため、問題にはならないはずです。&lt;/p&gt;
&lt;p&gt;パフォーマンスのために特化したstructを作ってメモリコピーする、といったことはC#の最適化のための手段として、そこまで珍しいわけではなく、やったことある人もいるのではないかと思います。そこからすると、あるいはこの記事を読んで、MemoryPackは一見ただのメモリコピーの塊じゃん、みたいな感じがあるかもしれませんが、汎用シリアライザーとして成立させるのはかなり大変で、そこをやりきっているのが新しいところです。&lt;/p&gt;
&lt;p&gt;当初実現していなかった .NET 5/6(Standard 2.1)対応やUnity対応は完了したので、今後は&lt;a href="https://github.com/Cysharp/MasterMemory"&gt;MasterMemory&lt;/a&gt;のSource Generator/MemoryPack対応や、&lt;a href="https://github.com/Cysharp/MagicOnion/"&gt;MagicOnion&lt;/a&gt;のシリアライザ変更対応など、利用できる範囲をより広げることを考えています。Cysharpの C#ライブラリ のエコシステムの中心になると位置づけているので、今後もかなり力入れて成長させていこうと思っていますので、まずは、是非是非試してみてください！&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Fri, 04 Nov 2022 00:00:00 +0900</pubDate>
      <a10:updated>2022-11-04T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2022/07/13_Cancellation.html</guid>
      <link>https://neue.cc/2022/07/13_Cancellation.html</link>
      <title>async/awaitのキャンセル処理やタイムアウトを効率的に扱うためのパターン＆プラクティス</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2022/07/13_Cancellation.html"&gt;async/awaitのキャンセル処理やタイムアウトを効率的に扱うためのパターン＆プラクティス&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2022-07-13&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;async/awaitの鬼門の一つとして、適切なキャンセル処理が挙げられます。別に基本的にはそんな難しいことではなく、CancellationTokenSourceを作る、CanellationTokenを渡す、OperationCanceledExceptionをハンドリングする。というだけの話です。けれど、Tokenに手動でコールバックをRegisterしたときとか、渡す口が空いてないものに無理やりなんとかするときとか、タイムアウトに使った場合の始末とか、ちょっと気の利いた処理をしたいような場面もあり、そうした時にどうすれば良いのか悩むこともあります。&lt;/p&gt;
&lt;p&gt;こういうのはパターンと対応さえ覚えてしまえばいい話でもあるので、今回は&lt;a href="https://github.com/Cysharp/AlterNats"&gt;AlterNats&lt;/a&gt;の実装時に直面したパターンから、「外部キャンセル・タイムアウト・大元のDispose」が複合された状況での処理の記述方法と、適切な例外処理、そして最後にObjectPoolなども交えた効率的なゼロアロケーションでのCancellationTokenSourceのハンドリング手法を紹介します。&lt;/p&gt;
&lt;h2&gt;CreateLinkedTokenSourceを使ったパターン&lt;/h2&gt;
&lt;p&gt;何かのClientを実装してみる、ということにしましょう。キャンセル処理の最も単純なパターンは引数の末尾にCancellationTokenを用意して、内部のメソッドにひたすら伝搬させていくことです。きちんと伝搬させていけば、最奥の処理が適切にCancellationTokenをハンドリングしてキャンセル検知時にOperationCanceledExceptionを投げてくれます。CancellationTokenをデフォルト引数にするか、必ず渡す必要があるよう強制するかは、アプリケーションの性質次第です。アプリケーションに近いコードでは強制させるようにしておくと、渡し忘れを避けれるので良いでしょう。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;class Client
{
    public async Task SendAsync(CancellationToken cancellationToken = default)
    {
        await SendCoreAsync(cancellationToken);
    }

    async Task SendCoreAsync(CancellationToken cancellationToken)
    {
        // nanika...
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;非同期メソッドのキャンセルはCancellationTokenで処理するのが基本で、別途Cancelメソッドを用意する、といったことはやめておきましょう。実装が余計に複雑化するだけです。CancellationTokenを伝搬させるのが基本であり全てです。&lt;/p&gt;
&lt;p&gt;任意のキャンセルの他に、タイムアウト処理を入れたい、というのは特に通信系ではよくあります。async/awaitでのタイムアウトの基本は、タイムアウトもキャンセル処理の一つである、ということです。CancellationTokenSourceにはCancelAfterという一定時間後にCancelを発火させるというメソッドが用意されているので、これを使ってCancellationTokenを渡せば、すなわちタイムアウトになります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// Disposeすると内部タイマーがストップされるのでリークしない
using var cts = new CancellationTokenSource();
cts.CancelAfter(TimeSpan.FromMinutes(1));

await client.SendAsync(cts.Token);
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/Cysharp/UniTask"&gt;UniTask&lt;/a&gt;ではCancelAfterSlimというメソッドが用意されているため、そちらを使うことをお薦めします。Cancelはスレッドプールを使いますが、CancelAfterSlimはPlayerLoop上で動くため、Unityフレンドリーな実装になっています。ただし内部タイマーのストップ手法がCancelAfterSlimの戻り値をDisposeする必要があるというように、実装に若干差異があります。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;タイムアウト時間は大抵固定のため、ユーザーに都度CancelAfterを叩かせるというのは、だいぶ使いにくい設計です。そこで、CancelAfterの実行はSendAsyncメソッドの内部で行うことにしましょう。そうした内部のタイムアウト用CancellationTokenと、外部からくるCancellationTokenを合成して一つのCancellationTokenに変換するには、&lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.cancellationtokensource.createlinkedtokensource"&gt;CancellationTokenSource.CreateLinkedTokenSource&lt;/a&gt;が使えます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;class Client
{
    public TimeSpan Timeout { get; }

    public Client(TimeSpan timeout)
    {
        this.Timeout = timeout;
    }

    public async Task SendAsync(CancellationToken cancellationToken = default)
    {
        // 連結された新しいCancellationTokenSourceを作る
        using var cts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken);
        cts.CancelAfter(Timeout);

        await SendCoreAsync(cts.Token);
    }

    // snip...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CreateLinkedTokenSourceで生成されたCancellationTourceは連結されたいずれかがCancelされると、生成されたCancellationTokenSource自体もCancelされます。また、それ自体からもCancelが発火できます。&lt;/p&gt;
&lt;p&gt;これで完成！なのですが、このままだと例外処理に問題があります。&lt;/p&gt;
&lt;p&gt;OperationCanceledExceptionは &lt;code&gt;CancellationToken&lt;/code&gt;というプロパティを持っていて、これを元に呼び出し側はキャンセルの原因を判別することができます。一つ例を出しますが、以下のようにOperationCanceledExceptionをcatchしたうえで、更に判定を入れてコード分岐をかけることがあります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;try
{
    await client.SendAsync(token);
}
catch (OperationCanceledException ex) when (ex.CancellationToken == token)
{
    // Cancelの原因をTokenによって判定できる
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例外を何も処理せずに全部おまかせでやると、投げられる OperationCanceledException.CancellationToken は CreateLinkedTokenSource で連結したTokenになってしまい、何の意味もない情報ですし、原因の判別に使うこともできません。&lt;/p&gt;
&lt;p&gt;また、タイムアウトをOperationCanceledExceptionとして扱ってしまうことも問題です。OperationCanceledExceptionは特殊な例外で、既知の例外であるとしてロギングから抜いたりすることもままあります（例えばウェブサーバーでクライアントの強制切断(リクエスト中にブラウザ閉じたりとか)でキャンセルされることはよくあるけれど、それをいちいちエラーで記録していたらエラー祭りになってしまう）。タイムアウトは明らかな異常であり、そうしたキャンセルとは確実に区別して欲しいし、OperationCanceledExceptionではない例外になって欲しい。&lt;/p&gt;
&lt;p&gt;これは .NET のHttpClientでも &lt;a href="https://github.com/dotnet/runtime/issues/21965"&gt;HttpClient throws TaskCanceledException on timeout #21965&lt;/a&gt; としてIssueがあがり(TaskCanceledExceptionはOperationCanceledExceptionとほぼ同義です)、大激論(121コメントもある！)を巻き起こしました。HttpClientはタイムアウトだろうが手動キャンセルだろうが区別なくTaskCanceledExceptionを投げるのですが、原因は、実装が上の例の通りCreateLinkedTokenSourceで繋げたもので処理していて、そして、特に何のハンドリングもしていなかったからです。&lt;/p&gt;
&lt;p&gt;結論としてこれはHttpClientの設計ミスなのですが、一度世の中に出したクラスの例外の型を変更することは .NET の互換性維持のポリシーに反するということで（実際、これを変更してしまうと影響は相当大きくなるでしょう）、お茶を濁した対応(InnerExceptionにTimeoutExceptionを仕込んで、判定はそちら経由で一応できなくもないようにした)となってしまったのですが、今から実装する我々は同じ轍を踏んではいけない。ということで、ちゃんと正しく処理するようにしましょう。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public async Task SendAsync(CancellationToken cancellationToken = default)
{
    using var cts = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken);
    cts.CancelAfter(Timeout);

    try
    {
        await SendCoreAsync(cts.Token);
    }
    catch (OperationCanceledException ex) when (ex.CancellationToken == cts.Token)
    {
        if (cancellationToken.IsCancellationRequested)
        {
            // 引数のCancellationTokenが原因なので、それを保持したOperationCanceledExceptionとして投げる
            throw new OperationCanceledException(ex.Message, ex, cancellationToken);
        }
        else
        {
            // タイムアウトが原因なので、TimeoutException(或いは独自の例外)として投げる
            throw new TimeoutException($&amp;quot;The request was canceled due to the configured Timeout of {Timeout.TotalSeconds} seconds elapsing.&amp;quot;, ex);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;やることは別に難しくはなく、OperationCanceledExceptionをcatchしたうえで、外から渡されたcancellationTokenがキャンセルされているならそれが原因、そうでないならタイムアウトが原因であるという判定をして、それに応じた例外を投げ直します。&lt;/p&gt;
&lt;p&gt;最後に、Client自体がDisposeできるとして、それに反応するようなコードにしましょう。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;class Client : IDisposable
{
    // IDisposableと引っ掛けて、Client自体がDisposeされたら実行中のリクエストも終了させるようにする
    readonly CancellationTokenSource clientLifetimeTokenSource;

    public TimeSpan Timeout { get; }

    public Client(TimeSpan timeout)
    {
        this.Timeout = timeout;
        this.clientLifetimeTokenSource = new CancellationTokenSource();
    }

    public async Task SendAsync(CancellationToken cancellationToken = default)
    {
        using var cts = CancellationTokenSource.CreateLinkedTokenSource(clientLifetimeTokenSource.Token, cancellationToken);
        cts.CancelAfter(Timeout);

        try
        {
            await SendCoreAsync(cts.Token);
        }
        catch (OperationCanceledException ex) when (ex.CancellationToken == cts.Token)
        {
            if (cancellationToken.IsCancellationRequested)
            {
                // 引数のCancellationTokenが原因なので、それを保持したOperationCanceledExceptionとして投げる
                throw new OperationCanceledException(ex.Message, ex, cancellationToken);
            }
            else if (clientLifetimeTokenSource.IsCancellationRequested)
            {
                // クライアント自体がDisposeされたのでOperationCanceledException、或いは独自の例外を投げる
                throw new OperationCanceledException(&amp;quot;Client is disposed.&amp;quot;, ex, clientLifetimeTokenSource.Token);
            }
            else
            {
                // タイムアウトが原因なので、TimeoutException(或いは独自の例外)として投げる
                throw new TimeoutException($&amp;quot;The request was canceled due to the configured Timeout of {Timeout.TotalSeconds} seconds elapsing.&amp;quot;, ex);
            }
        }
    }

    async Task SendCoreAsync(CancellationToken cancellationToken)
    {
        // nanika...
    }

    public void Dispose()
    {
        clientLifetimeTokenSource.Cancel();
        clientLifetimeTokenSource.Dispose();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;差分はCreateLinkedTokenSourceで連結するトークンを増やすのと、例外処理時の分岐を増やすことだけです。&lt;/p&gt;
&lt;h2&gt;ゼロアロケーション化する&lt;/h2&gt;
&lt;p&gt;殆どの場合は上記のパターンで全く問題ないのですが、都度CreateLinkedTokenSourceで新しいCancellationTokenSourceを作るのが気になる、かもしれません。どちらにせよasyncメソッドが非同期で実行される場合には、非同期ステートマシン自体のアロケーションが発生するので実際のところ別に気にするほどのことではない。のですが、&lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.sources.ivaluetasksource"&gt;IValueTaskSource&lt;/a&gt;や&lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.poolingasyncvaluetaskmethodbuilder-1"&gt;PoolingAsyncValueTaskMethodBuilder&lt;/a&gt;を使ったアロケーションを避ける非同期実装を行っていた場合には、相当気になる問題になってきます。また、HTTP/1のREST呼び出しのような頻度では大したことないですが、これが例えばサーバーで大量の並列実行をさばく、クライアントではリアルタイム通信で毎フレーム通信する、といった用途だと、この辺も気を配りたくなってくるかもしれません。&lt;/p&gt;
&lt;p&gt;なお、ここでは説明の簡略化のために、SendAsyncメソッド自体はasync Taskのままにします。&lt;/p&gt;
&lt;p&gt;まずは外部キャンセルのない、タイムアウトだけのケースを見ていきます。タイムアウトは正常系の場合は発火しない、つまり殆どの場合は発火しないため、非発火時にはCancellationTokenSourceを使い回すようにしましょう。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;class Client
{
    // SqlConnectionのようなメソッドを多重に呼ぶことを禁止しているクラスの場合はフィールドにCancellationTokenSourceを一つ
    // HttpClientのようにあちこちから多重に呼ばれる場合があるものはObjectPoolで保持する

    readonly ObjectPool&amp;lt;CancellationTokenSource&amp;gt; timeoutTokenSourcePool;

    public TimeSpan Timeout { get; }

    public Client(TimeSpan timeout)
    {
        this.Timeout = timeout;
        this.timeoutTokenSourcePool = ObjectPool.Create&amp;lt;CancellationTokenSource&amp;gt;();
    }

    public async Task SendAsync()
    {
        var timeoutTokenSource = timeoutTokenSourcePool.Get();
        timeoutTokenSource.CancelAfter(Timeout);

        try
        {
            await SendCoreAsync(timeoutTokenSource.Token);
        }
        finally
        {
            // Timeout処理が発火していない場合はリセットして再利用できる
            if (timeoutTokenSource.TryReset())
            {
                timeoutTokenSourcePool.Return(timeoutTokenSource);
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ObjectPoolの実装は色々ありますが、今回は説明の簡略化のために&lt;a href="https://docs.microsoft.com/en-us/dotnet/api/microsoft.extensions.objectpool"&gt;Microsoft.Extensions.ObjectPool&lt;/a&gt;を使いました(NuGetからMicrosoft.Extensions.ObjectPoolを参照する必要あり)。タイムアウトが発動した場合は再利用不能なので、プールに戻してはいけません。なお、 &lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.cancellationtokensource.tryreset"&gt;CancellationTokenSource.TryReset&lt;/a&gt;は .NET 6 からのメソッドになります。それ以前の場合は &lt;code&gt;CancelAfter(Timeout.InfiniteTimeSpan)&lt;/code&gt; を呼んでタイマー時間を無限大に引き伸ばす変更を入れる（内部的にはTimerがChangeされる）というハックがあります。&lt;/p&gt;
&lt;p&gt;外部キャンセルが入る場合には、LinkedTokenを作らず、&lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.cancellationtoken.unsaferegister"&gt;CancellationToken.UnsafeRegister&lt;/a&gt;でタイマー用のCancellationTokenSourceをキャンセルするようにします。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public async Task SendAsync(CancellationToken cancellationToken = default)
{
    var timeoutTokenSource = timeoutTokenSourcePool.Get();

    CancellationTokenRegistration externalCancellation = default;
    if (cancellationToken.CanBeCanceled)
    {
        // 引数のCancellationTokenが発動した場合もTimeout用のCancellationTokenを発火させる
        externalCancellation = cancellationToken.UnsafeRegister(static state =&amp;gt;
        {
            ((CancellationTokenSource)state!).Cancel();
        }, timeoutTokenSource);
    }

    timeoutTokenSource.CancelAfter(Timeout);

    try
    {
        await SendCoreAsync(timeoutTokenSource.Token);
    }
    finally
    {
        // Registerの解除(TryResetの前に「必ず」先に解除すること)
        // CancellationTokenRegistration.Disposeは解除完了（コールバック実行中の場合は実行終了）までブロックして確実に待ちます
        externalCancellation.Dispose();
        if (timeoutTokenSource.TryReset())
        {
            timeoutTokenSourcePool.Return(timeoutTokenSource);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CancellationToken.UnsafeRegisterは .NET 6 からのメソッドでExecutionContextをCaptureしないため、より高効率です。それ以前の場合はRegisterを使うか、呼び出しの前後でExecutionContext.SuppressFlow/RestoreFlowするというハックが使えます(UniTaskのRegisterWithoutCaptureExecutionContextはこの実装を採用しています)。&lt;/p&gt;
&lt;p&gt;CancellationTokenにコールバックを仕込む場合、レースコンディションが発生する可能性が出てきます。この場合だとTimeout用のCancellationTokenSourceをプールに戻した後にCancelが発生すると、最悪なことになります。それを防ぐために、CancellationTokenRegistration.DisposeをTryResetの前に必ず呼びましょう。CancellationTokenRegistration.Disposeの優れているところは、コールバックが実行中の場合は実行終了までブロックして確実に待ってくれます。これによりマルチスレッドのタイミング問題ですり抜けてしまうといったことを防いでくれます。&lt;/p&gt;
&lt;p&gt;ブロックといいますが、コールバックに登録されたメソッドがすぐに完了する性質のものならば、lockみたいなものなので神経質になる必要はないでしょう。&lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.cancellationtokenregistration"&gt;CancellationTokenRegistration&lt;/a&gt;にはDisposeAsyncも用意されていますが、むしろそちらを呼ぶほうがオーバーヘッドであるため、無理にDisposeAsyncのほうを優先する必要はないと考えています。CancellationTokenRegistrationには他にUnregisterメソッドもあり、これはfire-and-forget的に解除処理したい場合に有効です。使い分けですね。&lt;/p&gt;
&lt;p&gt;なお、CancellationTokenへのコールバックのRegister(UnsafeRegister)は、初回はコールバック登録用のスロットを生成するといったアロケーションがありますが、Dispose/Registerを繰り返す二回目以降はスロットを再利用してくれます。このへんも新規に(Linked)CancellationTokenSourceを作るより有利な点となりますね。&lt;/p&gt;
&lt;p&gt;引き続き、Client自体の寿命に引っ掛けるCancellationTokenを追加した実装を見ていきましょう。といっても、単純にRegisterを足すだけです。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;class Client : IDisposable
{
    readonly TimeSpan timeout;
    readonly ObjectPool&amp;lt;CancellationTokenSource&amp;gt; timeoutTokenSourcePool;
    readonly CancellationTokenSource clientLifetimeTokenSource;

    public TimeSpan Timeout { get; }

    public Client(TimeSpan timeout)
    {
        this.Timeout = timeout;
        this.timeoutTokenSourcePool = ObjectPool.Create&amp;lt;CancellationTokenSource&amp;gt;();
        this.clientLifetimeTokenSource = new CancellationTokenSource();
    }

    public async Task SendAsync(CancellationToken cancellationToken = default)
    {
        var timeoutTokenSource = timeoutTokenSourcePool.Get();

        CancellationTokenRegistration externalCancellation = default;
        if (cancellationToken.CanBeCanceled)
        {
            // 引数のCancellationTokenが発動した場合もTimeout用のCancellationTokenを発火させる
            externalCancellation = cancellationToken.UnsafeRegister(static state =&amp;gt;
            {
                ((CancellationTokenSource)state!).Cancel();
            }, timeoutTokenSource);
        }

        // Clientの寿命に合わせたものも同じように追加しておく
        var clientLifetimeCancellation = clientLifetimeTokenSource.Token.UnsafeRegister(static state =&amp;gt;
        {
            ((CancellationTokenSource)state!).Cancel();
        }, timeoutTokenSource);

        timeoutTokenSource.CancelAfter(Timeout);

        try
        {
            await SendCoreAsync(timeoutTokenSource.Token);
        }
        finally
        {
            // Registerの解除増量
            externalCancellation.Dispose();
            clientLifetimeCancellation.Dispose();
            if (timeoutTokenSource.TryReset())
            {
                timeoutTokenSourcePool.Return(timeoutTokenSource);
            }
        }
    }

    async Task SendCoreAsync(CancellationToken cancellationToken)
    {
        // snip...
    }

    public void Dispose()
    {
        clientLifetimeTokenSource.Cancel();
        clientLifetimeTokenSource.Dispose();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例外処理も当然必要です！が、ここは最初の例のLinkedTokenで作ったときと同じです。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public async Task SendAsync(CancellationToken cancellationToken = default)
{
    var timeoutTokenSource = timeoutTokenSourcePool.Get();

    CancellationTokenRegistration externalCancellation = default;
    if (cancellationToken.CanBeCanceled)
    {
        externalCancellation = cancellationToken.UnsafeRegister(static state =&amp;gt;
        {
            ((CancellationTokenSource)state!).Cancel();
        }, timeoutTokenSource);
    }

    var clientLifetimeCancellation = clientLifetimeTokenSource.Token.UnsafeRegister(static state =&amp;gt;
    {
        ((CancellationTokenSource)state!).Cancel();
    }, timeoutTokenSource);

    timeoutTokenSource.CancelAfter(Timeout);

    try
    {
        await SendCoreAsync(timeoutTokenSource.Token);
    }
    catch (OperationCanceledException ex) when (ex.CancellationToken == timeoutTokenSource.Token)
    {
        // 例外発生時の対応はLinkedTokenで作ったときと特に別に変わらず

        if (cancellationToken.IsCancellationRequested)
        {
            throw new OperationCanceledException(ex.Message, ex, cancellationToken);
        }
        else if (clientLifetimeTokenSource.IsCancellationRequested)
        {
            throw new OperationCanceledException(&amp;quot;Client is disposed.&amp;quot;, ex, clientLifetimeTokenSource.Token);
        }
        else
        {
            throw new TimeoutException($&amp;quot;The request was canceled due to the configured Timeout of {Timeout.TotalSeconds} seconds elapsing.&amp;quot;, ex);
        }
    }
    finally
    {
        externalCancellation.Dispose();
        clientLifetimeCancellation.Dispose();
        if (timeoutTokenSource.TryReset())
        {
            timeoutTokenSourcePool.Return(timeoutTokenSource);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ということで、↑のものが最終形となりました。&lt;/p&gt;
&lt;p&gt;async/awaitで実装されている場合、Tokenのコールバックも一メソッド内で収まっているために挙動の見通しがだいぶ良くなります。async/awaitを封印してIValueTaskSourceを使った実装をする場合は、複数のコールバックを手で処理する必要があり、また登録、発火する箇所も複数箇所にちらばってしまうため、遥かに複雑性が増します。&lt;/p&gt;
&lt;p&gt;AlterNatsでは&lt;a href="https://neue.cc/2022/05/11_AlterNats.html"&gt;ハイパフォーマンスSocketプログラミングとして実装を解説した記事&lt;/a&gt;で、IValueTaskSourceをChannel（キュー）に詰め込むとしていますが、キャンセル時には&lt;a href="https://docs.microsoft.com/en-us/dotnet/api/system.threading.tasks.sources.manualresetvaluetasksourcecore-1"&gt;ManualResetValueTaskSourceCore&lt;/a&gt;のSetExceptionを叩き、正常完了時にはSetResultの前でTryResetからのReturnするという、まぁ基本的な流れは一緒です。少し異なるのは、キャンセルで発火するのはawaitに紐付けられた継続処理だけで、実体はキューに残り続けていて、取り出し時にキャンセル状況をチェックして、何もしないようにする。といったことでしょうか。状況が複雑化する分、レースコンディション起因のバグが入り込みやすくなってしまうので、CancellationTokenRegistrationの挙動をしっかり把握して実装する必要があります。&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;簡単かどうかでいうと、言われればなるほどそうですねーって感じですが、都度考えてやれって言われると結構難しいと思います。なので、こういうパターンなんですね、というのを頭に叩き込んでおくというのは重要だと思いますし、まぁとりあえず覚えてください。覚えれば、別にコード的に複雑というわけでもないので、易易と対処できるようになるはずです。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/StackExchange/StackExchange.Redis/"&gt;StackExchange.Redis&lt;/a&gt;も非同期メソッド、CancellationTokenを受け取ってなかったりしますし、パフォーマンスを追求しつつCancellationToken対応を入れるのは、かなり難しい問題だったりします。しかしこの .NET 6世代ではかなりメソッドも増えていて、やろうと思えばやりきれるだけの手札が揃っています。なので、パターン化して真正面から立ち向かいましょう……！&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Wed, 13 Jul 2022 00:00:00 +0900</pubDate>
      <a10:updated>2022-07-13T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2022/07/06_mvp-renew.html</guid>
      <link>https://neue.cc/2022/07/06_mvp-renew.html</link>
      <title>Microsoft MVP for Developer Technologies(C#)を再々々々々々々々々々々受賞しました</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2022/07/06_mvp-renew.html"&gt;Microsoft MVP for Developer Technologies(C#)を再々々々々々々々々々々受賞しました&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2022-07-06&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;12回目。一年ごとに再審査があって7月に一斉更新されるシステムになっていて、今年も継続しました。&lt;/p&gt;
&lt;p&gt;元々、私の活動はオンライン一人自己完結型なので、C#布教活動（？）的にコロナの影響は一切受けていないのですが、勉強会開催などコミュニティ構築型の人だと影響を受けやすいここ数年だったのではないかと思います。ただ、やはりアフターコロナで人との繋がりは極度に減ったし、人の入れ替わり、新しい台頭みたいなのも少なくなってきたなあ、というのが肌間ありますね。改めて、コミュニティを維持してくれている人のありがたさを知りました。というわけで、C#コミュニティ盛り上がっていって欲しい！のですが、私自身のスタンスは変わらず、OSSで世の中に存在感を出していくことだとは思っています。&lt;/p&gt;
&lt;p&gt;好不調の並が割と激しくて、ここ数ヶ月何もやってないわーみたいなときもよくあるのですが、年を通すと毎年3, 4個は新規にOSSをリリースしているし、既存ライブラリのメンテナンスやテコ入れ大型リニューアルも数個やっていたりするので、年間通して見ればかなりハイパフォーマンスで、それを10年以上継続してるんだから中々なんじゃないですか？と自画自賛したくなったり。&lt;/p&gt;
&lt;p&gt;そんなこんなの活動を続けてきた結果、CEDECという国内最大のゲーム業界のカンファレンスでも&lt;a href="https://cedec.cesa.or.jp/2022/event/awards"&gt;CEDEC AWARDS 2022&lt;/a&gt;のエンジニアリング部門で、「.NET/Unity開発の可能性を広げるオープンソースソフトウェアの提供」として優秀賞を受賞しました。C#は元々裏方で便利に使っていたというのはありましたが、表でもガンガン使っていけるよ、といったC#の存在感は、高めていけてるんじゃないかと思います。CysharpとしてOSSを通じてC#の可能性を広げるということがしっかり伝わってるというのがとても嬉しいですね！参加者投票で部門別最優秀賞が決まるらしいので、是非投票を……！&lt;/p&gt;
&lt;p&gt;また、今年は&lt;a href="https://neue.cc/2022/04/08_priconne-grandmasters.html"&gt;プリコネ！グランドマスターズのサーバー開発をCysharpが開発協力しました&lt;/a&gt;という記事で書きましたが、開発に関わっていた「プリコネ！グランドマスターズ」のリリースがありました。の事例発表をCEDEC 2022で&lt;a href="https://cedec.cesa.or.jp/2022/session/detail/80"&gt;C#によるクライアント/サーバーの開発言語統一がもたらす高効率な開発体制 ～プリコネ！グランドマスターズ開発事例～&lt;/a&gt;としてCygamesさんより発表があります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;クライアント/サーバーの開発言語統一によるメリット&lt;/li&gt;
&lt;li&gt;MagicOnion(gRPC)を利用したリアルタイムサーバー実装手法と具体例&lt;/li&gt;
&lt;li&gt;Blazorを使用したツールの開発例、開発プロジェクトおよびソリューション統合管理の手法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ということで、かなり面白い感じの内容になるのではないでしょうか、期待……！&lt;/p&gt;
&lt;p&gt;C#がエンタープライズ業界（とは）で強いというのは重々承知だしAzureもシェア高くめっちゃ使われてるんだよ、という話は分かりはするのですが、to Cやスタートアップ企業で積極的に使われる言語になって欲しい、というのがずーっとの願いで、私自身もそうした業界に身をおいて、実績で示し続けて来たと思いますし、これからも引き続き道を示せるようにしていきたいです。&lt;/p&gt;
&lt;p&gt;もちろん、ハイパフォーマンスなC#によって最前線での実力を見せていく、ということも変わらずに……！&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Wed, 06 Jul 2022 00:00:00 +0900</pubDate>
      <a10:updated>2022-07-06T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2022/05/11_AlterNats.html</guid>
      <link>https://neue.cc/2022/05/11_AlterNats.html</link>
      <title>AlterNats - ハイパフォーマンスな.NET PubSubクライアントと、その実装に見る.NET 6時代のSocketプログラミング最適化のTips、或いはMagicOnionを絡めたメタバース構築のアーキテクチャについて</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2022/05/11_AlterNats.html"&gt;AlterNats - ハイパフォーマンスな.NET PubSubクライアントと、その実装に見る.NET 6時代のSocketプログラミング最適化のTips、或いはMagicOnionを絡めたメタバース構築のアーキテクチャについて&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2022-05-11&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;タイトルはここぞとばかりに全盛りにしてみました！今回NATSの.NETクライアント実装としてAlterNatsというライブラリを新しく作成し、公開しました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Cysharp/AlterNats"&gt;github - Cysharp/AlterNats&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;公式の既存クライアントの3倍以上、StackExchange.RedisのPubSubと比較して5倍以上高速であり、通常のPubSubメソッドは全てゼロアロケーションです。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/164392256-46d09111-ec70-4cf3-b33d-38dc5d258455.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;そもそも&lt;a href="https://nats.io/"&gt;NATS&lt;/a&gt;とはなんぞやか、というと、クラウドネイティブなPubSubのミドルウェアです。&lt;a href="https://www.cncf.io/"&gt;Cloud Native Computing Foundation&lt;/a&gt;のincubating projectなので、それなりの知名度と実績はあります。&lt;/p&gt;
&lt;p&gt;PubSubというと、特にC#だと&lt;a href="https://redis.io/"&gt;Redis&lt;/a&gt;のPubSub機能で行うのが、&lt;a href="https://github.com/StackExchange/StackExchange.Redis"&gt;StackExchange.Redis&lt;/a&gt;という実績あるライブラリもあるし、AWSやAzure、GCPがマネージドサービスも用意しているしで、お手軽でいいのですが、盲目的にそれを使うのが良いのか少し疑問に思っていました。&lt;/p&gt;
&lt;p&gt;RedisはKVS的な使い方がメインであり、PubSubはどちらかというとオマケ機能であるため&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PubSub専用のモニタリングの欠如&lt;/li&gt;
&lt;li&gt;PubSub用のクラスタリング対応&lt;/li&gt;
&lt;li&gt;マネージドサービスでの価格体系のバランスの悪さ（PubSub特化ならメモリはあまりいらない）&lt;/li&gt;
&lt;li&gt;そもそものパフォーマンス&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;といった点が具体的な懸念です。そして、NATSはPubSub専用に特化されているため、そのためのシステムが豊富に組まれているし、性能も申し分なさそうに思えました。しいて欠点を言えばマネージドサービスが存在しないのがネックですが、純粋なPubSubとしての利用ならば永続化処理について考える必要がないので、ミドルウェアとしては運用しやすい部類にはいるのではないかと思っています。（NATS自体はNATS JetStreamという機能によってAt-least / exactly onceの保証のあるメッセージングの対応も可能ですが、そこに対応させるにはストレージが必要になる場合もあります）&lt;/p&gt;
&lt;p&gt;しかし調べていくうちに懸念となったのが公式クライアントである&lt;a href="https://github.com/nats-io/nats.net"&gt;nats.net&lt;/a&gt;で、あまり使いやすくないのですね。async/awaitにも対応していないし、古くさく、それどころかそもそも.NET的に奇妙に見えるAPIであり、そうなるとパフォーマンスに関しても疑問に思えてくる。&lt;/p&gt;
&lt;p&gt;何故そうなっているかの理由はReadMeにも明記されていて、メンテナンス性のためにGoクライアント(ちなみにNATS Server自体はGoで書かれている)と同じようなコードベースになっている、と。そのためC#的ではない部分が多々あるし、GoとC#ではパフォーマンスを出すための書き方が全く異なるので、あまり良い状況ではなさそう。&lt;/p&gt;
&lt;p&gt;それならば完全にC#に特化して独自に作ってしまうほうがいいだろうということで、作りました。公式クライアントと比べると全ての機能をサポートしているわけではない（JetStreamにも対応していないしLeaf Nodes運用で必須になるであろうTLSにも対応していません）のですが、PubSubのNATS Coreに特化して、まずは最高速を叩き出せるようにしました。PubSub利用する分には機能面での不足はないはずです。&lt;/p&gt;
&lt;p&gt;AlterNatsは公式じゃないAlternativeなNATSクライアントという意味です。まんまですね。割と語感が良いので命名的には結構気に入ってます。&lt;/p&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;APIは、&lt;code&gt;nats.net&lt;/code&gt;があまりにもC#っぽくなくややこしい、ということを踏まえて、シンプルに、簡単に、C#っぽく書けるように調整しました。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// create connection(default, connect to nats://localhost:4222)
await using var conn = new NatsConnection();

// for subscriber. await register to NATS server(not means await complete)
var subscription = await conn.SubscribeAsync&amp;lt;Person&amp;gt;(&amp;quot;foo&amp;quot;, x =&amp;gt;
{
    Console.WriteLine($&amp;quot;Received {x}&amp;quot;);
});

// for publisher.
await conn.PublishAsync(&amp;quot;foo&amp;quot;, new Person(30, &amp;quot;bar&amp;quot;));

// unsubscribe
subscription.Dipose();

// ---

public record Person(int Age, string Name);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Subscribeでhandlerを登録し、Publishでメッセージを飛ばす。データは全て自動でシリアライズされます（デフォルトではSystem.Text.Json、MessagePack for C#を用いたハイパフォーマンスなシリアライズも可能な拡張オプションも標準で用意してあります）&lt;/p&gt;
&lt;p&gt;別のURLへの接続や、認証のための設定などを行うNatsOptions/ConnectOptionsはイミュータブルです。そのため、with式で構築するやり方を取っています。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// Options can configure `with` operator
var options = NatsOptions.Default with
{
    Url = &amp;quot;nats://127.0.0.1:9999&amp;quot;,
    LoggerFactory = new MinimumConsoleLoggerFactory(LogLevel.Information),
    Serializer = new MessagePackNatsSerializer(),
    ConnectOptions = ConnectOptions.Default with
    {
        Echo = true,
        Username = &amp;quot;foo&amp;quot;,
        Password = &amp;quot;bar&amp;quot;,
    }
};

await using var conn = new NatsConnection(options);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;NATSには標準で結果を受け取るプロトコルも用意されています。サーバー間の簡易的なRPCとして使うと便利なところもあるのではないかと思います。これも&lt;code&gt;SubscribeRequestAsync&lt;/code&gt;/&lt;code&gt;RequestAsync&lt;/code&gt;という形で簡単に直感的に書けるようにしました（Request側は戻り値の型を指定する必要があるため、型指定が少しだけ冗長になります）&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// Server
await conn.SubscribeRequestAsync(&amp;quot;foobar&amp;quot;, (int x) =&amp;gt; $&amp;quot;Hello {x}&amp;quot;);

// Client(response: &amp;quot;Hello 100&amp;quot;)
var response = await conn.RequestAsync&amp;lt;int, string&amp;gt;(&amp;quot;foobar&amp;quot;, 100);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例では &lt;code&gt;await using&lt;/code&gt;ですぐに破棄してしまっていますが、基本的にはConnectionはシングルトンによる保持を推奨しています。staticな変数に詰めてもいいし、DIでシングルトンとして登録してしまってもいいでしょう。接続は明示的にConnectAsyncすることもできますが、接続されていない場合は自動で接続を開くようにもなっています。&lt;/p&gt;
&lt;p&gt;コネクションはスレッドセーフで、物理的にも一つのコネクションには一つの接続として繋がり、全てのコマンドは自動的に多重化されます。これにより裏側で自動的にバッチ化された高効率な通信を実現していますが、負荷状況に応じて複数のコネクションを貼った場合が良いケースもあります。AlterNatsではNatsConnectionPoolという複数コネクションを内包したコネクションも用意しています。また、クライアント側で水平シャーディングを行うためのNatsShardingConnectionもあるため、必要に応じて使い分けることが可能です。&lt;/p&gt;
&lt;p&gt;内部のロギングはMicrosoft.Extensions.Loggingで管理されています。&lt;code&gt;AlterNats.Hosting&lt;/code&gt;パッケージを使うと、Generic Hostと統合された形で適切なILoggerFactoryの設定と、シングルトンのサービス登録を行ってくれます。&lt;/p&gt;
&lt;p&gt;DIでの取り出しは直接NatsConnectionを使わずに、INatsCommandを渡すことで余計な操作（コネクションの切断など）が出来ないようになります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using AlterNats;

var builder = WebApplication.CreateBuilder(args);

// Register NatsConnectionPool, NatsConnection, INatsCommand to ServiceCollection
builder.Services.AddNats();

var app = builder.Build();

app.MapGet(&amp;quot;/subscribe&amp;quot;, (INatsCommand command) =&amp;gt; command.SubscribeAsync(&amp;quot;foo&amp;quot;, (int x) =&amp;gt; Console.WriteLine($&amp;quot;received {x}&amp;quot;)));
app.MapGet(&amp;quot;/publish&amp;quot;, (INatsCommand command) =&amp;gt; command.PublishAsync(&amp;quot;foo&amp;quot;, 99));

app.Run();
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;メタバースアーキテクチャ&lt;/h2&gt;
&lt;p&gt;Cysharpでは&lt;a href="https://github.com/Cysharp/MagicOnion"&gt;MagicOnion&lt;/a&gt;という .NET/Unity で使えるネットワークフレームワークを作っているわけですが、AlterNatsはこれと絡めることで、構成の幅を広げることができると考えています、というかむしろそのために作りました。&lt;/p&gt;
&lt;p&gt;クライアントにUnity、サーバーにMagicOnionがいるとして、サーバーが一台構成なら、平和です、繋げるだけですもの。開発の最初とかローカルでは楽なのでこの状態でもいいですね。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/164406771-58318153-c6a7-49c0-b3af-2b8389e2c9c1.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;しかし現実的にはサーバーは複数台になるので、そうなると色々なパターンが出てきます。よくあるのが、ロードバランサーを立ててそれぞれが別々のサーバーに繋がっているものを、更に後ろのPubSubサーバーを通して全サーバーに分配するパターン。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/164409016-b6e99f36-bdf7-47a9-80a6-558010963a36.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;これはNode.jsのリアルタイムフレームワークである&lt;a href="https://socket.io/"&gt;Socket.IO&lt;/a&gt;のRedisアダプター、それの.NET版である&lt;a href="https://docs.microsoft.com/ja-jp/aspnet/signalr/overview/getting-started/introduction-to-signalr"&gt;SignalR&lt;/a&gt;のRedisバックプレーン、もちろんMagicOnionにもあるのですが、このパターンはフレームワークでサポートされている場合も多いです。RedisのPubSubでできることはNATSでもできる、ということで、NATSでもできます。&lt;/p&gt;
&lt;p&gt;これは各サーバーをステートレスにできるのと、スケールしやすいので、Chatなどの実装にはやりやすい。欠点はステートを持ちにくいので、クライアントにステートがあり、データのやり取りをするタイプしか実装できません。サーバー側にステートを持ったゲームロジックは持たせずらいでしょう（ステートそのものは各サーバーで共有できないため）。また、PubSubを通すことによるオーバーヘッドも気になるところかもしれません。&lt;/p&gt;
&lt;p&gt;ロードバランサーを立てる場合、ロードバランサーのスティッキーセッションを活用して一台のサーバーに集約させるというパターンもあります（あるいは独自プロトコルでもリバースプロキシーを全面に立てて、カスタムなロジックで後ろの台を決定することもほぼ同様の話です）。ただし、色々なユーザーを同一サーバーに集約させたいようなケースでは、そのクッキーの発行誰がやるの、みたいなところは変わらずありますね。そこまで決めれるならIPアドレスを返して直繋ぎさせてしまってもいいんじゃないの？というのも真です。&lt;/p&gt;
&lt;p&gt;そうした外側に対象のIPアドレスを教えてくれるサービスがいて、先にそれに問い合わせてから、対象のサーバーへ繋ぎに行くパターンは、古典的ですが安定です。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/164417937-7d1adedb-36ee-453b-9ca6-9d41aded50af.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;この場合は同一サーバーに繋ぎにいくためにサーバー内にインメモリでフルにステートを持たせることが出来ますし、いわゆるゲームループを中で動かして処理するようなこともできます。また、画面のないヘッドレスUnityなどをホストして、クライアントそのものをサーバー上で動かすこともできますね。&lt;/p&gt;
&lt;p&gt;しかし、このパターンは素直なようでいて、実際VMだとやりやすいのですが、Kubernetesでやるのは難しかったりします。というのも、Kubernetesの場合は外部にIPが露出していないため、クラスター内の一台の特定サーバーに繋ぎにいくというのが難しい……！&lt;/p&gt;
&lt;p&gt;このような場合に最近よく活用されているのが&lt;a href="https://agones.dev/site/"&gt;Agones&lt;/a&gt;というGoogleが主導して作っているKubernetesの拡張で、まさにゲーム向きにKubernetesを使えるようにするためのシステムです。&lt;/p&gt;
&lt;p&gt;ただし、これはこれで難点があって、Agonesが想定しているゲームサーバーは1プロセス1ゲームセッション(まさにヘッドレスUnityのような)のホスティングであるため、1つのプロセスに多数のゲームセッションをホストさせるような使い方はそのままだと出来ません。コンテナなので、仮想的なプロセスを複数立ち上げればいいでしょ、というのが思想なのはわからなくもないのですが、現実的には軽量なゲームサーバー（それこそMagicOnionで組んだりする場合）なら、1プロセスに多数のゲームセッションを詰め込めれるし、これをコンテナで分けて立ち上げてしまうとコスト面では大きな差が出てしまいます。&lt;/p&gt;
&lt;p&gt;さて、Cysharpではステートフルな、特にゲームに向いたC#サーバーを構築するための補助ライブラリとして&lt;a href="https://github.com/Cysharp/LogicLooper"&gt;LogicLooper&lt;/a&gt;というゲームループを公開しています。このライブラリはこないだリリースした&lt;a href="https://neue.cc/2022/04/08_priconne-grandmasters.html"&gt;プリコネ！グランドマスターズ&lt;/a&gt;でも使用していますが、従来MagicOnionと同居して使っていたLogicLooperを、剥がしたアーキテクチャはどうだろうか、という提案があります。（実際のプリコネ！グランドマスターズのアーキテクチャはMagicOnionと同居し、リバースプロキシーを使った方式を採用しているので（↑の画像のものに近い）、この案とは異なります）&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/164417734-f2ec80e7-f12f-4a84-8252-ce28f9b53f05.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;パーツが増えて複雑になったように見えて、この構成には大きな利点があります。まず、同居しているものがなくなったので複雑になったようで実はシンプルになっています。それぞれがそれぞれの役割にフルに集中できるようになるため、パフォーマンスも良くなり、かつ、性能予測もしやすくなります。特にロジックをフルに回転させるLogicLooperがクライアントや接続数の影響を受けずに独立できているのは大きな利点です。&lt;/p&gt;
&lt;p&gt;ゲーム全体のステートはLogicLooper自体が管理するため、クライアントとの接続を直接受けているMagicOnion自体はステートレスな状態です。そのため、インフラ的にもロードバランサーの下にMagicOnionを並べるだけで済みますし、サーバー間の接続に伴う面倒事は全てNATSに押し付けられるため、インフラ管理自体はかなりシンプルな構成が取れます。&lt;/p&gt;
&lt;p&gt;また、MagicOnion自体はステートを持てるシステムであり、各ユーザーそれぞれのステートを持つのは容易です（サーバーを越えなければいい）。そこで、LogicLooperから届いたデータのうち、繋がってるユーザーに届ける必要がないデータは、MagicOnionの持つユーザーのステートを使ってカリング処理をして、そもそも転送しなかったり間引いたりして通信量を削減することで、ユーザーの体験が良くなります。&lt;/p&gt;
&lt;p&gt;各ユーザーから届くデータを使ったステート更新/データ送信に関しては、LogicLooperがゲームループ状になっているので、ループの間に溜まったデータをもとにしてバッチ処理を行えばいいでしょう。バッチ化というと、通信「回数」の削減のためのコマンドを単純にまとめあげて一斉送信するものと、内容を見て処理内容を縮小するパターンが考えられますが、LogicLooperを使ったアプローチでは後者を効率的に行なえます。前者のコマンドの一斉送信に関しては、AlterNatsが裏側で自動パイプライニング化としてまとめているので（後で詳しく説明します）、そこに関しても効率化されています。&lt;/p&gt;
&lt;p&gt;このアーキテクチャで気になるのがPubSub通信のオーバーヘッドですが、それに関しての解決策がAlterNatsで、究極的に高速なクライアントがあれば（さすがにインメモリには到底及ばないとはいえ）、そもそものクライアントとサーバーの間にもネットワークがいるわけで、経路のトータルで見れば実用的な範囲に収められる。という想定で作りました。&lt;/p&gt;
&lt;p&gt;ところで、そして究極的な利点は、全てC#で組めるということです。どういうことかというと、MagicOnionもLogicLooperも汎用的なC#フレームワークです。特別なプラグインを差し込んで処理するというわけではなくて、ふつーのC#コードをふつーに書くことで、それぞれの箇所に、アプリケーション固有のコードを仕込んでいくことができる。これが、本当の大きな利点です。専用のC++ミドルウェアを作って挟んで最適化できるぞ！などといったシステムは、素晴らしいことですが、専門性が高く再現性が低い。MagicOnionとLogicLooper、そしてAlterNatsを活用したこの構成なら、C#エンジニアなら誰でも（容易に）できる構成です。&lt;a href="https://cysharp.co.jp/"&gt;Cysharp&lt;/a&gt;のメッセージは「C#の可能性を切り開いていく」ですが、誰もが実現できる世界を作っていくというのが目標でもあります。&lt;/p&gt;
&lt;p&gt;なお、ワーカーとしてのLogicLooperを作るに&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/core/extensions/workers"&gt;Worker Service&lt;/a&gt;という.NET 6からのプロジェクトタイプが適切です。&lt;/p&gt;
&lt;h2&gt;ハイパフォーマンスSocketプログラミング&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Socket API&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C#で最も低レベルにネットワーク処理を扱えるクラスは&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/api/system.net.sockets.socket"&gt;Socket&lt;/a&gt;です。そして、非同期でハイパフォーマンスな処理を求めるなら&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/api/system.net.sockets.socketasynceventargs"&gt;SocketAsyncEventArgs&lt;/a&gt;をうまく再利用しながらコールバックを仕込む必要があります。&lt;/p&gt;
&lt;p&gt;これは非常に厄介で些か難易度も高いのですが、現在はasync/awaitの時代、ちゃんとawaitできる***Asyncメソッド郡が用意されています。しかし、使ってはいけないAPI、使ってはいけないオーバーロードも並んでいるので、その選別が必要です。SocketのAPIは歴史的事情もあり混沌としてしまっているのです……。&lt;/p&gt;
&lt;p&gt;使うべきAPIを分かりやすく見分ける手段があります。それは戻り値が &lt;code&gt;ValueTask&lt;/code&gt; のものを選ぶことです。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public ValueTask ConnectAsync(string host, int port, CancellationToken cancellationToken)
public ValueTask&amp;lt;int&amp;gt; ReceiveAsync(Memory&amp;lt;byte&amp;gt; buffer, SocketFlags socketFlags, CancellationToken cancellationToken)
public ValueTask&amp;lt;int&amp;gt; SendAsync(ReadOnlyMemory&amp;lt;byte&amp;gt; buffer, SocketFlags socketFlags, CancellationToken cancellationToken))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;オーバーロードにはTask返しのものもあるので、気をつけてください。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// これらのAPIは使ってはいけない
public Task ConnectAsync(string host, int port)
public Task&amp;lt;int&amp;gt; ReceiveAsync(ArraySegment&amp;lt;byte&amp;gt; buffer, SocketFlags socketFlags)
public Task&amp;lt;int&amp;gt; SendAsync(ArraySegment&amp;lt;byte&amp;gt; buffer, SocketFlags socketFlags)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ValueTask返しのAPIは内部的には &lt;code&gt;AwaitableSocketAsyncEventArgs&lt;/code&gt; というものがValueTaskの中身になるようになっていて、これがいい感じに使いまわされる(awaitされると内部に戻るようになっている）ことで、Taskのアロケーションもなく効率的な非同期処理を実現しています。&lt;code&gt;SocketAsyncEventArgs&lt;/code&gt;の使いにくさとは雲泥の差なので、これは非常にお薦めできます。&lt;/p&gt;
&lt;p&gt;また、同期APIはSpanを受け取れるのですが、非同期APIは（ステートをヒープに置く都合上）Memoryしか受け取れないことには注意してください。これはSocketプログラミングに限らず非同期系APIにおける一般的な話で、全体的に上手く組んでおかないと、Spanが使えないことが障壁になることがあります。必ず、Memoryで取り回せるようにしておきましょう。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;テキストプロトコルのバイナリコード判定&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://docs.nats.io/reference/reference-protocols/nats-protocol"&gt;NATSのプロトコル&lt;/a&gt;はテキストプロトコルになっていて、文字列処理で簡単に切り出すことができます。実際これはStreamReaderを使うことで簡単にプロトコルの実装ができます。ReadLineするだけですから。しかし、ネットワークに流れるのは(UTF8)バイナリデータであり、文字列化は無駄なオーバーヘッドとなるため、パフォーマンスを求めるなら、バイナリデータのまま処理する必要があります。&lt;/p&gt;
&lt;p&gt;NATSでは先頭の文字列(&lt;code&gt;INFO&lt;/code&gt;, &lt;code&gt;MSG&lt;/code&gt;, &lt;code&gt;PING&lt;/code&gt;, &lt;code&gt;+OK&lt;/code&gt;, &lt;code&gt;-ERR&lt;/code&gt;など)によって流れてくるメッセージの種類が判定できます。文字列処理で空白でSplitして if (msg == &amp;quot;INFO&amp;quot;) などとすればめちゃくちゃ簡単ですが、先にも言った通り文字列変換は意地でも通しません。INFOは[73, 78, 70, 79]なので、Slice(0, 4).SequenceEqual で判定するのは悪くないでしょう。&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/api/system.memoryextensions.sequenceequal"&gt;&lt;code&gt;ReadOnlySpan&amp;lt;byte&amp;gt;&lt;/code&gt;のSequenceEqual&lt;/a&gt;はめちゃくちゃ最適化されていて、長いものであれば必要であればSIMDとかも使って高速に同値判定します。LINQのSequenceEqualとは別物です！&lt;/p&gt;
&lt;p&gt;しかし、もっと欲張って見てみましょう、プロトコルの識別子はサーバーから送られてくるものは全て4文字以内に収まっています。つまり、これはIntに変換しやすい状態です！というわけで、AlterNatsのメッセージ種判定コードはこうなっています。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// msg = ReadOnlySpan&amp;lt;byte&amp;gt;
if(Unsafe.ReadUnaligned&amp;lt;int&amp;gt;(ref MemoryMarshal.GetReference&amp;lt;byte&amp;gt;(msg)) == 1330007625) // INFO
{
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これ以上速い判定はできないと思うので、理論上最速ということでいいでしょう。3文字の命令も、直後に必ずスペースや改行が来るので、それを含めた以下のような定数を使って判定に回しています。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;internal static class ServerOpCodes
{
    public const int Info = 1330007625;  // Encoding.ASCII.GetBytes(&amp;quot;INFO&amp;quot;) |&amp;gt; MemoryMarshal.Read&amp;lt;int&amp;gt;
    public const int Msg = 541545293;    // Encoding.ASCII.GetBytes(&amp;quot;MSG &amp;quot;) |&amp;gt; MemoryMarshal.Read&amp;lt;int&amp;gt;
    public const int Ping = 1196312912;  // Encoding.ASCII.GetBytes(&amp;quot;PING&amp;quot;) |&amp;gt; MemoryMarshal.Read&amp;lt;int&amp;gt;
    public const int Pong = 1196314448;  // Encoding.ASCII.GetBytes(&amp;quot;PONG&amp;quot;) |&amp;gt; MemoryMarshal.Read&amp;lt;int&amp;gt;
    public const int Ok = 223039275;     // Encoding.ASCII.GetBytes(&amp;quot;+OK\r&amp;quot;) |&amp;gt; MemoryMarshal.Read&amp;lt;int&amp;gt;
    public const int Error = 1381123373; // Encoding.ASCII.GetBytes(&amp;quot;-ERR&amp;quot;) |&amp;gt; MemoryMarshal.Read&amp;lt;int&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;バイナリプロトコルなら特に何のひねりも必要なく実装できるので、バイナリプロトコルのほうが実装者に優しくて好きです……。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;自動パイプライニング&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;NATSプロトコルの書き込み、読み込みは全てパイプライン（バッチ）化されています。これは&lt;a href="https://redis.io/docs/manual/pipelining/"&gt;RedisのPipelining&lt;/a&gt;の解説が分かりやすいですが、例えばメッセージを3つ送るのに、一つずつ送って、都度応答を待っていると、送受信における多数の往復がボトルネックになります。&lt;/p&gt;
&lt;p&gt;メッセージの送信において、AlterNatsは自動でパイプライン化しています。&lt;a href="https://devblogs.microsoft.com/dotnet/an-introduction-to-system-threading-channels/"&gt;System.Threading.Channels&lt;/a&gt;を用いてメッセージは一度キューに詰め込まれ、書き込み用のループが一斉に取り出してバッチ化します。ネットワーク送信が完了したら、再び送信処理待ち中に溜め込まれたメッセージを一括処理していく、という書き込みループのアプローチを取ることで、最高速の書き込み処理を実現しました。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/167585601-5634057e-812d-4b60-ab5b-61d9c8c37063.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;ラウンドトリップタイムの話だけではなく（そもそもNATSの場合はPublish側とSubscribe側が独立しているので応答待ちというのもないのですが）、システムコールの連続した呼び出し回数を削減できるという点でも効果が高いです。&lt;/p&gt;
&lt;p&gt;なお、.NET最高速ロガーである&lt;a href="https://github.com/Cysharp/ZLogger/"&gt;ZLogger&lt;/a&gt;でも同じアプローチを取っています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一つのオブジェクトに機能を盛る&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Channelに詰め込む都合上、データを書き込みメッセージオブジェクトに入れてヒープに保持しておく必要があります。また、書き込み完了まで待つ非同期メソッドのためのPromiseも必要です。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;await connection.PublishAsync(value);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;こうしたAPIを効率よく実装するために、どうしても確保する必要のある一つのメッセージオブジェクト（内部的にはCommandと命名されている）に、あらゆる機能を同居して詰め込みましょう。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;class AsyncPublishCommand&amp;lt;T&amp;gt; : ICommand, IValueTaskSource, IThreadPoolWorkItem, IObjectPoolNode&amp;lt;AsyncPublishCommand&amp;lt;T&amp;gt;&amp;gt;

internal interface ICommand
{
    void Write(ProtocolWriter writer);
}

internal interface IObjectPoolNode&amp;lt;T&amp;gt;
{
    ref T? NextNode { get; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このオブジェクト(&lt;code&gt;AsyncPublishCommand&amp;lt;T&amp;gt;&lt;/code&gt;)自体は、T dataを保持して、Socketにバイナリデータとして書き込むための役割(&lt;code&gt;ICommand&lt;/code&gt;)をまずは持っています。&lt;/p&gt;
&lt;p&gt;それに加えて&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/api/system.threading.tasks.sources.ivaluetasksource"&gt;IValueTaskSource&lt;/a&gt;であることにより、このオブジェクト自身がValueTaskになります。&lt;/p&gt;
&lt;p&gt;そしてawait時のコールバックとして、書き込みループを阻害しないためにThreadPoolに流す必要があります。そこで従来の&lt;code&gt;ThreadPool.QueueUserWorkItem(callback)&lt;/code&gt;を使うと、内部的には &lt;code&gt;ThreadPoolWorkItem&lt;/code&gt; を生成してキューに詰め込むため、余計なアロケーションがあります。 .NET Core 3.0から&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/api/system.threading.ithreadpoolworkitem"&gt;IThreadPoolWorkItem&lt;/a&gt;を実装することで、内部の&lt;code&gt;ThreadPoolWorkItem&lt;/code&gt;の生成をなくすことができます。&lt;/p&gt;
&lt;p&gt;最後に、同居させることで必要なオブジェクトが1つになりましたが、その1つをプーリングしてゼロアロケーション化します。オブジェクトプールは&lt;code&gt;ConcurrentQueue&amp;lt;T&amp;gt;&lt;/code&gt;などを使うと簡単に実装できますが、自分自身をStackのNodeにすることで、配列を確保しないで済むようにしています。また、Nodeの出し入れに関しては、今回のキャッシュの実装では正確に取り出せる必要性はないため、lockは使わず、マルチスレッドで競合が発生した場合はキャッシュミス扱いにして新規生成するようにしています。これはオブジェクトプーリングにおける性能バランスとしては、良いチョイスだと考えています。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;internal sealed class ObjectPool&amp;lt;T&amp;gt;
    where T : class, IObjectPoolNode&amp;lt;T&amp;gt;
{
    int gate;
    int size;
    T? root;
    readonly int limit;

    public ObjectPool(int limit)
    {
        this.limit = limit;
    }

    public int Size =&amp;gt; size;

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryPop([NotNullWhen(true)] out T? result)
    {
        // Instead of lock, use CompareExchange gate.
        // In a worst case, missed cached object(create new one) but it's not a big deal.
        if (Interlocked.CompareExchange(ref gate, 1, 0) == 0)
        {
            var v = root;
            if (!(v is null))
            {
                ref var nextNode = ref v.NextNode;
                root = nextNode;
                nextNode = null;
                size--;
                result = v;
                Volatile.Write(ref gate, 0);
                return true;
            }

            Volatile.Write(ref gate, 0);
        }
        result = default;
        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryPush(T item)
    {
        if (Interlocked.CompareExchange(ref gate, 1, 0) == 0)
        {
            if (size &amp;lt; limit)
            {
                item.NextNode = root;
                root = item;
                size++;
                Volatile.Write(ref gate, 0);
                return true;
            }
            else
            {
                Volatile.Write(ref gate, 0);
            }
        }
        return false;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Zero-copy Architecture&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Publish/Subscribeするデータは通常、C#の型をJSONやMessagePackなどにシリアライズしたものを流します。この場合、どうしてもbyte[]でやり取りすることが多くなります、例えばStackExchange.Redisの&lt;code&gt;RedisValue&lt;/code&gt;の中身は実質byte[]で、送信にせよ受信にせよ、byte[]を生成して保持することになります。&lt;/p&gt;
&lt;p&gt;これを避けるために、ArrayPoolから出し入れしてごまかしてゼロアロケーションにする、みたいなのはありがちではありますが、それでもコピーのコストが発生していることには代わりありません。ゼロアロケーションは当然目指すところですが、ゼロコピーに向けても頑張りましょう！&lt;/p&gt;
&lt;p&gt;AlterNatsのシリアライザーはWriteに&lt;code&gt;IBufferWriter&amp;lt;byte&amp;gt;&lt;/code&gt;, Readに&lt;code&gt;ReadOnlySequence&amp;lt;byte&amp;gt;&lt;/code&gt;を要求します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public interface INatsSerializer
{
    int Serialize&amp;lt;T&amp;gt;(ICountableBufferWriter bufferWriter, T? value);
    T? Deserialize&amp;lt;T&amp;gt;(in ReadOnlySequence&amp;lt;byte&amp;gt; buffer);
}

public interface ICountableBufferWriter : IBufferWriter&amp;lt;byte&amp;gt;
{
    int WrittenCount { get; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// 例えばMessagePack for C#を使う場合の実装
public class MessagePackNatsSerializer : INatsSerializer
{
    public int Serialize&amp;lt;T&amp;gt;(ICountableBufferWriter bufferWriter, T? value)
    {
        var before = bufferWriter.WrittenCount;
        MessagePackSerializer.Serialize(bufferWriter, value);
        return bufferWriter.WrittenCount - before;
    }

    public T? Deserialize&amp;lt;T&amp;gt;(in ReadOnlySequence&amp;lt;byte&amp;gt; buffer)
    {
        return MessagePackSerializer.Deserialize&amp;lt;T&amp;gt;(buffer);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;System.Text.JsonやMessagePack for C#のSerializeメソッドには&lt;code&gt;IBufferWriter&amp;lt;byte&amp;gt;&lt;/code&gt;を受け取るオーバーロードが用意されています。&lt;code&gt;IBufferWriter&amp;lt;byte&amp;gt;&lt;/code&gt;経由でSocketに書き込むために用意しているバッファーにシリアライザが直接アクセスし、書き込みすることで、Socketとシリアライザ間でのbyte[]のコピーをなくします。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/167587816-c50b0af3-edaa-4a2a-b536-67aed0a5f908.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;Read側では、&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/api/system.buffers.readonlysequence-1"&gt;&lt;code&gt;ReadOnlySequence&amp;lt;byte&amp;gt;&lt;/code&gt;&lt;/a&gt;を要求します。Socketからのデータの受信は断片的な場合も多く、それをバッファのコピーと拡大ではなく、連続した複数のバッファを一塊として扱うことでゼロコピーで処理するために用意されたクラスが&lt;code&gt;ReadOnlySequence&amp;lt;T&amp;gt;&lt;/code&gt;です。&lt;/p&gt;
&lt;p&gt;「ハイパフォーマンスの I/O をより簡単に行えるように設計されたライブラリ」である&lt;a href="https://docs.microsoft.com/ja-jp/dotnet/standard/io/pipelines"&gt;System.IO.Pipelines&lt;/a&gt;の&lt;code&gt;PipeReader&lt;/code&gt;で読み取ったものを扱うのが、よくあるパターンとなります。ただし、AlterNatsではPipelinesは使わずに独自の読み取り機構と&lt;code&gt;ReadOnlySequence&amp;lt;byte&amp;gt;&lt;/code&gt;を使用しました。&lt;/p&gt;
&lt;p&gt;System.Text.JsonやMessagePack for C#のSerializeメソッドには&lt;code&gt;IBufferWriter&amp;lt;byte&amp;gt;&lt;/code&gt;を受け取るオーバーロードが用意されているため、それを直接渡すことができます。つまり、現代的なシリアライザは&lt;code&gt;IBufferWriter&amp;lt;byte&amp;gt;&lt;/code&gt;と&lt;code&gt;ReadOnlySequence&amp;lt;byte&amp;gt;&lt;/code&gt;のサポートは必須です。これらをサポートしていないシリアライザはそれだけで失格です。&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;プロトコルが単純で少ないのでちゃちゃっと作れると思いきや、まあ確かに雑にTcpClientとStreamReader/Writerでやれば秒殺だったのですが、プロトコルって量産部分でしかないので、そこがどんだけ量少なかろうと、基盤の作り込みは相応に必要で、普通に割と時間かかってしまった、のですが結構良い感じに作れたと思います。コード的にも例によって色々な工夫が盛り込まれていますので、是非ソースコードも読んでみてください。&lt;/p&gt;
&lt;p&gt;クライアント側の実装によってパフォーマンスが大きく違うというのはシリアライザでもよくあり経験したことですが、NATSのパフォーマンスを論じるにあたって、その言語のクライアントは大丈夫ですか？というところがあり、そして、C#は大丈夫ですよ、と言えるものになっていると思います。&lt;/p&gt;
&lt;p&gt;NATSの活用に関してはこれからやっていくので実例あるんですか？とか言われると知らんがな、というところですが（ところでMagicOnionはこないだの&lt;a href="https://neue.cc/2022/04/08_priconne-grandmasters.html"&gt;プリコネ！グランドマスターズ&lt;/a&gt;だけではなく最近特によくあるので、実例めっちゃあります）、これから色々使っていこうかなと思っているので、まぁ是非AlterNatsと共に試してみてください。&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Wed, 11 May 2022 00:00:00 +0900</pubDate>
      <a10:updated>2022-05-11T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2022/04/08_priconne-grandmasters.html</guid>
      <link>https://neue.cc/2022/04/08_priconne-grandmasters.html</link>
      <title>プリコネ！グランドマスターズのサーバー開発をCysharpが開発協力しました</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2022/04/08_priconne-grandmasters.html"&gt;プリコネ！グランドマスターズのサーバー開発をCysharpが開発協力しました&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2022-04-08&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;Cygamesから4/1にリリースされた&lt;a href="https://priconne-grandmasters.jp/"&gt;プリコネ！グランドマスターズ&lt;/a&gt;のサーバーサイドとインフラ開発をCysharpが開発協力しました。リアルタイム通信を含むオートバトラー系のゲームです。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/162343388-734840a1-4b7d-467b-902c-1e06e527d208.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/162401207-d9e2bceb-6b94-435c-8e63-d96ce62cf97b.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;Cysharpはサーバー側のアーキテクチャ設計と基盤実装、クラウドインフラ構築、一部サーバーロジック実装を担いました。リアルタイム通信部分だけではなくてAPIサーバーからマッチメイキング、インフラまで、構成されるあらゆる要素がC#で作られています！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;クライアント (Unity)&lt;/li&gt;
&lt;li&gt;API サーバー(MagicOnion)&lt;/li&gt;
&lt;li&gt;バトルエンジンサーバー (リアルタイム通信; MagicOnion, LogicLooper)&lt;/li&gt;
&lt;li&gt;マッチメイキングサーバー (リアルタイム通信; MagicOnion)&lt;/li&gt;
&lt;li&gt;バッチ(ConsoleAppFramework)&lt;/li&gt;
&lt;li&gt;デバッグ機能サーバー (Web; Blazor)&lt;/li&gt;
&lt;li&gt;管理画面サーバー (Web; Blazor)&lt;/li&gt;
&lt;li&gt;インフラ (Infrastructure as Code; &lt;a href="https://www.pulumi.com/"&gt;Pulumi + C#&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;サーバー側アプリケーションは.NET 6をKubernetes上で動かしています。Unityクライアント側でも&lt;a href="https://github.com/Cysharp/"&gt;CysharpのOSS&lt;/a&gt;は7つクレジットされていますが、表記のないサーバー側専用のものを合わせたら10個以上使用しています。ここまで徹頭徹尾C#でやっているプロジェクトは世界的にも珍しいんじゃないでしょうか。中心的に活躍しているのは&lt;a href="https://github.com/Cysharp/MagicOnion/"&gt;MagicOnion&lt;/a&gt;ですが、サーバーサイドゲームループのための&lt;a href="https://github.com/Cysharp/LogicLooper"&gt;LogicLooper&lt;/a&gt;、負荷テストのための&lt;a href="https://github.com/Cysharp/DFrame/"&gt;DFrame&lt;/a&gt;なども実戦投入されて、成果を出しました。サーバートラブルも特になく、しっかり安定稼働しました。という事後報告です。そして今日、もとより期間限定公開ということで一週間の配信期間が終了しました。&lt;/p&gt;
&lt;p&gt;アーキテクチャ含めの詳しい話は後日どこかでできるといいですね……！今回、私は実装者としては裏方というか監督というかという感じなので、発表する際は別の人にお任せします……！&lt;/p&gt;
&lt;p&gt;C#でのサーバー構成をまた一つ実証できて、参考になって欲しいのですが（そしてC#採用事例増えて欲しい！）、こういった構成を、Cysharpだから出来る、のではなくて、誰もが実現できる環境にしていきたいとも思っています。重要なパーツは積極的にOSS化していますし、実績も着実に積み重ねられています。が、しかしまだまだ難しい面も数多くあるということは認識しています。かといってmBaaSの方向でやっていくべき、とは思わないんですね。ロジックはゲームの差別化のための重要な要素であり、サーバーサイドでも書くべきで。だから注力しているのは書きやすくするための環境で、そのために足りないものを提供していっています。&lt;/p&gt;
&lt;p&gt;ところでサーバーとクライアントの繋ぎ、あるいはサーバーとサーバーの繋ぎが、MagicOnionだけだと複雑で難しくなってしまうところがあるな、と思っていまして、ちょうど先月-今月はメッセージングライブラリの開発に注力しています。&lt;a href="https://github.com/Cysharp/AlterNats"&gt;AlterNats&lt;/a&gt;という名前でPreview公開していますが、これを挟むと色々改善されるんじゃないかなあ、と思っているので、少々お待ち下さい。そんな感じに、常により最善のC#アーキテクチャの探究と、OSSを通じた共有をまだまだ続けていきます。&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Fri, 08 Apr 2022 00:00:00 +0900</pubDate>
      <a10:updated>2022-04-08T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2022/02/28_DFrame.html</guid>
      <link>https://neue.cc/2022/02/28_DFrame.html</link>
      <title>DFrame - C#でテストシナリオを書く分散負荷テストフレームワーク</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2022/02/28_DFrame.html"&gt;DFrame - C#でテストシナリオを書く分散負荷テストフレームワーク&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2022-02-28&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;と、いうものをリリースしました。Web UIとなるDFrame.Controllerと、負荷テストシナリオをC#で書くDFrame.Workerの組み合わせで成り立っていて、DFrame.Workerをウェブ上のクラスターに配置することで(Controllerと接続するただの常駐アプリなので、配置先はオンプレでもVMでもコンテナでもKuberenetesでもなんでもいい)、1から数千のワーカーが連動して、大量のリクエストを発生させます。また、テストシナリオをプレーンなC#で記述できるということは、HTTP/1だけではなく、あらゆる種類の通信をカバーできます。WebSocket、HTTP/2、gRPC、MagicOnion、あるいはPhotonや自作のTCPトランスポート、更にはRedisやデータベースなどが対象になります。&lt;/p&gt;
&lt;p&gt;DFrame.Workerは通常の.NETの他に、Unityにも対応しています！つまり、大量のHeadless Unity、あるいはデバイスファームに配置することで、Unityでしか動かないような独自通信フレームワークであっても負荷テストをかけることが可能です。&lt;/p&gt;
&lt;p&gt;また、あまり注目されていませんが負荷テストツールにもパフォーマンスの違いは「かなり」あり、性能の良さは重要で、そこのところにもかなりチューニングしました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Cysharp/DFrame/"&gt;github - Cysharp/DFrame&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/155904375-084a199b-a473-4bc6-8362-009d214bd009.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;Web UI(DFrame.Controller)はBlazor Serverで作られていて、分散ワーカーとの通信はMagicOnionで行っています。自動化のためのWeb APIの口もあるため、Blazor Server, ASP.NET Minimum API, MagicOnionのキメラ同居なアーキテクチャでC#でフル活用なのが設計的にも面白いポイントです。&lt;/p&gt;
&lt;h2&gt;C#で負荷テストシナリオを書く意義&lt;/h2&gt;
&lt;p&gt;負荷テストフレームワークは世の中に山のようにあります。代表的なものでも&lt;a href="https://httpd.apache.org/docs/2.4/programs/ab.html"&gt;ab&lt;/a&gt;, &lt;a href="https://jmeter.apache.org/"&gt;jMeter&lt;/a&gt;, &lt;a href="https://k6.io/"&gt;k6&lt;/a&gt;, &lt;a href="https://www.artillery.io/"&gt;Artillery&lt;/a&gt;, &lt;a href="https://gatling.io/"&gt;Gatling&lt;/a&gt;, &lt;a href="https://github.com/wg/wrk"&gt;wrk&lt;/a&gt;, &lt;a href="https://github.com/codesenberg/bombardier"&gt;bombardier&lt;/a&gt;, &lt;a href="https://locust.io/"&gt;Locust&lt;/a&gt;、k6やArtillery、GatlingなどはSaaSとしても提供していますし、クラウドサービス側も、&lt;a href="https://azure.microsoft.com/ja-jp/services/load-testing/"&gt;Azure Load Testing(Managed jMeter)&lt;/a&gt;のようなマネージドサービスを出していますし、.NETでも&lt;a href="https://github.com/dotnet/crank"&gt;dotnet/crank&lt;/a&gt;というものが存在していたりします。&lt;/p&gt;
&lt;p&gt;DFrameはこの中でいうとアーキテクチャ含めLocustに近い(Controller-Worker構成やWebUIなど)のですが、その特徴の中で重要な点として挙げられているのが、シナリオをコードで書けること、です。よくわからんUIで設定させたり、複雑怪奇なXMLやYAMLやJSON書かせたりせず、プレーンなコードで書ける。これが大事。LocustはPythonですが、他にk6はJavaScriptで書けるようになっています。&lt;/p&gt;
&lt;p&gt;じゃあLocustでいいじゃん、k6でいいじゃん、という話になるのですが、C#で書きたいんですね、シナリオを。これは別にただ単に自分の好きな言語で書きたいからというわけではなくて、サーバーあるいはクライアント言語と負荷試験シナリオ作成言語は同一のものであるべきだからです。例えばUnityのゲームを開発している場合（サーバーサイドの言語は何でもいい）、UnityのゲームはC#で記述されていますが、その場合C#でテストシナリオが書けるのなら&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最初からクライアントSDK(エンドポイントと型付きのRequest/Response)に相当するものがある&lt;/li&gt;
&lt;li&gt;クライアントの実装と完全に等しいのでゲームのドメインロジックが最初からある&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;となります。それによりテストシナリオの記述の手間を大幅に削減できます。もちろん、Unity依存の部分を引き剥がすなどの追加の作業は必要ですが、完全に書き起こすなどといった無駄は発生しません。もしPythonでもJavaScriptでもLuaでも、とにかく異なる言語である場合は、比較にならないほどに作業量が膨大になってきます。&lt;/p&gt;
&lt;p&gt;そして実際のクライアントコードとある程度共通になることで、サーバー/クライアント側の変化への追随が用意になります。それにより一回のリリースのための負荷テストではなく、継続的な負荷テスト環境を作っていけます。&lt;/p&gt;
&lt;p&gt;また、プレーンなC#で記述できることで、冒頭にも書きましたがあらゆる通信の種類をカバーできるのは、通信プロトコルが多様化している昨今、大きな利点となります。&lt;/p&gt;
&lt;h2&gt;DFrameApp.Run&lt;/h2&gt;
&lt;p&gt;NuGetからDFrameをパッケージ参照したうえで、一行で起動します。テストシナリオ(Workload)の記述の行数もありますが、それでもこれだけで。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using DFrame;

DFrameApp.Run(7312, 7313); // WebUI:7312, WorkerListen:7313

public class SampleWorkload : Workload
{
    public override async Task ExecuteAsync(WorkloadContext context)
    {
        Console.WriteLine($&amp;quot;Hello {context.WorkloadId}&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これで &lt;code&gt;http://localhost:7312&lt;/code&gt; をブラウザで開けば、&lt;code&gt;SampleWorkload&lt;/code&gt;がいます。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/155892546-c00f1554-0e2c-4e11-acdd-f0d9be9c40c9.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;と、いうわけで、WorkloadのExecuteAsyncにコードを書くのが基本です。ExecuteAsync前の準備用としてSetupAsync、後始末としてTeardownAsyncもあります。単純なgRPCのテストを書くとこなります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class GrpcTest : Workload
{
    GrpcChannel? channel;
    Greeter.GreeterClient? client;

    public override async Task SetupAsync(WorkloadContext context)
    {
        channel = GrpcChannel.ForAddress(&amp;quot;http://localhost:5027&amp;quot;);
        client = new Greeter.GreeterClient(channel);
    }

    public override async Task ExecuteAsync(WorkloadContext context)
    {
        await client!.SayHelloAsync(new HelloRequest(), cancellationToken: context.CancellationToken);
    }

    public override async Task TeardownAsync(WorkloadContext context)
    {
        if (channel != null)
        {
            await channel.ShutdownAsync();
            channel.Dispose();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Concurrencyの数だけWorkloadが生成されて、Total Request / Workers / Concurrencyの数だけExecuteAsyncが実行されます。コードで書くと言っても別にそう複雑なこともなく、よくわからんDSLで書くわけでもないので、むしろ(C#が書けるなら)とても書きやすいでしょう。中身も見てのとおり単純なので、gRPCでもMagicOnionでも何でも実行できます。&lt;/p&gt;
&lt;p&gt;引数を受け取ることも可能なので、任意のURLを渡すようなものも作れます。コンストラクタでは、パラメーター、あるいはDIでインジェクトしたインスタンスを受け取れます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using DFrame;
using Microsoft.Extensions.DependencyInjection;

// use builder can configure services, logging, configuration, etc.
var builder = DFrameApp.CreateBuilder(7312, 7313);
builder.ConfigureServices(services =&amp;gt;
{
    services.AddSingleton&amp;lt;HttpClient&amp;gt;();
});
await builder.RunAsync();

public class HttpGetString : Workload
{
    readonly HttpClient httpClient;
    readonly string url;

    // HttpClient is from DI, URL is passed from Web UI
    public HttpGetString(HttpClient httpClient, string url)
    {
        this.httpClient = httpClient;
        this.url = url;
    }

    public override async Task ExecuteAsync(WorkloadContext context)
    {
        await httpClient.GetStringAsync(url, context.CancellationToken);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/155893829-fc9f5e9d-fb05-4bcc-b8ee-6067be674b51.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;WebUI画面にString urlの入力箇所が現れて、好きなURLを叩き込むことができるようになりました。&lt;/p&gt;
&lt;p&gt;なお、単純なHTTPのGET/POST/PUT/DELETEをテストしたいという場合は、IncludesDefaultHttpWorkloadを有効にしてもらうと、内蔵のパラメーターを受け取るWorkloadが追加されます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using DFrame;

var builder = DFrameApp.CreateBuilder(7312, 7313);
builder.ConfigureWorker(x =&amp;gt;
{
    x.IncludesDefaultHttpWorkload = true;
});
builder.Run();
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;分散テスト&lt;/h2&gt;
&lt;p&gt;Workerは起動時に指定したControllerのアドレスにHTTP/2(MagicOnion/gRPC)で繋ぎに行って、常駐します。という普通の（？）アプリケーションなので、ウェブサーバーを分散させるのと同様に複数のWorkerを立ち上げてもらえれば、自動的に繋がります。&lt;/p&gt;
&lt;p&gt;構成としては、以下の画像のようにControllerとWorkerのプロジェクトを分けるのが正当派（？）ですが&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/154921606-b9955331-1d15-4c4f-a769-faeb61b13872.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;同居させてしまって、起動時のコマンドライン引数でどちらかのモード（あるいは両方）が起動するようにすることも、ローカルでの開発がしやすくなるのでお薦めです。 &lt;code&gt;DFrameApp.CreateBuilder&lt;/code&gt; にはそのための補助的な機構が用意されています。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using DFrame;

var builder = DFrameApp.CreateBuilder(5555, 5556); // portWeb, portListenWorker

if (args.Length == 0)
{
    // local, run both(host WebUI on http://localhost:portWeb)
    await builder.RunAsync();
}
else if (args[0] == &amp;quot;controller&amp;quot;)
{
    // listen http://*:portWeb as WebUI and http://*:portListenWorker as Worker listen gRPC
    await builder.RunControllerAsync();
}
else if (args[0] == &amp;quot;worker&amp;quot;)
{
    // worker connect to (controller) address.
    // You can also configure from appsettings.json via builder.ConfigureWorker((ctx, options) =&amp;gt; { options.ControllerAddress = &amp;quot;&amp;quot; });
    await builder.RunWorkerAsync(&amp;quot;http://foobar:5556&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ローカルでWorkerの.exeを複数実行する、とかでも手元でとりあえずのWorker connectionsが増える様は確認できます。&lt;/p&gt;
&lt;p&gt;Workerを増やすと表がにぎやかになって楽しい。実行するWorkerの数はスライダーで調整できるので、各種パラメーターを台数1で調整したあとに、徐々に実行Workerを増やしていく、といった使い方も可能です。また、その辺を自動でやってくれるRepeatモード(TotalRequestとWorkerを完了後に指定数増やして繰り返す)も用意しました。jMeterでいうところのRamp-Upの代わりに使えればいいかな、という想定でもあります。&lt;/p&gt;
&lt;p&gt;アーキテクチャ的に最初から分散前提で作られているというのもあり、増やしても性能が劣化しない、リニアに性能が向上していくように作りました。Controllerは単一なのでスケールしないのですが、なるべく多くのWorkerをぶら下げられるように工夫しています。Controller &amp;lt;-&amp;gt; WorkerはMagicOnionで通信しているので、DFrame自身がMagicOnionの負荷テストになっているのです。&lt;/p&gt;
&lt;h2&gt;パフォーマンス&lt;/h2&gt;
&lt;p&gt;多数ある負荷テストフレームワークですが、パフォーマンスはそれぞれかなり異なります。詳しくはk6のブログ&lt;a href="https://k6.io/blog/comparing-best-open-source-load-testing-tools/"&gt;Open source load testing tool review 2020&lt;/a&gt;に非常に詳細に書かれていますが、例えばとにかくwrkがぶっちぎって他の数十倍~数百倍速かったりする、と。パフォーマンスは当然ながらとても重要で、ワーガーの非力さでターゲットに負荷をかけきれなかったりします。それに対応するためクラスターを組んでいくにしても、多くの台数やより高いスペックのマシンが必要になって、色々と辛い。&lt;/p&gt;
&lt;p&gt;というわけでパフォーマンスは高ければ高いほうがいいのですが、先のブログに書かれている通り、拡張性の口やレポート取り出しの口などは必要です。その点でWrkは機能を満たさないということで、ブログではなんか結果から取り除かれてますね（その対応がいいのかどうかはなんとも言えませんが、まぁk6自身のアピールのためでもあるのでしょうがないね）。ちなみにフレームワークのパフォーマンスの指標として使われている&lt;a href="https://www.techempower.com/benchmarks/"&gt;TechEmpower Web Framework Benchmarks&lt;/a&gt;の負荷クライアントはwrkのようです。&lt;/p&gt;
&lt;p&gt;さて、で、DFrameはどうかというと、かなり良好です。というのも、DFrameはライブラリとして提供されて、実行時は全てがC#の実行ファイルとしてコンパイル済みの状態になるのですね。スクリプトを動的に読んで実行するから遅くなってしまう、みたいなことがない。比較的高速な言語であるC#をそのまま利用するので、その時点である程度はいける。理論上。理屈上。&lt;/p&gt;
&lt;p&gt;と、いう甘い見込みのもと実際作っていくと、さすがにそこまでさっくりとはいかず、相応にチューニングが必要だったのですが、最終的にはかなりの数字が出るようになりました。比較としてabとk6で測ってみると&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/155854372-6cd3976c-fb08-4ddb-b4a8-75235421cfc8.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/155854390-a2360f29-956f-4ace-a848-ecc03c79cb21.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/155854413-969e59c2-a914-4131-b3d7-f1f50591413b.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;本来はターゲットとワーカーは別マシンにしないといけないのですが(ワーカーの負荷でCPUが跳ね上がる影響をサーバー側がモロに影響受けてしまうので)、それでもそれなりに数字は変動しますし動きはするしマシンパワーも結構強め(Ryzen 9 5950x)なので、ちょっと手抜きでlocalhost上の無を返すHTTP/1サーバーをターゲットに、32並列(-c 32, -32VUs, Concurrency=32)で実行。&lt;/p&gt;
&lt;p&gt;abが、6287 req/sec、k6が125619 req/sec、DFrameが207634 req/secです。abは、厳しい、厳しい……。もっと出るはずと思っているんですが、私の環境(Windows)だと昔からこんな感じなので、性能的には信用できないかなぁ。Windowsだとダメだったりするのかもしないのかもしれませんね。DFrameの場合Concurrencyにまだ余裕があって、増やすとまだまだ伸びたのですが、k6は割と頭打ちでした。&lt;/p&gt;
&lt;p&gt;また、画像は出してませんがLocustは残念ながらかなり遅い上にCPUを食いまくるという感じで(Pythonだしね……）、いくらクラスタ化が容易とはいえ、ここまで1ワーカーあたりの性能が低いと、ないかなあ、という感想です。JMeterはそこまで悪くはないですが、パフォーマンスに影響を与える地雷コンフィグを必死にかいくぐってなおそこそこ程度なのはしんどみ。&lt;/p&gt;
&lt;p&gt;ちなみになんで圧倒的性能番長であるwrkと比較しないのかというと、Windowsで動かすのが大変だからです。すみません……。&lt;/p&gt;
&lt;h2&gt;自動化のためのREST API&lt;/h2&gt;
&lt;p&gt;最初はいいけど、毎回GUIでポチポチやるの面倒で、それはそれで嫌だよね。CIで定期的に回したりもできないし。というわけで、バッチ起動モード、はついていないのですが、代わりにREST APIが自動で有効になっています。例えば &lt;code&gt;/api/connections&lt;/code&gt; で現在接続中のワーカーコネクション数が取れます。実行パラメーターなどはPostでJSONを投げる形になっています。&lt;/p&gt;
&lt;p&gt;REST APIでJSONをやり取りするだけなので、どの言語から叩くことも可能ですが、C#の場合は &lt;code&gt;DFrame.RestSdk&lt;/code&gt; パッケージにて型付けされたクライアントが用意されているので、手間なくはじめられます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using DFrame.RestSdk;

var client = new DFrameClient(&amp;quot;http://localhost:7312/&amp;quot;);

// start request
await client.ExecuteRequestAsync(new()
{
    Workload = &amp;quot;SampleWorkload&amp;quot;,
    Concurrency = 10,
    TotalRequest = 100000
});

// loadtest is running, wait complete.
await client.WaitUntilCanExecute();

// get summary and results[]
var result = await client.GetLatestResultAsync();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;実行状況は全て連動しているので、REST APIから実行した進捗もWeb UI側でリアルタイムに状況確認できます。&lt;/p&gt;
&lt;h2&gt;Unityでも動く&lt;/h2&gt;
&lt;p&gt;Unityで動かしやすいかといったら全然そんなことないので、動かせるようにするのはもはや執念という感じではあるのですが、Unity対応しました。冒頭で書いたようにヘッドレスUnityを並べてコントロールする、みたいな用途は考えられます。まぁ、あと普通の負荷テストでも、通信部分のC#を普通の .NET に切り出すのが面倒だという場合に、ヘッドレスUnityでとりあえずビルドすることで何もしなくてもOK（そうか？）という策もあります。&lt;/p&gt;
&lt;p&gt;Unityで動かす場合は、依存の解決(MagicOnion、gRPC、MessagePack for C#)が大変です！まぁ、それは置いておいて。それが出来ているなら、以下のようなMonoBehaviourに寿命をくっつけたインスタンスで起動させると良い感じです（MagicOnionというかネイティブgRPCは適切にコネクションをCloseしないとUnity Editorがフリーズするという酷い問題があるのですが、このコードは問題なくちゃんとクリーンアップしてくれるようになっています）。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class DFrameWorker : MonoBehaviour
{
    DFrameWorkerApp app;

    [RuntimeInitializeOnLoadMethod]
    static void Init()
    {
        new GameObject(&amp;quot;DFrame Worker&amp;quot;, typeof(SampleOne));
    }

    private void Awake()
    {
        DontDestroyOnLoad(gameObject);
    }

    async void Start()
    {
        // setup your controller address
        app = new DFrameWorkerApp(&amp;quot;localhost:7313&amp;quot;);
        await app.RunAsync();
    }

    private void OnDestroy()
    {
        app.Dispose();
    }
}

[Preserve]
public class SampleWorkload : Workload
{
    public override Task ExecuteAsync(WorkloadContext context)
    {
        Debug.Log(&amp;quot;Exec&amp;quot;);
        return Task.CompletedTask;
    }

    public override Task TeardownAsync(WorkloadContext context)
    {
        Debug.Log(&amp;quot;Teardown&amp;quot;);
        return Task.CompletedTask;
    }
}

// Preserve for Unity IL2CPP

internal class PreserveAttribute : System.Attribute
{
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Editor上の確認だとこんな具合です。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/155901725-4ce8a36f-46e9-4437-aba7-639425f4b93f.png" alt="image" /&gt;&lt;/p&gt;
&lt;h2&gt;ライブラリかツールか&lt;/h2&gt;
&lt;p&gt;DFrame.Controller、他の設定を入れなければただのウェブアプリなので、ビルド済みのexeとしての提供も可能です。Locustなど他のツールも入れたら、とりあえず実行できる、のに比べると、必ず自分で組み込んでビルドしなきゃいけない。のは欠点に見える。&lt;/p&gt;
&lt;p&gt;なのでビルド済みコンテナをDocker Hubかなんかで提供するという案もあったのですが、Workerはどうしても自分で組み込んでビルドする必要があるので、そこだけ省けても利点あるのかな？と考えて、最終的に却下しました。かわりに &lt;code&gt;DFrameApp.Run&lt;/code&gt; の一行だけでController+Workerの同居が起動できるようにして、最初の一歩の面倒臭さをライブラリデザインの工夫で乗り切ることにしました。Controller自体も、&lt;code&gt;Microsoft.NET.Sdk.Web&lt;/code&gt;ではなく、コンソールアプリケーションのテンプレートの&lt;code&gt;Microsoft.NET.Sdk&lt;/code&gt;から起動できるようにしました。&lt;/p&gt;
&lt;p&gt;DFrame.Controllerがライブラリとして提供されていることのメリットは、コンフィグが通常のコードやASP.NETの仕組みに乗っかったほうが圧倒的にシンプルになります。DIで好きなロガーを設定して、URLの指定やSSLなどもappsettings.jsonで行うのは、大量の複雑怪奇なコマンドラインオプションよりもずっと良いでしょう。&lt;/p&gt;
&lt;p&gt;ログの永続化処理も、プラグイン的に用意するのではなく、普通にDIでインジェクトしてもらう(&lt;code&gt;IExecutionResultHistoryProvider&lt;/code&gt;というものが用意されていて、これを実装したものをDIに登録してもらえば、結果をデータベースに入れたり時系列DBに入れたりして統計的な参照ができるようになります)ほうが、使いやすいはずです。&lt;/p&gt;
&lt;h2&gt;Blazor Server + MagicOnion&lt;/h2&gt;
&lt;p&gt;DFrame.ControllerはBlazor ServerとMagicOnion(grpc-dotnet)が同居した構成になっています。これは中々面白い構成で、Web UIとMagicOnion(Server側)が同じメモリを共有しているので、末端のMagicOnion(Client側)の変更をダイレクトにC#だけを通してブラウザにまで届けているんですね。逆もしかりで、APIからのアクセス含めて、全てがリアルタイムに伝搬して画面も同期しているのですが、普通にやるとかなり複雑怪奇になるはずが、かなりシンプルに実装できています。&lt;/p&gt;
&lt;p&gt;と、いうわけで、Cysharpではこの組み合わせに可能性を感じていて、別のサービスも同種のアーキテクチャで絶賛制作中なので興味ありましたら以下略。&lt;/p&gt;
&lt;h2&gt;紆余曲折&lt;/h2&gt;
&lt;p&gt;最初のバージョンは2年ぐらい前に作っていました。コンセプトは「自己分裂する分散バッチフレームワーク」ということで、自分自身のコピーを動的に作って無限大に分散して実行していくというもので。分散のための基盤としてKubernetesを使って。クラウドネイティブ！かっこいい！そして、一応動くものはできていました。あとは仕上げていくだけ、といったところで、放置していました。完成させなきゃ、と思いつつ、内心薄々あんまいい感じではないな、と思っていたため手が進まず無限放置モードへ。そして時が流れ、社内でもがっつり使うことになり引っ張り出されてきたそれは、やはりあまりいい感じではなく。で、最終的に言われたんですね、そもそも分裂機能いらなくね？と。&lt;/p&gt;
&lt;p&gt;それでようやく気づくわけです、コンセプトから完全に間違っているからうまくいくわけがない！&lt;/p&gt;
&lt;p&gt;反省として良くなかった理由としては、まず、現代のクラウドコンピューターを過大に評価していた。「自己分裂する」のは、一瞬で無限大にスケールして即起動、そして終わったら即終了、ならば、まぁそれでいいんですが、現実のスケールする時間はそんなに立派じゃない。サーバーレスといいつつ、別に1リクエスト毎にコンテナが起動して処理するわけはなく、常駐してリクエストを待つ。そりゃそうだ、と。自己分裂のコンセプトだと、分裂コストが重たいのは否めない。&lt;/p&gt;
&lt;p&gt;もう一つは分裂するためのコードがDFrame内に記述されている。Kuberentesをコントロールするコードがたっぷり入ってしまって。そのせいでコードサイズが膨らんでしまったし、使う方も複雑なコンフィグをDFrame側に埋めなきゃいけなくなってしまった。これは二重にイケてない。作るのも複雑で、使うのも複雑ですからね、いいところがない……。&lt;/p&gt;
&lt;p&gt;と、いうわけで、最初のかっこいいコンセプトを否定して、自己分裂しない。単純に繋ぎに行くだけ。としたことで、頭を抱えてうまくいかないと感じていた行き詰まりは解消したのでした。&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;もう少し早くに作って提供したかった、という後悔がめっちゃあるのですが、同時に .NET 6だから出来たという要素もめっちゃあるので(パラメーター渡しの仕組みなどは&lt;a href="https://neue.cc/2021/12/30.html"&gt;ConsoleAppFramework v4&lt;/a&gt;の設計の経験からスムーズに実装できた)、しょーがない。という気もする。Blazor Serverなどの進化も必要だったし。&lt;/p&gt;
&lt;p&gt;しかし↑で書いたとおり最初に立てたコンセプトが間違っていて、長いこと軌道修正できず放置してしまっていたというのは個人的には割と手痛い経験です……。まぁ、間違ったコンセプトのまま進行してしまうというのは別によくあるので、それはしょーがないものとして別にいいんですが、自力で気づいてパーッと作り上げられてたらなあ、みたいな、みたいな。。。&lt;/p&gt;
&lt;p&gt;ともあれ、完成したものとしてはかなり良い感じで（私の出すものとしては珍しくUIもちゃんとついているし！←UI作業は他の人に助力を請うてます）、ちょっとニッチ感もありますがC#アプリケーション開発の必需品として成り得る出来だと思っていますので、ぜひぜひお試しください。&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Mon, 28 Feb 2022 00:00:00 +0900</pubDate>
      <a10:updated>2022-02-28T00:00:00+09:00</a10:updated>
    </item>
  </channel>
</rss>