<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:a10="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>neue cc</title>
    <link>http://neue.cc/</link>
    <description>C# Technical Blog</description>
    <language>ja</language>
    <lastBuildDate>Tue, 17 Oct 2023 11:13:27 +0900</lastBuildDate>
    <item>
      <guid isPermaLink="true">https://neue.cc/2023/10/13_Utf8StringInterpolation.html</guid>
      <link>https://neue.cc/2023/10/13_Utf8StringInterpolation.html</link>
      <title>UTF8文字列生成を最適化するライブラリ Utf8StringInterpolation を公開しました</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2023/10/13_Utf8StringInterpolation.html"&gt;UTF8文字列生成を最適化するライブラリ Utf8StringInterpolation を公開しました&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2023-10-13&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;Utf8StringInterpolationという新しいライブラリを公開しました！UTF8文字列の生成と書き込みに特化していて、動作をカスタマイズした文字列補間式によるC#コンパイラの機能を活用した生成と、StringBuilder的な連続的な書き込みの両方をサポートします。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Cysharp/Utf8StringInterpolation"&gt;Cysharp/Utf8StringInterpolation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本的な流れはこんな感じで、Stringを生成するのと同じように、UTF8を生成/書き込みできます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using Utf8StringInterpolation;

// Create UTF8 encoded string directly(without encoding).
byte[] utf8 = Utf8String.Format($&amp;quot;Hello, {name}, Your id is {id}!&amp;quot;);

// write to IBufferWriter&amp;lt;byte&amp;gt;(for example ASP.NET HttpResponse.BodyWriter)
Utf8String.Format(bufferWriter, $&amp;quot;Today is {DateTime.Now:yyyy-MM-dd}&amp;quot;); // support format

// like a StringBuilder
var writer = Utf8String.CreateWriter(bufferWriter);
writer.Append(&amp;quot;My Name...&amp;quot;);
writer.AppendFormat($&amp;quot;is...? {name}&amp;quot;);
writer.AppendLine();
writer.Flush();

// Join, Concat methods
var seq = Enumerable.Range(1, 10);
byte[] utf8seq = Utf8String.Join(&amp;quot;, &amp;quot;, seq);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Cysharpから公開している &lt;a href="https://github.com/Cysharp/ZString/"&gt;ZString&lt;/a&gt; と非常に近いのですが、ZStringがString(UTF16), UTF8をサポートしていたのに対して、UTF8側のみを取り出して強化したようなイメージになります。何が強化なのかというと、C# 10.0から&lt;a href="https://github.com/dotnet/csharplang/blob/main/proposals/csharp-10.0/improved-interpolated-strings.md"&gt;Improved Interpolated Strings&lt;/a&gt;として、文字列補間式($&amp;quot;foo{bar}baz&amp;quot;)のパフォーマンスが大きく向上しました。具体的には、コンパイラが文字列補間式の構造を分解して、値が埋め込まれている箇所はGenericsのまま渡すようになりボクシングが消滅しました。つまりZStringでやっていたことではあるのですが、ZStringはC# 10.0以前のものですからね……！逆に言えば、これによってZStringは半分は不要となったわけです。&lt;/p&gt;
&lt;p&gt;もう半分、UTF8側に関しては依然として標準のサポートは薄い、というかほぼない状態です。しかし、Improved Interpolated Strings は文字列補間式での挙動を自由にカスタマイズできるという性質も追加されています。というわけで、文字列補間式を利用してUTF8を組み立てられるようにすればいいのではないか、というのがUtf8StringInterpolationのコンセプトであり、正しくZLoggerの後継として位置づけていることでもあります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// こういう文字列補間式を渡すと:
// Utf8String.Format(ref Utf8StringWriter format)
Utf8String.Format($&amp;quot;Hello, {name}, Your id is {id}!&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// コンパイラが「コンパイル時」にこのような形に展開します。
var writer = new Utf8StringWriter(literalLength: 20, formattedCount: 2);
writer.AppendLiteral(&amp;quot;Hello, &amp;quot;);
writer.AppendFormatted&amp;lt;string&amp;gt;(name);
writer.AppendLiteral(&amp;quot;, You id is &amp;quot;);
writer.AppendFormatted&amp;lt;int&amp;gt;(id);
writer.AppendLiteral(&amp;quot;!&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;コンパイル時に展開してくれるというのは性能上非常に重要で、つまり&lt;code&gt;String.Format&lt;/code&gt;のように実行時に文字列式のパースをしないで済む、わけです。また、ボクシングなしに全ての値を書き込みに呼んでくれます。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[InterpolatedStringHandler]&lt;/code&gt;を付与している&lt;code&gt;ref Utf8StringWriter&lt;/code&gt; に &lt;code&gt;$&amp;quot;{}&amp;quot;&lt;/code&gt;を渡すと、自動的に展開してくれるという仕様になっています。そのUtf8StringWriterは以下のような実装になっています。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// internal struct writer write value to utf8 directly without boxing.
[InterpolatedStringHandler]
public ref struct Utf8StringWriter&amp;lt;TBufferWriter&amp;gt; where TBufferWriter : IBufferWriter&amp;lt;byte&amp;gt;
{
    TBufferWriter bufferWriter; // when buffer is full, advance and get more buffer
    Span&amp;lt;byte&amp;gt; buffer;          // current write buffer

    public void AppendLiteral(string value)
    {
        // encode string literal to Utf8 buffer directly
        var bytesWritten = Encoding.UTF8.GetBytes(value, buffer);
        buffer = buffer.Slice(bytesWritten);
    }

    public void AppendFormatted&amp;lt;T&amp;gt;(T value, int alignment = 0, string? format = null)
        where T : IUtf8SpanFormattable
    {
        // write value to Utf8 buffer directly
        while (!value.TryFormat(buffer, out bytesWritten, format))
        {
            Grow();
        }
        buffer = buffer.Slice(bytesWritten);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;.NET 8 の場合は、値が &lt;a href="https://learn.microsoft.com/ja-jp/dotnet/api/system.iutf8spanformattable?view=net-8.0"&gt;IUtf8SpanFormattable&lt;/a&gt; という.NET 8から追加されたインターフェイスを実装している場合(intなど標準のプリミティブはほぼ実装されています）、直接TryFormatによりUTF8としてSpanに書き込みます。&lt;/p&gt;
&lt;p&gt;さすがに .NET 8 にしか対応していません！というのはエクストリームすぎるので、 .NET Standard 2.1, .NET 6(.NET 7)では &lt;a href="https://learn.microsoft.com/en-us/dotnet/api/system.buffers.text.utf8formatter.tryformat?view=net-7.0"&gt;Utf8Formatter.TryFormat&lt;/a&gt; を使うことで、同様の性能を担保しています。&lt;/p&gt;
&lt;h2&gt;Builder vs Writer&lt;/h2&gt;
&lt;p&gt;ZStringのときはStringBuilderに引っ張られすぎていて、Builderとして内部でバッファを抱えるようにしていたのですが、ちょっとUTF8的な利用ではイマイチだということが徐々に分かってきました。今の .NET の基本は &lt;code&gt;IBufferWriter&amp;lt;byte&amp;gt;&lt;/code&gt; である。というのはついこないだのCEDEC 2023での発表 &lt;a href="https://speakerdeck.com/neuecc/cedec-2023-modanhaipahuomansuc-number-2023-edition"&gt;モダンハイパフォーマンスC# 2023 Edition&lt;/a&gt; でかなり語らせていただいたのですが&lt;/p&gt;
&lt;iframe class="speakerdeck-iframe" frameborder="0" src="https://speakerdeck.com/player/055c0df858f44aafb4b017bb9c03c2e6" title="CEDEC 2023 モダンハイパフォーマンスC# 2023 Edition" allowfullscreen="true" style="border: 0px; background: padding-box padding-box rgba(0, 0, 0, 0.1); margin: 0px; padding: 0px; border-radius: 6px; box-shadow: rgba(0, 0, 0, 0.2) 0px 5px 40px; width: 100%; height: auto; aspect-ratio: 560 / 315;" data-ratio="1.7777777777777777"&gt;&lt;/iframe&gt;
&lt;p&gt;BuilderというよりもWriterとして構築すべきだな、ということに至りました。そこで &lt;code&gt;Utf8StringWriter&lt;/code&gt; は基本的に&lt;code&gt;IBufferWriter&amp;lt;byte&amp;gt;&lt;/code&gt;を受け取ってそれに書き込むという仕様となりました。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public ref partial struct Utf8StringWriter&amp;lt;TBufferWriter&amp;gt;
    where TBufferWriter : IBufferWriter&amp;lt;byte&amp;gt;
{
    Span&amp;lt;byte&amp;gt; destination;
    TBufferWriter bufferWriter;
    int currentWritten;

    public Utf8StringWriter(TBufferWriter bufferWriter)
    {
        this.bufferWriter = bufferWriter;
        this.destination = bufferWriter.GetSpan();
    }

    public void Flush()
    {
        if (currentWritten != 0)
        {
            bufferWriter.Advance(currentWritten);
            currentWritten = 0;
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;バッファが足りなくなったときは拡大するのではなくて、Advanceして新たにGetSpanを呼んで新しいバッファを確保しにいくという形を取りました。StringBuilderと違ってFlushの概念が必要になってしまいましたが、パフォーマンス的には大きな向上を果たしています。&lt;/p&gt;
&lt;p&gt;Flushが必要ということを除けば、StringBuilderのように扱うことができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var writer = Utf8String.CreateWriter(bufferWriter);

// call each append methods.
writer.Append(&amp;quot;foo&amp;quot;);
writer.AppendFormat($&amp;quot;bar {Guid.NewGuid()}&amp;quot;);
writer.AppendLine();

// finally call Flush(or Dispose)
writer.Flush();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;また、ちょっとStringBuilder的に使いたいだけの時に &lt;code&gt;IBufferWriter&amp;lt;byte&amp;gt;&lt;/code&gt; を用意するのは面倒くさい！という場合のために、内部でプーリングを行っているバッファを使えるオーバーロードも用意しています。戻り値がバッファのコントローラーになっていて、ToArrayや他の&lt;code&gt;IBufferWriter&amp;lt;byte&amp;gt;&lt;/code&gt;にコピーしたり&lt;code&gt;ReadOnlySpan&amp;lt;byte&amp;gt;&lt;/code&gt;の取得ができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// buffer must Dispose after used(recommend to use using)
using var buffer = Utf8String.CreateWriter(out var writer);

// call each append methods.
writer.Append(&amp;quot;foo&amp;quot;);
writer.AppendFormat($&amp;quot;bar {Guid.NewGuid()}&amp;quot;);
writer.AppendLine();

// finally call Flush(no need to call Dispose for writer)
writer.Flush();

// copy to written byte[]
var bytes = buffer.ToArray();

// or copy to other IBufferWriter&amp;lt;byte&amp;gt;, get ReadOnlySpan&amp;lt;byte&amp;gt;
buffer.CopyTo(otherBufferWriter);
var writtenData = buffer.WrittenSpan;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;その他、&lt;code&gt;Format&lt;/code&gt;, &lt;code&gt;Join&lt;/code&gt;, &lt;code&gt;Concat&lt;/code&gt; メソッドなども &lt;code&gt;IBufferWriter&amp;lt;byte&amp;gt;&lt;/code&gt; を受け取るオーバーロードと &lt;code&gt;byte[]&lt;/code&gt;を返すオーバーロードの2種を用意しています。&lt;/p&gt;
&lt;h2&gt;.NET 8 と StandardFormat&lt;/h2&gt;
&lt;p&gt;値のフォーマット書式は、特にDateTimeでよく使うと思いますが、数値型などでも多くの書式が用意されています。&lt;a href="https://learn.microsoft.com/ja-jp/dotnet/standard/base-types/formatting-types"&gt;.NET の数値、日付、列挙、その他の型の書式を設定する方法&lt;/a&gt; や各種カスタム書式指定文字列は非常に便利です。&lt;/p&gt;
&lt;p&gt;しかし、UTF8に値を直接書き込む手段として従来用意されていた&lt;a href="https://learn.microsoft.com/en-us/dotnet/api/system.buffers.text.utf8formatter.tryformat"&gt;Utf8Formatter.TryFormat&lt;/a&gt;では、その標準的な書式指定文字列は使えませんでした！代わりに用意されたのが&lt;a href="https://learn.microsoft.com/en-us/dotnet/api/system.buffers.standardformat"&gt;StandardFormat&lt;/a&gt;なのですが、恐ろしく限定的なことしかできず(例えば'G', 'D', or 'X'のような一文字charの指定しかできない)、使い物にならないといっても過言ではないぐらいでした。&lt;/p&gt;
&lt;p&gt;ところが .NET 8 から追加された IUtf8SpanFormattable.TryFormat では、通常の書式指定文字列が帰ってきました！&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// Utf8Formatter.TryFormat
static bool TryFormat (int value, Span&amp;lt;byte&amp;gt; destination, out int bytesWritten, System.Buffers.StandardFormat format = default);

// .NET 8 IUtf8SpanFormattable.TryFormat
bool TryFormat (Span&amp;lt;byte&amp;gt; utf8Destination, out int bytesWritten, ReadOnlySpan&amp;lt;char&amp;gt; format, IFormatProvider? provider);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;パラメーターは非常に似ていますが、formatを文字列で受け取るようになっています。実際に比較してみるとこんな感じです。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;Span&amp;lt;byte&amp;gt; dest = stackalloc byte[16];
int written = 0;

// ParseできなくてExceptionがthrowされるので表現できない
Utf8Formatter.TryFormat(123.456789, dest, out written, StandardFormat.Parse(&amp;quot;.###&amp;quot;));

// 123.456
123.456123.TryFormat(dest, out written, &amp;quot;.###&amp;quot;);


// カスタム書式文字列は指定できないので例外！サポートしてるのは `G`, `R`, `l`, `O` だけ！
Utf8Formatter.TryFormat(DateTime.Now, dest, out written, StandardFormat.Parse(&amp;quot;yyyy-MM-dd&amp;quot;));

// もちろんちゃんと動作する
DateTime.Now.TryFormat(dest, out written, &amp;quot;yyyy-MM-dd&amp;quot;);

Console.WriteLine(Encoding.UTF8.GetString(dest.Slice(0, written)));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;良かった、やと普通の世界が到達した……！これは ZString や、それを内部に使っていた &lt;a href="https://github.com/Cysharp/ZLogger"&gt;ZLogger&lt;/a&gt;で最もフラストレーションを感じていた点です。&lt;/p&gt;
&lt;p&gt;Utf8StringInterpolationは .NET 8 では全て IUtf8SpanFormattable で変換するようにしています。しかし、 .NET Standard 2.1, .NET 6, .NET 7では残念ながらUtf8Formatter利用となっているので、書式指定に関しては制限があります。数値に関してはターゲットプラットフォームによって動作したりしなかったりが発生します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// .NET 8 supports all numeric custom format string but .NET Standard 2.1, .NET 6(.NET 7) does not.
Utf8String.Format($&amp;quot;Double value is {123.456789:.###}&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ただし、 &lt;code&gt;DateTime&lt;/code&gt;, &lt;code&gt;DateTimeOffset&lt;/code&gt;, &lt;code&gt;TimeSpan&lt;/code&gt; に関しては &lt;code&gt;Utf8Formatter&lt;/code&gt; を使わない処理をしているため、全てのターゲットプラットフォームでカスタム書式指定が利用可能です！&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// DateTime, DateTimeOffset, TimeSpan support custom format string on all target plaftorms.
// https://learn.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings
Utf8String.Format($&amp;quot;Today is {DateTime.Now:yyyy-MM-dd}&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;とにかくDateTimeの書式指定がまともに出来ないのはZString/ZLoggerで一番辛かったところなので、それを改善できてとても良かった……。ただしこの対応により、DateTimeの変換性能が落ちているため、性能が最大限引き出せるのは .NET 8 となります。&lt;/p&gt;
&lt;h2&gt;Unity&lt;/h2&gt;
&lt;p&gt;Unity対応はありません！いや、可能な限り私は .NET と Unityの両対応のライブラリを作りたいと思っていて、実際今までもそうしてきているわけですが、今回ばかりはどうにもならないのです。そもそもImproved Interpolated Stringsが C# 10.0 からで、Unityの現在のC#のバージョンは C# 9.0……！さすがにそれはどうにもならない。&lt;/p&gt;
&lt;p&gt;C# 9.0で止まってから結構長いんですよね。別にランタイムのバージョンは上げなくてもいいから、コンパイラのバージョンだけ上げて欲しいと切実に思いますが、まぁC# 10.0にしたらDefaultInterpolatedStringHandlerがなくて動作しないじゃんとかなるだろうから、結局はランタイムのバージョンアップもセットでやらなければならない……。&lt;/p&gt;
&lt;p&gt;Unityが C# 10.0 に対応したらすぐに対応させるつもりではあります！待ってます！&lt;/p&gt;
&lt;h2&gt;Next&lt;/h2&gt;
&lt;p&gt;さて、とはいえ、UTF8文字列を直接扱わなければならないケースというのは、別にそんなに多くはないでしょう。実際、私も本命は&lt;a href="https://github.com/Cysharp/ZLogger"&gt;ZLogger&lt;/a&gt;の大型バージョンアップでの利用を考えています。ZLoggerは今まではZStringベースでしたが、根本からデザインをやり直した新しいものを開発中です。その中の文字列化にUtf8StringInterpolationを使っています。&lt;/p&gt;
&lt;p&gt;といったように、アプリケーションの基盤レイヤーに差し込んであげると有効に機能するシチュエーションは色々あると思います。もちろん、直接使ってもらってもいいのですが……！？&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Fri, 13 Oct 2023 00:00:00 +0900</pubDate>
      <a10:updated>2023-10-13T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2023/09/21_privateproxy.html</guid>
      <link>https://neue.cc/2023/09/21_privateproxy.html</link>
      <title>.NET 8 UnsafeAccessor を活用したライブラリ PrivateProxy を公開しました</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2023/09/21_privateproxy.html"&gt;.NET 8 UnsafeAccessor を活用したライブラリ PrivateProxy を公開しました&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2023-09-21&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;PrivateProxyというライブラリを公開しました。つまるところ、privateフィールド/プロパティ/メソッドにアクセスするライブラリなのですが、.NET 8 のUnsafeAccessorという新機能を活用することでNo Reflection、ハイパフォーマンス、AOTセーフになっています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Cysharp/PrivateProxy"&gt;Cysharp/PrivateProxy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;もちろん .NET 8 でしか動きません！ので、.NET 8が正式リリースされた頃に思い出して使ってみてください。エクストリームな人は今すぐ試しましょう。&lt;/p&gt;
&lt;p&gt;雰囲気としては、privateメンバーにアクセスしたい型があったとして、&lt;code&gt;[GeneratePrivateProxy(type)]&lt;/code&gt;をつけた型を用意します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using PrivateProxy;

public class Sample
{
    int _field1;
    int PrivateAdd(int x, int y) =&amp;gt; x + y;
}

[GeneratePrivateProxy(typeof(Sample))]
public partial struct SampleProxy;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;すると、いい感じにアクセスできるようになります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// You can access like this.
var sample = new Sample();
sample.AsPrivateProxy()._field1 = 10;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;いいところとしては、 Source Generatorベースの生成なので、型がついていて入力補完も効くし、変数名を変更したらコンパイルエラーで検出可能です。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/269376472-f6dd22e1-e82e-4acc-ba6e-8895c8c8734b.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;ここまではSource Generatorベースで作れば、今まででもやれないことはなかったのですが、UnsafeAccessorのいいところとして、objectが一切出てこないで元のメソッドそのままの型がそのまま使えることです。生成されたコードを見ると、こうなっています。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// Source Generator generate this type
partial struct SampleProxy(Sample target)
{
    [UnsafeAccessor(UnsafeAccessorKind.Field, Name = &amp;quot;_field1&amp;quot;)]
    static extern ref int ___field1__(Sample target);

    [UnsafeAccessor(UnsafeAccessorKind.Method, Name = &amp;quot;PrivateAdd&amp;quot;)]
    static extern int __PrivateAdd__(Sample target, int x, int y);

    public ref int _field1 =&amp;gt; ref ___field1__(target);
    public int PrivateAdd(int x, int y) =&amp;gt; __PrivateAdd__(target, x, y);
}

public static class SamplePrivateProxyExtensions
{
    public static SampleProxy AsPrivateProxy(this Sample target)
    {
        return new SampleProxy(target);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これによって &lt;code&gt;ref&lt;/code&gt; や &lt;code&gt;readonly&lt;/code&gt; などの言語機能をそのまま反映できたり、mutableなstructの対応が自然にできたり、そして何よりパフォーマンスの低下も一切ありません。&lt;/p&gt;
&lt;p&gt;使い道は、主にユニットテスト用になるとは思いますので、なのでパフォーマンスはそこまで重要ではないといえばないのですが、性能的にはアプリケーションの実行時に使っても問題ないものとなっています。&lt;/p&gt;
&lt;p&gt;私は昔&lt;a href="https://github.com/neuecc/ChainingAssertion"&gt;Chaining Assertion&lt;/a&gt;というユニットテスト用のライブラリを作っていたのですが、現在は&lt;a href="https://fluentassertions.com/"&gt;Fluent Assertions&lt;/a&gt;という別のライブラリを使っています。ほとんどの機能は概ねなんとかなっているのですが、&lt;code&gt;AsDynamic()&lt;/code&gt;を呼ぶと、移行はprivateフィールドやメソッドにアクセスし放題という機能は結構便利で、そしてそれがFluent Assertionsにないのは若干不便と思ってたんですね。今回、やっとそれの進化系を作れたのでメデタシメデタシです。&lt;/p&gt;
&lt;h2&gt;C# 12&lt;/h2&gt;
&lt;p&gt;ところで、冒頭のSampleProxyの書き方、地味にこれはC# 12の記法を使っています。どこだかわかりますか？&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[GeneratePrivateProxy(typeof(Sample))]
public partial struct SampleProxy;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;SampleProxy;&lt;/code&gt; の部分で、空のクラスを作る際に &lt;code&gt;{ }&lt;/code&gt; じゃなくて &lt;code&gt;;&lt;/code&gt; だけで済ませられるようになりました。これは地味ですがかなりいい機能で、というのもSource Generatorだと空クラスに割り当てることが多かったんですよね。そして、たった2文字が1文字に変わっただけ、ではあるのですが、 &lt;code&gt;{ }&lt;/code&gt; だとコードフォーマットに影響があります。改行して3行で表現するのか、後ろにつけるのか。そうした判断のブレが &lt;code&gt;;&lt;/code&gt; だとなくなります。だから2文字が1文字に変わっただけ、以上のインパクトがある、良い機能追加だと思います。&lt;/p&gt;
&lt;h2&gt;ref field&lt;/h2&gt;
&lt;p&gt;PrivateProxyはstaticメソッドにも対応していますし、そしてmutable structにも対応しています。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using PrivateProxy;

public struct MutableStructSample
{
    int _counter;
    void Increment() =&amp;gt; _counter++;

    // static and ref sample
    static ref int GetInstanceCounter(ref MutableStructSample sample) =&amp;gt; ref sample._counter;
}

// use ref partial struct
[GeneratePrivateProxy(typeof(MutableStructSample))]
public ref partial struct MutableStructSampleProxy;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var sample = new MutableStructSample();
var proxy = sample.AsPrivateProxy();
proxy.Increment();
proxy.Increment();
proxy.Increment();

// call private static method.
ref var counter = ref MutableStructSampleProxy.GetInstanceCounter(ref sample);

Console.WriteLine(counter); // 3
counter = 9999;
Console.WriteLine(proxy._counter); // 9999
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;mutable structの対応って結構難しい話で、というのもフィールドにstructを保持するとコピーが渡されることになるので、普通に書いていると変更が元のstructに反映されないんですね。この問題をPrivateProxyではC# 11 ref fieldで解決しました。&lt;/p&gt;
&lt;p&gt;MutableStructSampleProxyはSource Generatorによって以下のようなコードが生成されます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;ref partial struct MutableStructSampleProxy
{
    ref MutableStructSample target;

    public MutableStructSampleProxy(ref MutableStructSample target)
    {
        this.target = ref target;
    }

    [UnsafeAccessor(UnsafeAccessorKind.Method, Name = &amp;quot;Increment&amp;quot;)]
    static extern void __Increment__(ref MutableStructSample target);
    
    public void Increment() =&amp;gt; __Increment__(ref this.target);
}

public static class MutableStructSamplePrivateProxyExtensions
{
    public static MutableStructSampleProxy AsPrivateProxy(this ref MutableStructSample target)
    {
        return new MutableStructSampleProxy(ref target);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;AsPrivateProxy(これはthis refですが、拡張メソッドの場合、予備側はrefを書かなくていいので自然に使えます)で渡されたstructは、そのままずっとrefのまま保持されています。これにより、メソッド呼び出しでstructの状態に変更があった場合も問題なく変更が共有されています。&lt;/p&gt;
&lt;h2&gt;privateメソッドの単体テスト&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://t-wada.hatenablog.jp/entry/should-we-test-private-methods"&gt;プライベートメソッドのテストは書かない&lt;/a&gt;みたいな流儀も世の中にはありますが、私は何言ってんの？と思ってます。パブリックメソッドのテストでprivateメソッドの確認が内包されるから不要というなら、はぁー？だったら全部E2Eテストでいいんじゃないですかー？真の振る舞いがテストされますよー？&lt;/p&gt;
&lt;p&gt;もちろんそれは非現実的で、E2Eでパブリックメソッドのロジックを全て通過させるのは手間とコストがかかりすぎる。というのと同じ話で、privateメソッドのエッジケースを全てチェックする時に、public経由だとやりにくいことは往々にある。場合によってはコード通すためにモックを仕込まなければならないかもしれない。そこまでいくとアホらしいですよね、privateメソッドを直接テストすればすむだけの話なのに？メソッドは小さければ小さいほど良いし、テストもしやすい。そしてprivateを内包したpublicよりもprivateそのもののほうが小さく、テストしやすい。&lt;/p&gt;
&lt;p&gt;ようするにコスト面を考えて境界をどこに置くかというだけの話で。そして、privateメソッドのテストそのものは、C#の場合reflection呼び出しだと、変更コストがかかるなど、コスパは悪い部類に入ってしまう。でもそれはただの言語からの制約であって、だからプライベートメソッドのテストは不要みたいなしょーもない理屈をこねて絶対視するほどのことでもない。リフレクション使うとコスパ感が合わないから原則publicで済ませること、ぐらいだったらいいけど、変な教義立てるのはおかしいでしょ。&lt;/p&gt;
&lt;p&gt;チェックしたいがためにprivateであるべきものをinternalにする（たまによくやる、internalならInternalsVisibleToをテストプロジェクトに指定することで、ユニットテストプロジェクトで参照できるようになる）こともありますが、あまりお行儀の良いことではない。そもそもinternalなので同一アセンブリ内では不要に可視レベル上がっちゃってるし。&lt;/p&gt;
&lt;p&gt;と、いうわけで、PrivateProxyは比較的低コストでprivateメソッドをテスト対象にすることができるので、全然使っちゃっていいし、テストも書いちゃって良い、わけです。&lt;/p&gt;
&lt;h2&gt;UnsafeAccessor for InternalCall&lt;/h2&gt;
&lt;p&gt;UnsafeAccessor の使い道として、corelibの InternalCall を強引に呼べることはかなりいいこと（？）だと思ってます。例えば string の生成には大元に &lt;a href="https://source.dot.net/#System.Private.CoreLib/src/System/String.CoreCLR.cs,12"&gt;FastAllocateString&lt;/a&gt; というのがあって、通常ユーザーはこれを呼ぶことはできないのですが&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[UnsafeAccessor(UnsafeAccessorKind.StaticMethod, Name = &amp;quot;FastAllocateString&amp;quot;)]
static extern string FastAllocateString(string _, int length);

var rawString = FastAllocateString(null!, 10);
var mutableSpan = MemoryMarshal.CreateSpan(ref MemoryMarshal.GetReference(rawString.AsSpan()), rawString.Length);

&amp;quot;abcde&amp;quot;.CopyTo(mutableSpan);
&amp;quot;fghij&amp;quot;.CopyTo(mutableSpan.Slice(5));

Console.WriteLine(rawString); // abcdefghij
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;といったようにUnsafeAccessorを通せばやりたい放題できます。&lt;/p&gt;
&lt;p&gt;Stringに関しては、やりたい放題させないために、&lt;a href="https://learn.microsoft.com/ja-jp/dotnet/api/system.string.create"&gt;String.Create&lt;/a&gt;というメソッドが用意されていて、Actionのコールバックで変更して、不変のStringを返すというものが用意されてはいるのですが、ActionだとTStateに&lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt;を渡せないとか、使えないケースがそれなりにあります、というか使いたいシチュエーションに限って使えないことが多い……。&lt;/p&gt;
&lt;p&gt;なお、こういうFastAllocateStringを呼んでStringに変更をかけるというのは、&lt;a href="https://github.com/dotnet/runtime/issues/36989"&gt;dotnet/runtime#36989 Make string.FastAllocateString public&lt;/a&gt;で見事に却下されています。つまり、やるな、ということです。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It is never safe or supported to mutate the contents of a returned string instance.
If you mutate a string instance within your own library or application, you are entering unsupported territory.
A future framework update could break you. Or - more likely - you'll encounter memory corruption that will be very painful for you or your customers to diagnose.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;お怒りはご尤もです。しかしString.CreateでAction渡す口あるんだからそれでいいだろーというのはお粗末すぎだと思うんですよねー、どうせやってること一緒なんだから弄るの許可してよ、というのもそれはそれで理解してもらいたいです（私は弄りたいほうの人間なので！）。というわけで、自己責任で、やっていきましょう、つまりやっていくということです……！&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;.NET 8でしか動きません！11月に .NET 8 がリリースされるので、その時まで忘れないでください！&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Thu, 21 Sep 2023 00:00:00 +0900</pubDate>
      <a10:updated>2023-09-21T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2023/07/28_yetanotherhttphandler.html</guid>
      <link>https://neue.cc/2023/07/28_yetanotherhttphandler.html</link>
      <title>Unity用のHTTP/2(gRPC) Client、YetAnotherHttpHandlerを公開しました</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2023/07/28_yetanotherhttphandler.html"&gt;Unity用のHTTP/2(gRPC) Client、YetAnotherHttpHandlerを公開しました&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2023-07-28&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;Cysharpから(主に)Unity用のHTTP/2, gRPC, MagicOnion用の通信ネットワーククライアントを公開しました。実装者は週刊.NET情報配信&lt;a href="https://weekref.net/"&gt;WeekRef.NET&lt;/a&gt;を運営している&lt;a href="https://twitter.com/mayuki"&gt;@mayuki&lt;/a&gt;さんです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Cysharp/YetAnotherHttpHandler"&gt;Cysharp/YetAnotherHttpHandler&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;何故これが必要なのかの背景情報としては、&lt;a href="https://synamon.hatenablog.com/entry/grpc-dotnet-unity"&gt;Synamon’s Engineer blog - Unityでもgrpc-dotnetを使ったgRPCがしたい&lt;/a&gt; が詳しいのですが、まず、.NETには2つのgRPC実装があります。googleが提供してきたgRPCのネイティブバインディングのGrpc.Core(C-Core)と、Microsoftが提供しているPure C#実装のgrpc-dotnet。現在.NETのgRPCはサーバーもクライアントも完全にPure C#実装のほうに寄っていて、&lt;a href="https://github.com/Cysharp/MagicOnion/"&gt;MagicOnion&lt;/a&gt;もサーバーはPure C#実装のものを使っています。&lt;/p&gt;
&lt;p&gt;しかしクライアントに関しては、諸事情によりUnityでは動かない（TLS関連の問題など）ため、ずっとC-Coreを推奨してきました。更に、Unity用のビルドは元々experimentalだったうえに、とっくにメンテナンスモードに入り、そしてついに今年5月にサポート期限も切れて完全に宜しくない気配が漂っていました。また、古いx64ビルドなので最近のMac(M1, M2チップ)では動かないためUnity Editorで使うのにも難儀するといった問題も出てきていました。&lt;/p&gt;
&lt;p&gt;と、いうわけで、CysharpではUnityで使うgRPCを推奨してきたということもあり、Unityで問題なく使えるgRPC実装としてYetAnotherHttpHandlerを開発・リリースしました。HttpClientの通信レイヤーであるHttpHandlerを差し替えるという形で実装してあるので、ほとんど通常の .NET でのgRPCと同様に扱えます。&lt;/p&gt;
&lt;p&gt;内部実装としてはPure Rust実装のHTTP/2ライブラリ&lt;a href="https://hyper.rs/"&gt;hyper&lt;/a&gt;とPure RustのTLSライブラリ&lt;a href="https://github.com/rustls/rustls"&gt;rustls&lt;/a&gt;を基盤として作ったネイティブライブラリに対して、&lt;a href="https://github.com/Cysharp/csbindgen"&gt;Cysharp/csbindgen&lt;/a&gt;で生成したC#バインディングを通して通信する形になっています。&lt;/p&gt;
&lt;h2&gt;余談&lt;/h2&gt;
&lt;p&gt;YetAnotherHttpHandlerはgRPCやMagicOnionに限らず、Unityで自由に使える HTTP/2 Clientなので、アセットダウンロードの高速化にHTTP/2を用いる、といったような使い道も考えられます。既にモバイルゲームでも幾つかのタイトルでHTTP/2でアセットダウンロードしているタイトルは確認できていまして、例えばセガさんは&lt;a href="https://speakerdeck.com/segadevtech/cedec2021-taunrotoshi-jian-woda-fu-jian-da-liang-falseasetutowosahakugao-su-nashi-zhuang-toyun-yong-shi-li-falsegong-you"&gt;CEDEC2021 ダウンロード時間を大幅減！～大量のアセットをさばく高速な実装と運用事例の共有～&lt;/a&gt;のような発表もされています。ネイティブプラグインを自前でビルドして持ち込むというのはだいぶ敷居が高い話でしたが、YetAnotherHttpHandlerを入れるだけでいいなら、だいぶやれるんじゃないか感も出てくるんじゃないでしょうか……？&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Fri, 28 Jul 2023 00:00:00 +0900</pubDate>
      <a10:updated>2023-07-28T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2023/07/20_nats_client_v2.html</guid>
      <link>https://neue.cc/2023/07/20_nats_client_v2.html</link>
      <title>AlterNats は 公式の NATS .NET Client v2 に引き継がれました</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2023/07/20_nats_client_v2.html"&gt;AlterNats は 公式の NATS .NET Client v2 に引き継がれました&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2023-07-20&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;&lt;a href="https://nats.io/"&gt;NATS&lt;/a&gt;のサードパーティー(alternative)クライアントであった&lt;a href="https://github.com/Cysharp/AlterNats"&gt;AlterNats&lt;/a&gt;は、公式に引き取られて&lt;a href="https://github.com/nats-io/nats.net.v2"&gt;NATS.NET V2&lt;/a&gt;となりました。v2の詳細に関してはNATS公式からのブログ&lt;a href="https://nats.io/blog/nats-dotnet-v2-alpha-release/"&gt;NATS .NET Client v2 Alpha Released with Core NATS Support&lt;/a&gt;を参照ください。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NATS community members started to take note, and develop client libraries for NATS based on modern .NET APIs. One notable client library that emerged was the AlterNats library by Cysharp, which includes a fully asynchronous API, leverages Span&lt;T&gt; , and supports client-side WebSockets from browsers in Blazor . NATS maintainers and AlterNats maintainers agreed that AlterNats would make a great starting point for NATS.Client v2!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;NATSに関してはAlterNatsリリース時の記事 &lt;a href="https://neue.cc/2022/05/11_AlterNats.html"&gt;AlterNats - ハイパフォーマンスな.NET PubSubクライアントと、その実装に見る.NET 6時代のSocketプログラミング最適化のTips、或いはMagicOnionを絡めたメタバース構築のアーキテクチャについて&lt;/a&gt;に色々書きましたが、&lt;a href="https://www.cncf.io/"&gt;Cloud Native Computing Foundation&lt;/a&gt;配下のPubSubミドルウェアで、RedisなどでのPubSubに比べるとパフォーマンスを始めとして多くのメリットがあります。&lt;/p&gt;
&lt;p&gt;ただしこういうものはサーバー実装も重要ですがクライアント実装も重要であり、そして当時のNATSの公式クライアント(v1)は正直酷かった！せっかくの素晴らしいミドルウェアが.NETでは活かされない、また、RedisでのPubSubには不満があり、そもそも.NETでのベストなPubSubのソリューションがないことに危機意識を感じていたので、独自に実装を進めたのがAlterNatsでした。&lt;/p&gt;
&lt;p&gt;ただし、枯れたプロトコルならまだしも、進化が早いミドルウェアのクライアントが乱立しているのは決して良いことでもないでしょう。新機能への追随速度やメンテナンスの保証という点でも、サードパーティクライアントとして進んでいくよりも、公式に統合されることのほうが絶対に良いはずです。&lt;/p&gt;
&lt;p&gt;というわけで今回の流れは大変ポジティブなことだし、野良実装にとって最高の道を辿れたんじゃないかと思っています。私自身は実装から一歩引きますが、使っていく上で気になるところがあれば積極的にPR上げていくつもりではあります。&lt;/p&gt;
&lt;p&gt;なお、NATSに関しては来月CEDEC 2023でのセッション&lt;a href="https://cedec.cesa.or.jp/2023/session/detail/s64258612468b3"&gt;メタバースプラットフォーム「INSPIX WORLD」はPHPもC++もまとめてC#に統一！～MagicOnionが支えるバックエンド最適化手法～&lt;/a&gt;で触れる、かもしれません、多分。というわけでぜひ聞きに来てください……！&lt;/p&gt;
&lt;p&gt;メタバース関連では、今年の5月にTGS VRなどを手掛けている&lt;a href="https://ambr.co.jp/"&gt;ambr&lt;/a&gt;さんのテックブログにて&lt;a href="https://ambr-inc.hatenablog.com/entry/20230512/1683882000"&gt;VRメタバースのリアルタイム通信サーバーの技術にMagicOnionとNATSを選んだ話&lt;/a&gt;という紹介もしていただいていました。&lt;/p&gt;
&lt;h2&gt;OSSとメンテナンスの引き継ぎ&lt;/h2&gt;
&lt;p&gt;権限の移管は何度か経験があって&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mihaifm/linq"&gt;linq.js&lt;/a&gt;、&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/runceel/ReactiveProperty"&gt;ReactiveProperty&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/xin9le/CloudStructures"&gt;CloudStructures&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;は完全に手放しています。ほか、&lt;a href="https://github.com/Cysharp/MagicOnion"&gt;MagicOnion&lt;/a&gt;はCysharp名義に移ったうえで、現在の開発リードは私ではありません。また、最近では&lt;a href="https://github.com/MessagePack-CSharp/MessagePack-CSharp"&gt;MessagePack for C#&lt;/a&gt;はMessagePack-CSharp Organizationに移していて共同のOwner権限になっています。&lt;/p&gt;
&lt;p&gt;どうしても常に100%の力を一つのOSSに注ぐことはできないので、本来はうまく移管していけるのが良いわけですが、いつもうまくできるわけじゃなくて、&lt;a href="https://github.com/neuecc/Utf8Json"&gt;Utf8Json&lt;/a&gt;なんかはうまく移管できないままarchivedにしてしまっています。&lt;/p&gt;
&lt;p&gt;やっぱ出した当時は自分が手綱を握っていたいという気持ちがとても強いわけですが、関心が徐々に薄れていくタイミングと他の人に渡せるタイミングがうまく噛み合わないと、死蔵になってしまうというところがあり、まぁ、難しいです。これだけやっていても上手くできないなあ、と……。&lt;/p&gt;
&lt;p&gt;今回のは大変良い経験だったので、作ってメンテナンスを続ける、そしてその先についても考えてやっていきたいところですね。&lt;/p&gt;
&lt;p&gt;ともあれ、良い事例を一つ作れた＆素晴らしいライブラリをC#に一つ持ち込むことができたということで、とても気分がよいですです。&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Thu, 20 Jul 2023 00:00:00 +0900</pubDate>
      <a10:updated>2023-07-20T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2023/07/07_mvp-renew13.html</guid>
      <link>https://neue.cc/2023/07/07_mvp-renew13.html</link>
      <title>Microsoft MVP for Developer Technologies(C#)を再々々々々々々々々々々々受賞しました</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2023/07/07_mvp-renew13.html"&gt;Microsoft MVP for Developer Technologies(C#)を再々々々々々々々々々々々受賞しました&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2023-07-07&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;13回目です！一年ごとに再審査での更新で、変わらずC#の最前線に立てています。&lt;/p&gt;
&lt;p&gt;活動の中心は引き続きOSSですが、&lt;a href="https://github.com/Cysharp"&gt;github/Cysharp&lt;/a&gt;でのスター数は変わらず他を圧倒していると思いますし、毎年の新規の公開数の勢いも変わらずで新しいアイディアを出し続けています。&lt;/p&gt;
&lt;p&gt;今年は&lt;a href="https://github.com/Cysharp/csbindgen"&gt;csbindgen&lt;/a&gt;を起点にしてRustを活用してC#の活用幅をより広げていくことを狙っています。先日公開した&lt;a href="https://github.com/Cysharp/MagicPhysX"&gt;MagicPhysX&lt;/a&gt;の他にも色々計画がって、かなり面白いインパクトが出せるんじゃないかと思っています。&lt;/p&gt;
&lt;p&gt;MessagePack for C#も&lt;a href="https://github.com/MessagePack-CSharp/MessagePack-CSharp"&gt;MessagePack-CSharp/MessagePack-CSharp&lt;/a&gt;と、organization名義に移したことで（変わらず私はOwnerなので権限を手放したわけではありません）より中立的に発展させていきます。直近ではSource Generator対応が予定されています(preview版を公開中）。&lt;/p&gt;
&lt;p&gt;というわけで、これはもう満場一致でC#に貢献しているということでいいんじゃないでしょうかね……？&lt;/p&gt;
&lt;p&gt;ここ最近は登壇していなかったのですが、去年は&lt;a href="https://speakerdeck.com/neuecc/c-number-11-niyorushi-jie-zui-su-bainarisiriaraiza-memorypack-nozuo-rifang"&gt;C#11 による世界最速バイナリシリアライザー「MemoryPack」の作り方&lt;/a&gt;というセッションをしました。その流れということで、今年の8月にCEDEC 2023にて&lt;a href="https://cedec.cesa.or.jp/2023/session/detail/s642165615a6b5"&gt;モダンハイパフォーマンスC# 2023 Edition&lt;/a&gt;、それと共同講演で&lt;a href="https://cedec.cesa.or.jp/2023/session/detail/s64258612468b3"&gt;メタバースプラットフォーム「INSPIX WORLD」はPHPもC++もまとめてC#に統一！～MagicOnionが支えるバックエンド最適化手法～&lt;/a&gt;という2つの登壇予定があるので、ぜひ見に来てください。&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Fri, 07 Jul 2023 00:00:00 +0900</pubDate>
      <a10:updated>2023-07-07T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2023/07/04_MagicPhysX.html</guid>
      <link>https://neue.cc/2023/07/04_MagicPhysX.html</link>
      <title>MagicPhysX - .NET用のクロスプラットフォーム物理エンジン</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2023/07/04_MagicPhysX.html"&gt;MagicPhysX - .NET用のクロスプラットフォーム物理エンジン&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2023-07-04&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;MagicPhysXというライブラリを新しく公開しました！.NETで物理エンジンを動かすというもので、その名の通り、&lt;a href="https://github.com/NVIDIA-Omniverse/PhysX"&gt;NVIDIA PhysX
&lt;/a&gt;のC#バインディングとなっています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Cysharp/MagicPhysX"&gt;Cysharp/MagicPhysX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使い道としては&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GUIアプリケーションの3D部分&lt;/li&gt;
&lt;li&gt;自作ゲームエンジンへの物理エンジン組み込み&lt;/li&gt;
&lt;li&gt;ディープラーニングのためのシミュレーション&lt;/li&gt;
&lt;li&gt;リアルタイム通信におけるサーバーサイド物理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;といったことが考えられます。&lt;/p&gt;
&lt;p&gt;.NET用のPhysXバインディングは他にも存在しますが、C++/CLIでバインディングを生成している都合上Windowsでしか動かせなかったり、バージョンが最新ではない4.xベースだったりしますが、MagicPhysXは最新のPhysX 5ベースで、かつ、Windows, MacOS, Linuxの全てで動きます！(win-x64, osx-x64, osx-arm64, linux-x64, linux-arm64)。これはバインディングの作り方としてクロスプラットフォームコンパイルに強いRustと、&lt;a href="https://github.com/Cysharp/csbindgen"&gt;Cysharp/csbindgen&lt;/a&gt;によってC#のバインディングの自動生成をしているからです。&lt;/p&gt;
&lt;p&gt;先にアーキテクチャの話をしましょう。MagicPhysXは&lt;a href="https://www.embark-studios.com/"&gt;EmbarkStudios&lt;/a&gt;による&lt;a href="https://github.com/EmbarkStudios/physx-rs"&gt;physx-rs&lt;/a&gt;をビルド元に使っています。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EmbarkStudiosはEA DICEで&lt;a href="https://www.ea.com/frostbite"&gt;Frostbite&lt;/a&gt;ゲームエンジン(Battlefield)を作っていた人たちが独立して立ち上げたスタジオで、Rustによるゲームエンジンを作成中です。また、その過程で生まれたRustのライブラリをOSSとして積極的に公開しています。一覧は&lt;a href="https://embark.dev/"&gt;Embark Studios Open Source&lt;/a&gt;にあります。必見！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;PhysXのライブラリはC++で出来ていて、他の言語で使うことは考慮されていません。そのために他の言語に持ち込むためには、C++上で別言語で使うためのブリッジ部分を作った上で、バインディングを用意するという二度手間が必要になってきます。それはRustであっても例外ではありません。また、二度手間というだけではなく、PhysXのソースコードはかなり大きいため、その作業量も膨大です。&lt;/p&gt;
&lt;p&gt;以前に&lt;a href="https://neue.cc/2023/03/09-csbindgen.html"&gt;csbindgen - C#のためのネイティブコード呼び出し自動生成、或いはC#からのネイティブコード呼び出しの現代的手法について&lt;/a&gt;で紹介しましたが、&lt;a href="https://www.swig.org/"&gt;SWIG&lt;/a&gt;などのC++からの自動生成、Rustであれば&lt;a href="https://cxx.rs/"&gt;cxx&lt;/a&gt;、&lt;a href="https://github.com/google/autocxx"&gt;autocxx&lt;/a&gt;のような自動化プロジェクトも存在しますが、C++そのものの複雑さからいっても、求めるものを全自動で出力するのは難しかったりします。&lt;/p&gt;
&lt;p&gt;physx-rsでは&lt;a href="https://www.youtube.com/watch?v=RxtXGeDHu0w"&gt;An unholy fusion of Rust and C++ in physx-rs (Stockholm Rust Meetup, October 2019)&lt;/a&gt;というセッションでPhysXをRustに持ち込むための手段の候補、実際に採用した手段についての解説があります。最終的に採用された手段について端的に言うと、PhysXに特化してコード解析してC APIを生成する独自ジェネレーターを用意した、といったところでしょうか。そしてつまり、physx-rsには他言語でもバインディング手段として使えるPhysXのC APIを作ってくれたということにもなります！&lt;/p&gt;
&lt;p&gt;更にcsbindgenには、rsファイル内のextern &amp;quot;C&amp;quot;の関数からC#を自動生成する機能が備わっているので、Rustを経由することでC++のPhysXをC#に持ち込めるというビルドパイプラインとなりました。&lt;/p&gt;
&lt;p&gt;そういう成り立ちであるため、MagicPhysXのAPIはPhysXのAPIそのものになっています。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using MagicPhysX; // for enable Extension Methods.
using static MagicPhysX.NativeMethods; // recommend to use C API.

// create foundation(allocator, logging, etc...)
var foundation = physx_create_foundation();

// create physics system
var physics = physx_create_physics(foundation);

// create physics scene settings
var sceneDesc = PxSceneDesc_new(PxPhysics_getTolerancesScale(physics));

// you can create PhysX primitive(PxVec3, etc...) by C# struct
sceneDesc.gravity = new PxVec3 { x = 0.0f, y = -9.81f, z = 0.0f };

var dispatcher = phys_PxDefaultCpuDispatcherCreate(1, null, PxDefaultCpuDispatcherWaitForWorkMode.WaitForWork, 0);
sceneDesc.cpuDispatcher = (PxCpuDispatcher*)dispatcher;
sceneDesc.filterShader = get_default_simulation_filter_shader();

// create physics scene
var scene = physics-&amp;gt;CreateSceneMut(&amp;amp;sceneDesc);

var material = physics-&amp;gt;CreateMaterialMut(0.5f, 0.5f, 0.6f);

// create plane and add to scene
var plane = PxPlane_new_1(0.0f, 1.0f, 0.0f, 0.0f);
var groundPlane = physics-&amp;gt;PhysPxCreatePlane(&amp;amp;plane, material);
scene-&amp;gt;AddActorMut((PxActor*)groundPlane, null);

// create sphere and add to scene
var sphereGeo = PxSphereGeometry_new(10.0f);
var vec3 = new PxVec3 { x = 0.0f, y = 40.0f, z = 100.0f };
var transform = PxTransform_new_1(&amp;amp;vec3);
var identity = PxTransform_new_2(PxIDENTITY.PxIdentity);
var sphere = physics-&amp;gt;PhysPxCreateDynamic(&amp;amp;transform, (PxGeometry*)&amp;amp;sphereGeo, material, 10.0f, &amp;amp;identity);
PxRigidBody_setAngularDamping_mut((PxRigidBody*)sphere, 0.5f);
scene-&amp;gt;AddActorMut((PxActor*)sphere, null);

// simulate scene
for (int i = 0; i &amp;lt; 200; i++)
{
    // 30fps update
    scene-&amp;gt;SimulateMut(1.0f / 30.0f, null, null, 0, true);
    uint error = 0;
    scene-&amp;gt;FetchResultsMut(true, &amp;amp;error);

    // output to console(frame-count: position-y)
    var pose = PxRigidActor_getGlobalPose((PxRigidActor*)sphere);
    Console.WriteLine($&amp;quot;{i:000}: {pose.p.y}&amp;quot;);
}

// release resources
PxScene_release_mut(scene);
PxDefaultCpuDispatcher_release_mut(dispatcher);
PxPhysics_release_mut(physics);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;つまり、そのままでは決して扱いやすくはないです。部分的に動かすだけではなく、本格的にアプリケーションを作るなら、ある程度C#に沿った高レベルなフレームワークを用意する必要があるでしょう。MagicPhysX内ではそうしたサンプルを用意しています。それによって上のコードはこのぐらいシンプルになります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using MagicPhysX.Toolkit;
using System.Numerics;

unsafe
{
    using var physics = new PhysicsSystem(enablePvd: false);
    using var scene = physics.CreateScene();

    var material = physics.CreateMaterial(0.5f, 0.5f, 0.6f);

    var plane = scene.AddStaticPlane(0.0f, 1.0f, 0.0f, 0.0f, new Vector3(0, 0, 0), Quaternion.Identity, material);
    var sphere = scene.AddDynamicSphere(1.0f, new Vector3(0.0f, 10.0f, 0.0f), Quaternion.Identity, 10.0f, material);

    for (var i = 0; i &amp;lt; 200; i++)
    {
        scene.Update(1.0f / 30.0f);

        var position = sphere.transform.position;
        Console.WriteLine($&amp;quot;{i:D2} : x={position.X:F6}, y={position.Y:F6}, z={position.Z:F6}&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ただしあくまでサンプルなので、参考にしてもらいつつも、必要な部分は自分で作ってもらう必要があります。&lt;/p&gt;
&lt;p&gt;Unityのようなエディターがないと可視化されてなくて物理エンジンが正しい挙動になっているのか確認できない、ということがありますが、PhysXにはPhysX Visual Debuggerというツールが用意されていて、MagicPhysXでも設定することでこれと連動させることが可能です。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/250030945-2018e821-41c4-44a2-aac6-f0705993ab9b.png" alt="" /&gt;&lt;/p&gt;
&lt;h2&gt;Dedicated Server&lt;/h2&gt;
&lt;p&gt;Cysharpでは&lt;a href="https://github.com/Cysharp/MagicOnion"&gt;MagicOnion&lt;/a&gt;や&lt;a href="https://github.com/Cysharp/LogicLooper"&gt;LogicLooper&lt;/a&gt;といったサーバーサイドでゲームのロジックを動かすためのライブラリを開発しています。その路線から行って物理エンジンが必要なゲームでさえも通常の .NET サーバーで動かしたいという欲求が出てくるのは至極当然でしょう……（？）&lt;/p&gt;
&lt;p&gt;UEやUnityのDedicated Serverの構成だとヘッドレスなUE/Unityアプリケーションをサーバー用ビルドしてホスティングすることになりますが、サーバー用のフレームワークではないので、あまり作りやすいとは言えないんですよね。通常用サーバー向けのライブラリとの互換性、ライフサイクルの違い、ランタイムとしてのパフォーマンスの低さ、などなど。&lt;/p&gt;
&lt;p&gt;というわけで、MagicOnionのようなサーバー向けフレームワークを使ったほうがいいのですが、物理エンジンだけはどうにもならない。今までは……？&lt;/p&gt;
&lt;p&gt;と、言いたいのですが、まずちゃんとしっかり言っておきたいのですが、現実的には少々（かなり）難しいでしょう！コライダーどう持ってくるの？とかAPIが違う（Unityの物理エンジンはPhysXですが、API的に1:1の写しではないので細かいところに差異がある）のでそもそも挙動を合わせられないし、でもこういう構成ならサーバーだけじゃなくクライアントでも動かしたい、そもそもそうじゃないとデバッガビリティが違いすぎる。&lt;/p&gt;
&lt;p&gt;と、ようするに、もしゲーム自体にある程度、物理エンジンに寄せた挙動が必要なら、「物理エンジン大統一」が必須だと。MagicPhysXは残念ながらそうではありません。実のところ当初はそれを目指していました、Unityとほぼ同一挙動でほぼ同一APIになるのでシームレスに持ち込むことができるライブラリなのだ、と。しかし現状はそうではないということは留意してください。また、その当初予定である互換APIを作り込む予定もありません。&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;このライブラリ、かなり迷走したプロジェクトでもあって、そもそも最初は&lt;a href="https://github.com/bulletphysics/bullet3"&gt;Bullet Physics&lt;/a&gt;を採用する予定でした。ライブラリ名が先に決めてあってMagicBulletってカッコイイじゃん、みたいな。その後に&lt;a href="https://github.com/jrouwe/JoltPhysics"&gt;Jolt Physics&lt;/a&gt;を使おうとして、これもバインディングをある程度作って動く状態にしたのですが、「物理エンジン大統一」のためにPhysXにすべきだろうな、という流れで最終的にPhysXを使って作ることにしました。&lt;/p&gt;
&lt;p&gt;形になって良かったというのはありますが（そしてcsbindgenの実用性！）、「物理エンジン大統一」を果たせなかったのは少々残念ではあります。最初の完成予想図ではもっともっと革命的なもののはずだったのですが……！&lt;/p&gt;
&lt;p&gt;とはいえ、PhysX 5をクロスプラットフォームで.NETに持ち込んだということだけでも十分に難易度が高く新しいことだと思っているので、試す機会があれば、是非触って見ください。&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Tue, 04 Jul 2023 00:00:00 +0900</pubDate>
      <a10:updated>2023-07-04T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2023/03/09-csbindgen.html</guid>
      <link>https://neue.cc/2023/03/09-csbindgen.html</link>
      <title>csbindgen - C#のためのネイティブコード呼び出し自動生成、或いはC#からのネイティブコード呼び出しの現代的手法について</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2023/03/09-csbindgen.html"&gt;csbindgen - C#のためのネイティブコード呼び出し自動生成、或いはC#からのネイティブコード呼び出しの現代的手法について&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2023-03-09&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;ネイティブコードとC#を透過的に接続するために、RustのFFIからC#のDllImportコードを自動生成するライブラリを作成し、公開しました。Cysharp初のRustライブラリです！先週にプレビューを出していましたが、しっかりした機能強化とReadMeの充実をして正式公開、です！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Cysharp/csbindgen"&gt;Cysharp/csbindgen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://crates.io/crates/csbindgen"&gt;crates.io/crates/csbindgen&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;めちゃくちゃスムーズにネイティブコードがC#から呼べるようになります。すごい簡単に。超便利。こりゃもうばんばんネイティブコード書きたくなりますね……！ただし書くコードはRustのみ対応です。いや、別にRustでいいでしょ、Rustはいいぞ……！&lt;/p&gt;
&lt;p&gt;しかしまず前提として言っておくと、ネイティブコードは別に偉くもなければ、必ず速いというわけでもないので、極力書くのはやめましょう。C#で書くべき、です。高速なコードが欲しければ、ネイティブコードに手を出す前にC#で速くすることを試みたほうがずっと良いです。C#は十分高速に書くことのできる言語です！ネイティブコードを書くべきでない理由は山ほどありますが、私的に最大の避けたい理由はクロスプラットフォームビルドで、今の世の中、ターゲットにしなければならないプラットフォーム/アーキテクチャの組み合わせは、普通にやっていても10を超えてしまいます。win/linux/osx/iOS/Android x x86/x64/arm。C#では .NET のランタイムやUnityが面倒見てくれますが、ネイティブコードの場合はこれを自前で面倒みていく必要があります。そこそこ面倒みてくれるはずのUnityだって辛いのに、それにプラスして俺々ビルド生態系を加えるのはかなり厳しいものがある。&lt;/p&gt;
&lt;p&gt;とはいえ、C#をメインに据えつつもネイティブコードを利用すべきシチュエーションもあるにはあります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Android NDKや .NET unmanaged hosting APIなど、ネイティブAPIしか提供されていないものを使いたい場合&lt;/li&gt;
&lt;li&gt;C で作られているネイティブライブラリを利用したい場合&lt;/li&gt;
&lt;li&gt;ランタイムのライブラリの利用を避けたい場合、例えばUnityで .NET のSocket(Unityの場合 .NET のランタイムが古いのでパフォーマンスを出しにくい)を避けてネイティブのネットワークコードを書くのには一定の道理がある&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/ja-jp/dotnet/core/deploying/native-aot/"&gt;NativeAOT&lt;/a&gt;という解決策もなくはないですが、まだそんなに現実的でもなければ、用途的にもこういうシチュエーションでは限定的でもあるので、そこは素直にネイティブコードを書いていくべき、でしょう。&lt;/p&gt;
&lt;p&gt;そこでの最初の選択肢は当然C++なわけですが、いやー、C++のクロスプラットフォームビルドは大変だしなあ。となると、最近評判を聞く&lt;a href="https://ziglang.org/ja/"&gt;Zig&lt;/a&gt;はどうだろうか、と試してみました、が、撤退。目指すコンセプトは大変共感するところがあるのですが(FFIなしのCライブラリとの統合や、安全だけど複雑さを抑えた文法など)、まだ、完成度が、かなり、厳しい……。&lt;/p&gt;
&lt;p&gt;で、最後の選択肢が&lt;a href="https://www.rust-lang.org/ja"&gt;Rust&lt;/a&gt;でした。FFIなしでの呼び出しではないものの&lt;a href="https://crates.io/crates/cc"&gt;cc crate&lt;/a&gt;や&lt;a href="https://crates.io/crates/cmake"&gt;cmake crate&lt;/a&gt;といったライブラリを使うと自然に統合されるし、&lt;a href="https://github.com/rust-lang/rust-bindgen"&gt;bindgen&lt;/a&gt;によるバインディングの自動生成はよく使われているだけあってめっちゃ安定して簡単に生成できます。ていうかZigが全然安定感なかった（シームレスなCとの統合とは……）ので雲泥の差でびっくりした。開発環境もまぁまぁ充実してるしコマンド体系も現代的。クロスプラットフォームビルドも容易！そして難しいと評判で避けていた言語面でも、いや、全然いいね。仕組みが理屈で納得できるし、C#とは文法面でもあまり離れていないので、全然すんなりと入れました。もちろん難しいところも多々ありますが、ラーニングカーブはそんなに急ではない、少なくとも最近のモダンC#をやり込んでる人なら全然大丈夫でしょう……！&lt;/p&gt;
&lt;p&gt;と、いうわけで、しかし主な用途はC#からの利用で、特にCライブラリの取り込みにRustを使おうと決めたわけですが、C#に対して公開するためのコードが膨大でキツかったので、自動化したかったんですね。DllImportの自動化は&lt;a href="https://www.swig.org/"&gt;SWIG&lt;/a&gt;や&lt;a href="https://github.com/mono/CppSharp"&gt;CppSharp&lt;/a&gt;というのもありますが、普通のC++をそのまま持ってこようとする思想は、複雑なコードを吐いてしまったりで正直イマイチだな、と。&lt;/p&gt;
&lt;p&gt;csbindgenは、まず、面倒なところをRustのbindgenに丸投げです。複雑なC(C++)のコードを解析対処にするから複雑になるのであって、bindgenによって綺麗なRustに整形してもらって、生成対象にするのはそうしたFFI向けに整理されたRustのみを対象にすることで、精度と生成コードの単純さを担保しました。自分でネイティブコードを書く場合も、RustはFFI不可能な型を公開しようとすると警告も出してくれるので、必然的に生成しやすい綺麗なコードになっています。型もRustは非常に整理されているため、C#とマッピングしやすくなっています。C#もまた近年のnintや&lt;code&gt;delegate*&lt;/code&gt;、.NET 6からの&lt;a href="https://learn.microsoft.com/ja-jp/dotnet/api/system.runtime.interopservices.clong"&gt;CLong&lt;/a&gt;などの追加によって自然なやり取りができるようになりました。csbindgenはそれら最新の言語機能を反映することで、自然で、かつパフォーマンスの良いバインディングコードを生成しています。&lt;/p&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;コンフィグにビルド時依存に追加してもらって、&lt;code&gt;build.rs&lt;/code&gt;というコンパイル前呼び出し(Rustのコードでpre-build書ける機能やビルド時依存を追加できる機能はとても良い)に設定を入れるだけです、簡単！&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-toml"&gt;[build-dependencies]
csbindgen = &amp;quot;1.2.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-rust"&gt;// extern &amp;quot;C&amp;quot; fnが書かれているlib.rsを読み取って DllImport[&amp;quot;nativelib&amp;quot;]なコードを&amp;quot;NativeMethods.g.cs&amp;quot;に出力する
csbindgen::Builder::default()
    .input_extern_file(&amp;quot;lib.rs&amp;quot;)
    .csharp_dll_name(&amp;quot;nativelib&amp;quot;)
    .generate_csharp_file(&amp;quot;../dotnet/NativeMethods.g.cs&amp;quot;)
    .unwrap();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;単純なコードを例に出すと、このx, yを受け取ってintを返す関数は&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;#[no_mangle]
pub extern &amp;quot;C&amp;quot; fn my_add(x: i32, y: i32) -&amp;gt; i32 {
    x + y
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;こういったC#コードを生成します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// NativeMethods.g.cs
using System;
using System.Runtime.InteropServices;

namespace CsBindgen
{
    internal static unsafe partial class NativeMethods
    {
        const string __DllName = &amp;quot;nativelib&amp;quot;;

        [DllImport(__DllName, EntryPoint = &amp;quot;my_add&amp;quot;, CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int my_add(int x, int y);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;直感的で単純な出力です、逆にそれがいい、むしろそれがいい。生成に対応している型はプリミティブ以外にもstructやunion、enum、関数やポインターなどRustのFFIで流せる型のほとんどには対応しています。&lt;/p&gt;
&lt;p&gt;また、Rustのbindgenやcc/cmake crateを併用すると、CのライブラリをC#に簡単に持ちこむことができます。例えば圧縮ライブラリの&lt;a href="https://github.com/lz4/lz4"&gt;lz4&lt;/a&gt;は、csbindgenでの生成の前にbindgenとccの設定も足してあげると&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// lz4.h を読み込んで lz4.rs にRust用のbindingコードを出力する
bindgen::Builder::default()
    .header(&amp;quot;c/lz4/lz4.h&amp;quot;)
    .generate().unwrap()
    .write_to_file(&amp;quot;lz4.rs&amp;quot;).unwrap();

// cc(C Compiler)によってlz4.cを読み込んでコンパイルしてリンクする
cc::Build::new().file(&amp;quot;lz4.c&amp;quot;).compile(&amp;quot;lz4&amp;quot;);

// bindgenの吐いたコードを読み込んでcsファイルを出力する
csbindgen::Builder::default()
    .input_bindgen_file(&amp;quot;lz4.rs&amp;quot;)
    .rust_file_header(&amp;quot;use super::lz4::*;&amp;quot;)
    .csharp_entry_point_prefix(&amp;quot;csbindgen_&amp;quot;)
    .csharp_dll_name(&amp;quot;liblz4&amp;quot;)
    .generate_to_file(&amp;quot;lz4_ffi.rs&amp;quot;, &amp;quot;../dotnet/NativeMethods.lz4.g.cs&amp;quot;)
    .unwrap();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これでC#から呼び出せるコードが簡単に生成できます。ビルドもRustで &lt;code&gt;cargo build&lt;/code&gt; するだけでCのコードがリンクされてDLLに含まれています。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// NativeMethods.lz4.g.cs

using System;
using System.Runtime.InteropServices;

namespace CsBindgen
{
    internal static unsafe partial class NativeMethods
    {
        const string __DllName = &amp;quot;liblz4&amp;quot;;

        [DllImport(__DllName, EntryPoint = &amp;quot;csbindgen_LZ4_compress_default&amp;quot;, CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
        public static extern int LZ4_compress_default(byte* src, byte* dst, int srcSize, int dstCapacity);

        // snip...
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;試してもらうと、本当に簡単にCライブラリが持ち込みができて感動します。Rustやbindgenがとにかく偉い。&lt;/p&gt;
&lt;p&gt;csbindgenはUnityでの利用も念頭においているので、よくあるiOSでのIL2CPPだけ __Internal にしたいみたいなシチュエーションでも&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;#if UNITY_IOS &amp;amp;&amp;amp; !UNITY_EDITOR
    const string __DllName = &amp;quot;__Internal&amp;quot;;
#else
    const string __DllName = &amp;quot;nativelib&amp;quot;;
#endif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;といったような生成ルールの変更がコンフィグに含めてあります。とても実用的で気が利いてます。&lt;/p&gt;
&lt;h2&gt;LibraryImport vs DllImport&lt;/h2&gt;
&lt;p&gt;.NET 7から&lt;a href="https://learn.microsoft.com/ja-jp/dotnet/standard/native-interop/pinvoke-source-generation"&gt;LibraryImport&lt;/a&gt;という新しい呼び出しのためのソースジェネレーターが追加されました。これはDllImportのラッパーになっていて、DllImportは、本来ネイティブコードとやり取りできない型(例えば配列や文字列などの参照型はC#のヒープ上に存在するもので、ネイティブ側に渡せない)を裏で自動的にやってくれるという余計なお世話が含まれていて、それがややこしさや性能面、そしてNativeAOTビリティの欠如などの問題を含んでいたので、そういう型が渡された場合はLibraryImportの生成するC#コードで吸収した上で、byte* としてDllImportに渡すようなラッパーが生成されるようになっています。&lt;/p&gt;
&lt;p&gt;つまり余計なお世話をする本来ネイティブコードとやり取りできない型を生成しないようにすればDllImportでも何の問題もないので、今回はDllImportでの生成を選んでいます。そのほうがUnityでも使いやすいし。&lt;/p&gt;
&lt;p&gt;Win32のAPIをDllImportで簡単に呼び出せるようにするために暗黙的な自動変換を多数用意しておく、というのは時代背景的には理解できます。C#がWindowsのためだけの言語であり、時折Win32 APIの呼び出しが必須なこともあったのは事実であり、便利な側面もあったでしょう。しかし現在はWindowsのためだけの言語でもなく、またWin32 APIの呼び出しに関しては&lt;a href="https://github.com/microsoft/CsWin32"&gt;CsWin32&lt;/a&gt;というSource Generatorを活用した支援も存在します。&lt;/p&gt;
&lt;p&gt;もう現代では、そうしたDllImportの古い設計を引きずって考える必要はない、頼るべきではないでしょう。つまり参照型を渡したり[In]や[Out]は使うべきではないし、変換を考慮した設計を練る必要もありません。実際 .NET 7ではそうしたDllImportの機能を使うとエラーにする&lt;a href="https://learn.microsoft.com/en-us/dotnet/api/system.runtime.compilerservices.disableruntimemarshallingattribute"&gt;DisableRuntimeMarshallingAttribute&lt;/a&gt;が追加されました。&lt;/p&gt;
&lt;p&gt;ポインターに関しても今はあまり忌避するものではないと思っています。そもそもネイティブとの通信はunsafeだし、Spanによって比較的使いやすい型に変換することも容易なので。中途半端に隠蔽するぐらいなら、DllImportするレイヤーではポインターはポインターとして持っておきましょう。C#として使いやすくするのは、その外側できっちりやればいい話です、DllImportで吸収するものではない。というのが今風の設計思想であると考えています。なんだったら私はIntPtrよりvoid*のほうが好きだよ。&lt;/p&gt;
&lt;h2&gt;コールバックの相互受け渡し&lt;/h2&gt;
&lt;p&gt;C# -&amp;gt; Rust あるいは Rust -&amp;gt; C# でコールバックを渡し合ってみましょう。まずRust側はこんな風に書くとします。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-rust"&gt;#[no_mangle]
pub extern &amp;quot;C&amp;quot; fn csharp_to_rust(cb: extern &amp;quot;C&amp;quot; fn(x: i32, y: i32) -&amp;gt; i32) {
    let sum = cb(10, 20); // invoke C# method
    println!(&amp;quot;{sum}&amp;quot;);
}

#[no_mangle]
pub extern &amp;quot;C&amp;quot; fn rust_to_csharp() -&amp;gt; extern fn(x: i32, y: i32) -&amp;gt; i32 {
    sum // return rust method
}

extern &amp;quot;C&amp;quot; fn sum(x:i32, y:i32) -&amp;gt; i32 {
    x + y
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;C#のメソッドを受け取ったら、それを読んで表示(println)するだけ、あるいは足し算する関数をC#に渡すだけ、のシンプルなメソッドです。生成コードは以下のようなものになります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[DllImport(__DllName, EntryPoint = &amp;quot;csharp_to_rust&amp;quot;, CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
public static extern void csharp_to_rust(delegate* unmanaged[Cdecl]&amp;lt;int, int, int&amp;gt; cb);

[DllImport(__DllName, EntryPoint = &amp;quot;rust_to_csharp&amp;quot;, CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
public static extern delegate* unmanaged[Cdecl]&amp;lt;int, int, int&amp;gt; rust_to_csharp();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;delegate* unmanaged[Cdecl]&amp;lt;int, int, int&amp;gt;&lt;/code&gt; というのは、あまり見慣れない定義だと思うのですが、C# 9.0から追加された本物の&lt;a href="https://learn.microsoft.com/ja-jp/dotnet/csharp/language-reference/proposals/csharp-9.0/function-pointers"&gt;関数ポインター&lt;/a&gt;になります。定義を手書きするのは少しややこしいですが、自動生成されるので特に問題なしでしょう（？）。使い勝手はかなりよく、普通の静的メソッドのように扱えます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// ネイティブ側に渡したい静的メソッドはUnmanagedCallersOnlyを付ける必要がある
[UnmanagedCallersOnly(CallConvs = new[] { typeof(CallConvCdecl) })]
static int Sum(int x, int y) =&amp;gt; x + y;

// &amp;amp;で関数ポインターを取得して渡す
NativeMethods.csharp_to_rust(&amp;amp;Sum);

// Rustからdelegate*を受け取る
var f = NativeMethods.rust_to_csharp();

// 受け取った関数ポインターは普通に呼び出せる
var v = f(20, 30);
Console.WriteLine(v); // 50
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;インスタンスメソッドを渡せないのか？というと渡せません。Cとの相互運用にそんなものはない。どうでもいい勝手な変換はしなくていい。第一引数にコンテキスト(void*)を受け取るコードを用意しておけばいいでしょう。&lt;/p&gt;
&lt;p&gt;ところで、UnityもC# 9.0対応、しているし関数ポインターも使えるには使えるのですが、&lt;a href="https://docs.unity3d.com/ja/2021.3/Manual/CSharpCompiler.html"&gt;Extensible calling conventions for unmanaged function pointers is not supported&lt;/a&gt;です。UnmanagedCallersOnlyAttributeもないしね。Unity Editor上では普通に動いちゃったりとかしますが、IL2CPPでは動かないのでちゃんと対応しましょう。csbindgenでは &lt;code&gt;csharp_use_function_pointer(false)&lt;/code&gt; というオプションを設定すると、従来のデリゲートを使用したコードを出力します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// csharp_use_function_pointer(false) の場合の出力結果、専用のデリゲートを一緒に吐き出すようになる
[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate int csharp_to_rust_cb_delegate(int x, int y);

[DllImport(__DllName, EntryPoint = &amp;quot;csharp_to_rust&amp;quot;, CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
public static extern void csharp_to_rust(csharp_to_rust_cb_delegate cb);

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public delegate int rust_to_csharp_return_delegate(int x, int y);

[DllImport(__DllName, EntryPoint = &amp;quot;rust_to_csharp&amp;quot;, CallingConvention = CallingConvention.Cdecl, ExactSpelling = true)]
public static extern rust_to_csharp_return_delegate rust_to_csharp();

// MonoPInvokeCallback属性を静的メソッドにつける(typeofでデリゲートを設定)
[MonoPInvokeCallback(typeof(NativeMethods.csharp_to_rust_cb_delegate))]
static int Sum(int x, int y) =&amp;gt; x + y;

// そのまま渡す
NativeMethods.csharp_to_rust(Method);

// 受け取る関数ポインターに関しては .NET の場合と一緒
var f = NativeMethods.rust_to_csharp();
var v = f(20, 30);
Console.WriteLine(v); // 50
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;面倒くさい専用のデリゲートも同時に出力してくれるので、定義はそこそこ楽になります（Action/Funcといった汎用デリゲートを使うと場合によりクラッシュしてしまったので、必ずそれぞれのパラメーター専用のデリゲートを出力するようにしています）。概ねcsbindgenがよしなに動くように面倒見てあげるので、属性の違いだけ考えればほぼ問題はありません。&lt;/p&gt;
&lt;h2&gt;コンテキスト&lt;/h2&gt;
&lt;p&gt;多値返しみたいなのは、普通にStructを作ってくださいという話になって、その場合は、C#側でStructはコピーされて、Rust側のメモリからはすぐ消えるということになります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-rust"&gt;#[no_mangle]
pub unsafe extern &amp;quot;C&amp;quot; fn return_tuple() -&amp;gt; MyTuple {
    MyTuple { is_foo: true, bar: 9999 }
}

#[repr(C)]
pub struct MyTuple {
    pub is_foo: bool,
    pub bar: i32,
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;もう少し寿命を長く、返却するStructをポインターで返して状態を持ちたい、という場合はRust的には少し工夫が必要です。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-rust"&gt;#[no_mangle]
pub extern &amp;quot;C&amp;quot; fn create_context() -&amp;gt; *mut Context {
    let ctx = Box::new(Context { foo: true });
    Box::into_raw(ctx)
}

#[no_mangle]
pub extern &amp;quot;C&amp;quot; fn delete_context(context: *mut Context) {
    unsafe { Box::from_raw(context) };
}

#[repr(C)]
pub struct Context {
    pub foo: bool,
    pub bar: i32,
    pub baz: u64
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// C#側、Context*を受け取って
var context = NativeMethods.create_context();

// なにか色々したりずっと持っていたり

// 最後に明示的にfreeしにいく
NativeMethods.delete_context(context);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Box::new&lt;/code&gt; でヒープ上にデータを確保して、&lt;code&gt;Box::into_raw&lt;/code&gt;でRust上でのメモリ管理から外します。Rustは通常だとスコープが外れると即座にメモリを返却する、のですが、寿命をRust管理外のC#に飛ばすので、素直に（？）unsafeにRust上の管理から外してしまうのが普通に素直でしょう。Rust側で確保しているメモリを開放する場合は、&lt;code&gt;Box::from_raw&lt;/code&gt;でRust上の管理に戻します。そうするとスコープが外れたらメモリ返却という通常の動作をして、返却が完了します。&lt;/p&gt;
&lt;p&gt;この辺はRustだから難しい！という話ではなく、C#でもfixedスコープを外れてポインタを管理したい場合には &lt;code&gt;GCHandle.Allocc(obj, GCHandleType.Pinned)&lt;/code&gt; して手動でunsafeな管理しなければいけないので、完全に同じ話です。そう考えると、むしろ素直にC#と変わらない話でいいですね。&lt;/p&gt;
&lt;p&gt;なお、C#上でこうしたコンテキストの管理をする場合に専用のSafeHandleを作って、それにラップするという流儀がありますが、大仰で、基本的にはそこまでやる必要はないと思ってます。No SafeHandle。そもそも境界越えというunsafeなことをしているのだから、最後まで自己責任でいいでしょう。&lt;/p&gt;
&lt;p&gt;csbindgenは戻り値にstructが指定されていると、C#側にも同様のものを生成しに行ってしまいますが、Rust内だけで使うのでC#側には内容公開したくない、というか参照(Box)とかも含まれてるから公開できないし、みたいな場合もあると思います。その場合は &lt;code&gt;c_void&lt;/code&gt; を返してください。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-rust"&gt;#[no_mangle]
pub extern &amp;quot;C&amp;quot; fn create_counter_context() -&amp;gt; *mut c_void {
    let ctx = Box::new(CounterContext {
        set: HashSet::new(),
    });
    Box::into_raw(ctx) as *mut c_void // voidで返す
}

#[no_mangle]
pub unsafe extern &amp;quot;C&amp;quot; fn insert_counter_context(context: *mut c_void, value: i32) {
    let mut counter = Box::from_raw(context as *mut CounterContext); // as で型を戻す
    counter.set.insert(value);
    Box::into_raw(counter); // contextを使い続ける場合はinto_rawを忘れないように
}

#[no_mangle]
pub unsafe extern &amp;quot;C&amp;quot; fn delete_counter_context(context: *mut c_void) {
    let counter = Box::from_raw(context as *mut CounterContext);
    for value in counter.set.iter() {
        println!(&amp;quot;counter value: {}&amp;quot;, value)
    }
}

// C#側には公開しない
pub struct CounterContext {
    pub set: HashSet&amp;lt;i32&amp;gt;,
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// C#側では ctx = void* として受け取る
var ctx = NativeMethods.create_counter_context();
    
NativeMethods.insert_counter_context(ctx, 10);
NativeMethods.insert_counter_context(ctx, 20);

NativeMethods.delete_counter_context(ctx);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この辺、&lt;code&gt;PhantomData&amp;lt;T&amp;gt;&lt;/code&gt;を使って格好良く処理する手法も一応あるんですが、正直複雑になるだけなので、素直に &lt;code&gt;void*&lt;/code&gt; ベースでやり取りする、に倒したほうがむしろ健全でいいのではと思っています。どっちにしろunsafeな処理してるんだから素直にunsafeな業を受け入れるべき！&lt;/p&gt;
&lt;h2&gt;Stringと配列のマーシャリング&lt;/h2&gt;
&lt;p&gt;Stringと配列は、C#とRustでそれぞれ構造が違うので、そのままやり取りはできません。ポインタと長さ、つまりC#でいうところのSpanのみがやり取りできます。Span的な処理をするだけならゼロコピーですが、Stringや配列に変換したくなったら、C#とRust、どちらの側でも新規のアロケーションが発生します。これはネイティブコードを導入することの弱みで、Pure C#で通したほうが融通が効く（或いはパフォーマンスに有利に働く）ポイントですね。まあ、ともあれ、つまり基本はSpanです。DllImport上でStringを受けたり配列を受けたりしてはいけません、その手の自動変換にゆだねてはダメ！アロケーションも自己責任で明示的に。&lt;/p&gt;
&lt;p&gt;さて、まずは文字列ですが、こういったケースでやり取りする文字列の種類は3つ、UTF8とUTF16と&lt;a href="https://ja.wikipedia.org/wiki/%E3%83%8C%E3%83%AB%E7%B5%82%E7%AB%AF%E6%96%87%E5%AD%97%E5%88%97"&gt;ヌル終端文字列&lt;/a&gt;、です。UTF8はRustの文字列(RustのStringは&lt;code&gt;Vec&amp;lt;u8&amp;gt;&lt;/code&gt;)、C#の文字列はUTF16、そしてCのライブラリなどはヌル終端文字列を返してくることがあります。&lt;/p&gt;
&lt;p&gt;今回は例なので明示的にRust上でヌル終端文字列を返してみます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-rust"&gt;#[no_mangle]
pub extern &amp;quot;C&amp;quot; fn alloc_c_string() -&amp;gt; *mut c_char {
    let str = CString::new(&amp;quot;foo bar baz&amp;quot;).unwrap();
    str.into_raw()
}

#[no_mangle]
pub unsafe extern &amp;quot;C&amp;quot; fn free_c_string(str: *mut c_char) {
    unsafe { CString::from_raw(str) };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// null-terminated `byte*` or sbyte* can materialize by new String()
var cString = NativeMethods.alloc_c_string();
var str = new String((sbyte*)cString);
NativeMethods.free_c_string(cString);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;C#上では new Stringでポインタ(&lt;code&gt;sbyte*&lt;/code&gt;)を渡すとヌル終端を探してStringを作ってくれます。明示的にアロケーションしているという雰囲気がいいですね。ポインタはこの場合Rustで確保したメモリなので、C#のヒープ上にコピー（新規String作成）したなら、即返却してやりましょう。&lt;/p&gt;
&lt;p&gt;Rustで確保したUTF8、byte[]、あるいはint[]などとにかく配列全般の話はもう少し複雑になってきます。Rustでの配列的なもの(&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;)をC#に渡すにあたっては、ポインタと長さをC#に渡せばOKといえばOKなのですが、解放する時にそれだけだと困ります。&lt;code&gt;Vec&amp;lt;T&amp;gt;&lt;/code&gt;の実態はポインタ、長さ、そしてキャパシティの3点セットになっているので、この3つを渡さなきゃいけないのですね。そして、都度3点セットを処理するのも面倒です、Rust的なメモリ管理を外したり戻したりの作業もあるし。&lt;/p&gt;
&lt;p&gt;というわけでちょっと長くなりますが以下のようなユーティリティーを用意しましょう。これの元コードは(元)Rustの開発元であるMozillaのコードなので安全安心です……！&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-rust"&gt;#[repr(C)]
pub struct ByteBuffer {
    ptr: *mut u8,
    length: i32,
    capacity: i32,
}

impl ByteBuffer {
    pub fn len(&amp;amp;self) -&amp;gt; usize {
        self.length.try_into().expect(&amp;quot;buffer length negative or overflowed&amp;quot;)
    }

    pub fn from_vec(bytes: Vec&amp;lt;u8&amp;gt;) -&amp;gt; Self {
        let length = i32::try_from(bytes.len()).expect(&amp;quot;buffer length cannot fit into a i32.&amp;quot;);
        let capacity = i32::try_from(bytes.capacity()).expect(&amp;quot;buffer capacity cannot fit into a i32.&amp;quot;);

        // keep memory until call delete
        let mut v = std::mem::ManuallyDrop::new(bytes);

        Self {
            ptr: v.as_mut_ptr(),
            length,
            capacity,
        }
    }

    pub fn from_vec_struct&amp;lt;T: Sized&amp;gt;(bytes: Vec&amp;lt;T&amp;gt;) -&amp;gt; Self {
        let element_size = std::mem::size_of::&amp;lt;T&amp;gt;() as i32;

        let length = (bytes.len() as i32) * element_size;
        let capacity = (bytes.capacity() as i32) * element_size;

        let mut v = std::mem::ManuallyDrop::new(bytes);

        Self {
            ptr: v.as_mut_ptr() as *mut u8,
            length,
            capacity,
        }
    }

    pub fn destroy_into_vec(self) -&amp;gt; Vec&amp;lt;u8&amp;gt; {
        if self.ptr.is_null() {
            vec![]
        } else {
            let capacity: usize = self.capacity.try_into().expect(&amp;quot;buffer capacity negative or overflowed&amp;quot;);
            let length: usize = self.length.try_into().expect(&amp;quot;buffer length negative or overflowed&amp;quot;);

            unsafe { Vec::from_raw_parts(self.ptr, length, capacity) }
        }
    }

    pub fn destroy_into_vec_struct&amp;lt;T: Sized&amp;gt;(self) -&amp;gt; Vec&amp;lt;T&amp;gt; {
        if self.ptr.is_null() {
            vec![]
        } else {
            let element_size = std::mem::size_of::&amp;lt;T&amp;gt;() as i32;
            let length = (self.length * element_size) as usize;
            let capacity = (self.capacity * element_size) as usize;

            unsafe { Vec::from_raw_parts(self.ptr as *mut T, length, capacity) }
        }
    }

    pub fn destroy(self) {
        drop(self.destroy_into_vec());
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Box::into_raw/from_rawのVec版という感じで、from_vecしたタイミングでメモリ管理から外すのと、destroy_into_vecするとメモリ管理を呼び側に戻す（何もしなければスコープを抜けて破棄される）といったような動作になっています。これはC#側でも(csbindgenによって)定義が生成されているので、メソッドを追加してやります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// C# side span utility
partial struct ByteBuffer
{
    public unsafe Span&amp;lt;byte&amp;gt; AsSpan()
    {
        return new Span&amp;lt;byte&amp;gt;(ptr, length);
    }

    public unsafe Span&amp;lt;T&amp;gt; AsSpan&amp;lt;T&amp;gt;()
    {
        return MemoryMarshal.CreateSpan(ref Unsafe.AsRef&amp;lt;T&amp;gt;(ptr), length / Unsafe.SizeOf&amp;lt;T&amp;gt;());
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これでByteBuffer*で受け取ったものを即Spanに変換できるようになりました！というわけで、Rust上の通常のstring、byte[]、それとint[]の例を見てみると&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-rust"&gt;#[no_mangle]
pub extern &amp;quot;C&amp;quot; fn alloc_u8_string() -&amp;gt; *mut ByteBuffer {
    let str = format!(&amp;quot;foo bar baz&amp;quot;);
    let buf = ByteBuffer::from_vec(str.into_bytes());
    Box::into_raw(Box::new(buf))
}

#[no_mangle]
pub unsafe extern &amp;quot;C&amp;quot; fn free_u8_string(buffer: *mut ByteBuffer) {
    let buf = Box::from_raw(buffer);
    // drop inner buffer, if you need String, use String::from_utf8_unchecked(buf.destroy_into_vec()) instead.
    buf.destroy();
}

#[no_mangle]
pub extern &amp;quot;C&amp;quot; fn alloc_u8_buffer() -&amp;gt; *mut ByteBuffer {
    let vec: Vec&amp;lt;u8&amp;gt; = vec![1, 10, 100];
    let buf = ByteBuffer::from_vec(vec);
    Box::into_raw(Box::new(buf))
}

#[no_mangle]
pub unsafe extern &amp;quot;C&amp;quot; fn free_u8_buffer(buffer: *mut ByteBuffer) {
    let buf = Box::from_raw(buffer);
    // drop inner buffer, if you need Vec&amp;lt;u8&amp;gt;, use buf.destroy_into_vec() instead.
    buf.destroy();
}

#[no_mangle]
pub extern &amp;quot;C&amp;quot; fn alloc_i32_buffer() -&amp;gt; *mut ByteBuffer {
    let vec: Vec&amp;lt;i32&amp;gt; = vec![1, 10, 100, 1000, 10000];
    let buf = ByteBuffer::from_vec_struct(vec);
    Box::into_raw(Box::new(buf))
}

#[no_mangle]
pub unsafe extern &amp;quot;C&amp;quot; fn free_i32_buffer(buffer: *mut ByteBuffer) {
    let buf = Box::from_raw(buffer);
    // drop inner buffer, if you need Vec&amp;lt;i32&amp;gt;, use buf.destroy_into_vec_struct::&amp;lt;i32&amp;gt;() instead.
    buf.destroy();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ByteBuffer自体の管理を外す(into_raw)が必要なのと、from_rawで戻したあとの中身のByteBufferもdestoryかinto_vecしなきゃいけないという、入れ子の管理になっているというのが紛らわしくて死にそうになりますが、ソウイウモノということで諦めましょう……。Drop traitを実装しておくことでクリーンナップ側の処理はもう少しいい感じにできる余地がありますが、Drop traitを実装しないことの理由もそれなりにある（と、Mozillaが言っている）ので、トレードオフになっています。&lt;/p&gt;
&lt;p&gt;C#側では、とりあえずAsSpanして、あとはよしなにするという感じですね。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var u8String = NativeMethods.alloc_u8_string();
var u8Buffer = NativeMethods.alloc_u8_buffer();
var i32Buffer = NativeMethods.alloc_i32_buffer();
try
{
    var str = Encoding.UTF8.GetString(u8String-&amp;gt;AsSpan());
    Console.WriteLine(str);

    Console.WriteLine(&amp;quot;----&amp;quot;);

    var buffer = u8Buffer-&amp;gt;AsSpan();
    foreach (var item in buffer)
    {
        Console.WriteLine(item);
    }

    Console.WriteLine(&amp;quot;----&amp;quot;);

    var i32Span = i32Buffer-&amp;gt;AsSpan&amp;lt;int&amp;gt;();
    foreach (var item in i32Span)
    {
        Console.WriteLine(item);
    }
}
finally
{
    NativeMethods.free_u8_string(u8String);
    NativeMethods.free_u8_buffer(u8Buffer);
    NativeMethods.free_i32_buffer(i32Buffer);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Rust側で確保したメモリはRust側で解放する！という基本に関しては忠実に守っていきましょう。この例だとC#側で処理したら即解放なので、いい感じにしてくれよ、なんだったらDllImportで暗黙的に自動処理最高、みたいな気になるかもしれませんが、もう少し長寿命で持つケースもあるので、やはりマニュアルでちゃんと解放していきましょう。ていうか暗黙的なアロケーションは一番最悪じゃないです？？？&lt;/p&gt;
&lt;p&gt;最後に、C#で確保したメモリをRust側で使う場合の例をどうぞ。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-rust"&gt;#[no_mangle]
pub unsafe extern &amp;quot;C&amp;quot; fn csharp_to_rust_string(utf16_str: *const u16, utf16_len: i32) {
    let slice = std::slice::from_raw_parts(utf16_str, utf16_len as usize);
    let str = String::from_utf16(slice).unwrap();
    println!(&amp;quot;{}&amp;quot;, str);
}

#[no_mangle]
pub unsafe extern &amp;quot;C&amp;quot; fn csharp_to_rust_utf8(utf8_str: *const u8, utf8_len: i32) {
    let slice = std::slice::from_raw_parts(utf8_str, utf8_len as usize);
    let str = String::from_utf8_unchecked(slice.to_vec());
    println!(&amp;quot;{}&amp;quot;, str);
}


#[no_mangle]
pub unsafe extern &amp;quot;C&amp;quot; fn csharp_to_rust_bytes(bytes: *const u8, len: i32) {
    let slice = std::slice::from_raw_parts(bytes, len as usize);
    let vec = slice.to_vec();
    println!(&amp;quot;{:?}&amp;quot;, vec);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var str = &amp;quot;foobarbaz:あいうえお&amp;quot;; // JPN(Unicode)
fixed (char* p = str)
{
    NativeMethods.csharp_to_rust_string((ushort*)p, str.Length);
}

var str2 = Encoding.UTF8.GetBytes(&amp;quot;あいうえお:foobarbaz&amp;quot;);
fixed (byte* p = str2)
{
    NativeMethods.csharp_to_rust_utf8(p, str2.Length);
}

var bytes = new byte[] { 1, 10, 100, 255 };
fixed (byte* p = bytes)
{
    NativeMethods.csharp_to_rust_bytes(p, bytes.Length);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;std::slice::from_raw_partsでSliceを作って、あとはよしなに処理したいことをします。関数を超えて長い寿命を持たせたいならコピー(String作りなりVec作るなり)は必須になってきます。Rust側で確保したメモリはRust側で解放する、のと同じように、C#側で確保したメモリはC#側で解放する、のが重要です。C#の場合はfixedスコープを抜けて参照を持っていない場合は、そのうちGCが処理してくれるでしょう、といった話ですね。&lt;/p&gt;
&lt;p&gt;なお、fixedを超えてC#でもう少し長い寿命で持ち回したいときは &lt;code&gt;GCHandle.Allocc(obj, GCHandleType.Pinned)&lt;/code&gt; して持ち回します。&lt;/p&gt;
&lt;h2&gt;Rust for C# Developer&lt;/h2&gt;
&lt;p&gt;Rustは、正直すごい気に入ってます。C#の次に気に入りました……！まぁ正直、これで全部やる、Webもなにもかも作る、みたいなのはヤバいかな、と思います。RustでWebやりたいって人はあれでしょ、型がついてて開発環境が充実していてエコシステムが回ってる言語がいいんでしょ？ちょうどいい言語があるんですよ、C#という。……。ではあるんですが、ネイティブが必要って局面で、やりたくないーって逃げたり、NativeAOTがなんとかしてくれるだのといった現実逃避したりせず、ちゃんと正面から向き合えるようになったということはいいことです。&lt;/p&gt;
&lt;p&gt;で、実際RustはかなりC#erに馴染む道具だと思っていて、そもそもインターフェイスがないかわりにstructとジェネリクスとtrait(インターフェイスみたいなやつ)で処理するってのは、別にそれC#でもやってますよ！C#のパフォーマンス最速パターンってstructにインターフェイス実装してジェネリクスの型制約でインターフェイス指定してボクシング/仮想メソッド呼び出し回避でstruct投げ込むことですからね。ようはC#の最速パターンだけが強制されてるんだと思えば何も違和感がない。&lt;/p&gt;
&lt;p&gt;インスタンスメソッドがないかわりに全部拡張メソッドみたいな雰囲気なのも、いやー、C#も、もはやインスタンスメソッドと拡張メソッド、どっちで実装すればいいかなーって切り分けに悩むこともあるし、&lt;a href="https://ufcpp.net/blog/2023/3/extensions/"&gt;C# 12候補のExtensions&lt;/a&gt;なんてきたら完全にどこで実装すりゃいいのかわからんわ、ってなるので、拡張メソッド一択(impl, trait)ですよ、みたいなのはすっきり整理されていて逆にいい。&lt;/p&gt;
&lt;p&gt;シンタックスも自然というかC系の多数派に寄り添った感じで親しみやすいし、ドットでメソッド繋げていくので、馴染み深いオブジェクト指向的な手触りが十分ある。それとミュータブルに寛容なところがいいですね。関数型にありがちなイミュータブル至上主義ではなく、どちらかというとメモリそこにあるんだからミュータブルやろ、みたいな雰囲気なのがとてもいい。無駄もないし。所有権周りが厳密なのでミュータブルであっても固めな手応えなのは、これでいいんだよというかこれで的な何かではある。&lt;/p&gt;
&lt;p&gt;マクロはコンパイル時ExpresionTreeみたいなもので、proc-macroはSource Generatorみたいなものなので、何が可能になるかすぐに理解できるし、便利さもよくわかる。ていうかコンパイル時ExpressionTreeはC#にも欲しい（実行時だからコスト重いのであんま使わないのでコンパイル時に解決するならもっとばんばん使えるはずなんだよねえ）。ただ、自由度がとても高いせいでマクロに入ると入力補完が完全に効かなくなる。そして自由度が高いのでマクロでDSL的な流れに高級ライブラリほどなりがちで、完全にマニュアル引きが必要になってくるのが、見た目はキレイにおさまるけど書き味はよくないな、的な体感になるのがもったいない。その点でいうとC#はやっぱ入力補完最優先な言語で、一貫した安定感を提供しているのはとても良いですね。&lt;/p&gt;
&lt;p&gt;キツいかなーと思うのは所有権がどうとかっていうよりも、ジェネリクスの見た目がキツい。C#だったらインターフェイスで動的ディスパッチで整理されているものが、ジェネリクスで静的ディスパッチに倒れているのでジェネリクスの出現率がめっちゃ高い。いや、だってC#でもジェネリクスでると読みやすさ的には一段落下がるわけじゃないですか、それが当たり前って感じだと、慣れとかって問題じゃなく見やすさレベルは下がる。更にその上にジェネリクスがネストするのが当たり前。C#だったらジェネリクスがネストしてるのは見やすさレベル最底辺なので極力出現しないようにしたいって感じなのですが、Rustだと日常茶飯事に出てくる。&lt;code&gt;Option&amp;lt;Rc&amp;lt;RefCell&amp;lt;_&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;とかも全然普通に出現するのが、うーむ。理屈では納得いくから特に文句があるようでなにもないんですが。&lt;/p&gt;
&lt;p&gt;なんだったらパターンマッチも別に好きじゃないしOptionもResultも好きじゃないしnullの何が悪いんだよぐらいの気持ちにならなくもないんですが、まぁそれはそれ。でも全体的には凄い良いですね、ほんと。&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;ところで&lt;a href="https://github.com/Cysharp/csbindgen"&gt;csbindgen&lt;/a&gt;のReadMeのほうには更にもっといっぱい変換パターンを紹介していますので、是非そちらもチェックしてみてください。&lt;/p&gt;
&lt;p&gt;ネイティブ呼び出しは定義の部分でも、二重定義がそもそもダルいうえに、かなり気を使わなきゃいけないことがなにげに多くて割と大変というか知識量と単純作業量を要求してくるのですが、csbindgenはその部分を完全自動化してくれます。自分でも使っててネイティブコードめっちゃ楽……！という気になります。事実楽。すごい。その後のメモリ管理に関しては、そこはまぁ思う存分悩んでくれという話になるのですが、もはや複雑な点がそれだけに落ち着いたという点では、やはり革命的に便利なのでは？という気になります。&lt;/p&gt;
&lt;p&gt;Cのライブラリを持ってくるのも圧倒的に楽なので、私の中でもちょっと考え方が変わってきました。今までは割とPure C#実装至上主義、みたいなところがあったんですが、うまい切り分け、使い分けみたいなのを考えられるようになりました。そして、Cライブラリ利用がより自由になると、まさに&lt;a href="https://cysharp.co.jp/"&gt;Cysharp&lt;/a&gt;の掲げる「C#の可能性を切り開いていく」ことにまた一つ繋がってしまったな、と。&lt;/p&gt;
&lt;p&gt;まずはこの後に数個、csbindgenを活用したC#ライブラリを提供する予定があります！のですが、その前に、Rustかー、とは思わずに是非csbindgen、試してみてもらえると嬉しいです。&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Thu, 09 Mar 2023 00:00:00 +0900</pubDate>
      <a10:updated>2023-03-09T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2023/01/30-SimdLinq.html</guid>
      <link>https://neue.cc/2023/01/30-SimdLinq.html</link>
      <title>SimdLinq - LINQをそのままSIMD対応して超高速化するライブラリ</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2023/01/30-SimdLinq.html"&gt;SimdLinq - LINQをそのままSIMD対応して超高速化するライブラリ&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2023-01-30&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;ついこないだの&lt;a href="https://neue.cc/2023/01/27_StructureOfArraysGenerator.html"&gt;StructureOfArraysGenerator - C#でSoAを簡単に利用するためのSource Generator&lt;/a&gt;は、SoAになってるとSIMDを適用しやすいよ、という話だったのですが、そもそもSIMD手書きはカジュアルにやらないし、気合い入れてSIMD書くシチュエーションなら構造も気合い入れて専用に設計するよなぁ。と、なると、カジュアルにSIMD使えるライブラリが必要で、まぁLINQですね、と。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Cysharp/SimdLinq"&gt;Cysharp/SimdLinq&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これを入れると別にSoA関係なく、SIMDが適用できる状態(例えばint[]にSum)だと、自動的にSIMDが適用されるようになります。そして、実際めちゃくちゃ速い。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/215410106-b68d8567-5abf-4aa4-a050-a803b1913187.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;SIMDとLINQの組み合わせが威力を発揮するというのは、別に新しいことではなく、そもそも .NET 7でも&lt;a href="https://devblogs.microsoft.com/dotnet/performance_improvements_in_net_7/#linq"&gt;Performance Improvements in .NET 7 LINQ&lt;/a&gt;で、幾つかのメソッドが内部でSIMD化されて高速化されていることが発表されています。しかし、 .NET 7のSIMD対応は非常に限定的なもので、具体的には&lt;code&gt;int[]&lt;/code&gt;の&lt;code&gt;Average&lt;/code&gt;,&lt;code&gt;Min&lt;/code&gt;,&lt;code&gt;Max&lt;/code&gt;、それと&lt;code&gt;long[]&lt;/code&gt;の&lt;code&gt;Min&lt;/code&gt;,&lt;code&gt;Max&lt;/code&gt;だけです。これには理由はなくはないのですが、本来SIMD対応できる範囲はもっと広いため、これでは非常にもったいない。&lt;/p&gt;
&lt;p&gt;SimdLinqを適用できるメソッドは &lt;code&gt;Sum&lt;/code&gt;, &lt;code&gt;Average&lt;/code&gt;, &lt;code&gt;Min&lt;/code&gt;, &lt;code&gt;Max&lt;/code&gt;, &lt;code&gt;MinMax&lt;/code&gt;, &lt;code&gt;Contains&lt;/code&gt;, &lt;code&gt;SequenceEqual&lt;/code&gt;、要素の型は &lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;sbyte&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;ushort&lt;/code&gt;, &lt;code&gt; int&lt;/code&gt;, &lt;code&gt;uint&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;ulong&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;、コレクションの型は &lt;code&gt;T[]&lt;/code&gt;, &lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;ReadOnlySpan&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;Memory&amp;lt;T&amp;gt;&lt;/code&gt;, &lt;code&gt;ReadOnlyMemory&amp;lt;T&amp;gt;&lt;/code&gt; と理屈上SIMD化できるものを全て詰め込みました。特に&lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt;/&lt;code&gt;ReadOnlySpan&amp;lt;T&amp;gt;&lt;/code&gt;は通常のLINQでは使えない（メソッドが定義されていない）ので、有益です。また、Min, Maxを同時に取得する&lt;code&gt;MinMax&lt;/code&gt;というメソッドを独自に追加しています。&lt;/p&gt;
&lt;p&gt;専用メソッドを呼ばせる（例えば&lt;code&gt;SumSimd()&lt;/code&gt;とか)ようでは使いにくいと思ったので、現在のコードを何も弄らずとも、ライブラリ参照してglobal usingを設定すれば、全ての適用可能なメソッドに自動適用される仕組みにしました。これは同名メソッドを定義して、具象型のほうにオーバーロード解決が優先採用されることを利用しています。&lt;/p&gt;
&lt;h2&gt;使い方&lt;/h2&gt;
&lt;p&gt;なので、使い方もなにもなく、usingすれば勝手にSimdLinqになって高速化されます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using SimdLinq; // enable SimdLinq extension methods

var array = Enumerable.Range(1, 100000).ToArray();

var sum = array.Sum(); // used SimdLinqExtensions.Sum
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;using忘れちゃうというのはあるので、そこでglobal usingです。csprojに&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;ItemGroup&amp;gt;
    &amp;lt;Using Include=&amp;quot;SimdLinq&amp;quot; /&amp;gt;
&amp;lt;/ItemGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;というのを仕込んでやれば、SimdLinqが使える場合はSimdLinqに、そうじゃないものは普通のLinqでオーバーロードが解決されるようになります。便利。&lt;/p&gt;
&lt;p&gt;具体的にSimdLinqが適用されるメソッドは以下のものになります。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Sum&lt;/code&gt; for &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;uint&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;ulong&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LongSum&lt;/code&gt; for &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;uint&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Average&lt;/code&gt; for &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;uint&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;ulong&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Min&lt;/code&gt; for &lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;sbyte&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;ushort&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;uint&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;ulong&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Max&lt;/code&gt; for &lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;sbyte&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;ushort&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;uint&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;ulong&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MinMax&lt;/code&gt; for &lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;sbyte&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;ushort&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;uint&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;ulong&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Contains&lt;/code&gt; for &lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;sbyte&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;ushort&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;uint&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;ulong&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SequenceEqual&lt;/code&gt; for &lt;code&gt;byte&lt;/code&gt;, &lt;code&gt;sbyte&lt;/code&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;code&gt;ushort&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;uint&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;ulong&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;互換性と安全性&lt;/h2&gt;
&lt;p&gt;.NET 7の標準に、このSimdLinqのようなアグレッシブなSIMD化が入らなかった理由は、互換性と安全性になります。え、安全じゃないの？というと怖くなるので、何が違うのかはしっかり把握しておきましょう。別に危険、というわけではないですが。&lt;/p&gt;
&lt;p&gt;まずSumとAverage(Averageの中身はSumしたのをLengthで割るだけなので中身は実質Sum)ですが、LINQのSumはcheckedで、オーバーフローすると例外を吐きます。SimdLinqはuncheckedです、つまりオーバーフローするとそのままオーバーフローしたまま結果を返します。checkedのほうが挙動としてはいいんですが、SIMD演算がオーバーフローのチェックできないので、SimdLinqではuncheckedとして提供しています。オーバーフローに関しては自己責任で。さすがにbyteのSumとかだとすぐオーバーフローしちゃうので、SimdLinqのSumは32 bit以上の要素にだけ提供しています、つまり&lt;code&gt;int&lt;/code&gt;, &lt;code&gt;long&lt;/code&gt;, &lt;code&gt;uint&lt;/code&gt;, &lt;code&gt;ulong&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;float&lt;/code&gt; です。そもそも元々のLINQのSum(引数なし)も&lt;code&gt;int&lt;/code&gt;からなので、その辺は一緒ということで。&lt;/p&gt;
&lt;p&gt;そうしたオーバーフローの危険性を避けたい場合、独自拡張として &lt;code&gt;LongSum&lt;/code&gt; というlongを戻り値にするSumメソッドを追加しています。内部的にlongで処理するため、(若干性能は落ちますが)オーバーフローしなくなります。&lt;/p&gt;
&lt;p&gt;float/doubleの扱いは挙動の違いが若干あります。まず、通常のLINQのMin, Maxは&lt;code&gt;NaN&lt;/code&gt;をチェックしますがSimdLinqは&lt;code&gt;NaN&lt;/code&gt;をチェックしません。&lt;code&gt;NaN&lt;/code&gt;チェックがあったほうが丁寧ですが、SIMDでそれは入れずらい＆NaNが入ってくるケースってあまりないので現実的にすごい問題か、というとそうではないかな、と。&lt;/p&gt;
&lt;p&gt;それとSumの場合に足し算の順序が変わって(LINQは前から順番に足しますが、SIMDだと並列に足すので)、浮動小数点演算だと足す順序が変わると微妙に誤差が出て同じ結果になりません。例えばLINQだと&lt;code&gt;1.5710588F&lt;/code&gt;だけどSimdLinqだと&lt;code&gt;1.5710589F&lt;/code&gt;になる、といったような違いが出てきます。結果としては別にどっちでも良い（ある意味で別にどっちも厳密にはあってない）と思いますが、結果の互換性がないですよ、ということは留意してください。&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;高速なLINQのAlternativeって、結構あります。&lt;a href="https://github.com/kevin-montrose/LinqAF"&gt;LinqAF&lt;/a&gt;、&lt;a href="https://github.com/jackmott/LinqFaster"&gt;LinqFaster&lt;/a&gt;、&lt;a href="https://github.com/NetFabric/NetFabric.Hyperlinq"&gt;NetFabric.Hyperlinq&lt;/a&gt;など。ただ、どれも大仰なんですよね、StructのIteratorを作ってー、とか。専用メソッドを呼ぶためにラップするのも手間だし、その割に凄い効果的というほどでもないから、依存を増やす割にはメリットも薄くなので、私自身は使おうとはあまり思ってませんでした。&lt;/p&gt;
&lt;p&gt;そこでSimdLinqではLINQ全体を高速化させることを狙っているわけではなくて、SIMDが適用できるものだけピンポイントに、そしてソースコードには一切手を入れる必要のない&amp;quot;Drop-in replacement&amp;quot;になるようにデザインしました。また、SIMDのみに絞ったことで性能面に明らかに圧倒的な差をだして、あえて使う理由を作る、といったところですね。&lt;/p&gt;
&lt;p&gt;ついでにそうなると欲張ってどんどん適用できる箇所を増やしたい、つまりは&lt;a href="https://github.com/Cysharp/StructureOfArraysGenerator"&gt;StructureOfArraysGenerator&lt;/a&gt;だ、みたいなコンボも狙っています。エコシステム囲い込み！囲い込みはEvil！&lt;/p&gt;
&lt;p&gt;そんなわけでSIMDシリーズ第一弾でした。今年はSIMD関連も幾つか出していくかもしれませんし、Source Generatorネタがめちゃくちゃ溜まってるので時間が無限大に必要です。まぁ、ともかくまずはSimdLinqを使って見てください！&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Mon, 30 Jan 2023 00:00:00 +0900</pubDate>
      <a10:updated>2023-01-30T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2023/01/27_StructureOfArraysGenerator.html</guid>
      <link>https://neue.cc/2023/01/27_StructureOfArraysGenerator.html</link>
      <title>StructureOfArraysGenerator - C#でSoAを簡単に利用するためのSource Generator</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2023/01/27_StructureOfArraysGenerator.html"&gt;StructureOfArraysGenerator - C#でSoAを簡単に利用するためのSource Generator&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2023-01-27&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;最近はSource Generatorブームが続いていて、去年末に&lt;a href="https://neue.cc/2022/12/16_IncrementalSourceGenerator.html"&gt;2022年のC# (Incremental) Source Generator開発手法&lt;/a&gt;という記事を出しましたが、まずは今年第一弾のSource Generatorライブラリです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Cysharp/StructureOfArraysGenerator/"&gt;github.com/Cysharp/StructureOfArraysGenerator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;これは何かというと、structure of arrays(SoA)を使いやすくするためのコードを生成するというものです。まずそもそもSoAですが、Wikipediaの&lt;a href="https://en.wikipedia.org/wiki/AoS_and_SoA"&gt;AoS and SoA&lt;/a&gt;という記事によるところ（日本語版はない）、CPUキャッシュを有効活用したりSIMDを適用させやすくなる構造だよ、と。通常C#の配列はarray of structures(AoS)になります。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/214814782-fd341e09-731a-4e2f-ba53-ef789a19160e.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;上の通常の配列がAoSでXYZXYZXYZXYZといったように並んでいる構造ですが、下のStructureOfArraysGeneratorで生成したSoAの配列はXXXXYYYYZZZZという並び順になります。実際にシンプルなパフォーマンステスト（Vector3[10000]に対してYの最大値を求める）によるところ&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/215027253-6f94739f-b827-46ba-a395-690d1df89d46.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;そのまま書いても2倍、SIMDで書きやすい状態なのでSIMDで処理してしまえば10倍高速化されます。というわけで、パフォーマンスが求められるシチュエーションで非常に有用です。&lt;/p&gt;
&lt;p&gt;このライブラリはZigという最近、日本でも注目されている言語（Node.jsの高速な代替として注目されている&lt;a href="https://bun.sh/"&gt;Bun&lt;/a&gt;の実装言語）のMultiArrayListにインスパイアされました。Zigの作者 Andrew Kelley氏が講演した &lt;a href="https://vimeo.com/649009599"&gt;A Practical Guide to Applying Data-Oriented Design&lt;/a&gt; という素晴らしい講演があるので是非見て欲しいのですが&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/215052372-1ab33bd2-a578-4c26-8e99-7615a49707ea.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;データ指向設計(Data-Oriented Design)はパフォーマンスを飛躍的に改善する魔法なのです。ん、それはどこかで聞いたような……？そう、&lt;a href="https://unity.com/ja/dots"&gt;UnityのDOTS&lt;/a&gt;です。Data-Oriented Technology Stackです。ECSです。……。まぁ、そんなわけで全体に導入するにはそうとうガラッと設計を変える必要があるので大変厳しくはあるのですが、講演での実例としてZig自身のコンパイラの事例が出てますが、まぁつまりは徹底的にやれば成果は出ます。&lt;/p&gt;
&lt;p&gt;しかしまぁ徹底的にやらず部分的に使っても効果があるのはUnityで Job System + Burst ぐらいでいいじゃん、という気持ちになっていることからも明らかです。というわけで部分的なSoA構造の導入にお使いください、かつ、導入や利用の敷居は全然高くないように設計しました。&lt;/p&gt;
&lt;h2&gt;MultiArray&lt;/h2&gt;
&lt;p&gt;NuGetからインストール（Unityの場合はgit参照か.unitypackageで）するとAnalyzerとして参照されます。StructureOfArraysGeneratorは属性も含めて依存はなく全てのコードが生成コードに含まれる（属性はinternal attributeとして吐かれる）ので、不要なライブラリ依存が増えることはありません。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[MultiArray(Type)]&lt;/code&gt;を配列的に使いたい&lt;code&gt;readonly partial struct&lt;/code&gt;につけます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using StructureOfArraysGenerator;

[MultiArray(typeof(Vector3))]
public readonly partial struct Vector3MultiArray
{
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;するとSource Generatorは内部的にはこういうコードを生成します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;partial struct Vector3MultiArray
{
    // constructor
    public Vector3MultiArray(int length)

    // Span&amp;lt;T&amp;gt; properties for Vector3 each fields
    public Span&amp;lt;float&amp;gt; X =&amp;gt; ...;
    public Span&amp;lt;float&amp;gt; Y =&amp;gt; ...;
    public Span&amp;lt;float&amp;gt; Z =&amp;gt; ...;

    // indexer
    public Vector3 this[int index] { get{} set{} }

    // foreach
    public Enumerator GetEnumerator()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Structure of &lt;strong&gt;Arrays&lt;/strong&gt; と言ってますが、StructureOfArraysGeneratorは Arrays は生成しません。内部的には単一の &lt;code&gt;byte[]&lt;/code&gt; と各開始地点のオフセットのみを持っていて、生成されるプロパティによって&lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt;のビューを返すという設計になっています。&lt;/p&gt;
&lt;p&gt;使い方的には配列のように使えますが、&lt;code&gt;Span&amp;lt;T&amp;gt;&lt;/code&gt;の操作、例えばref var item inによるforeachを使うと、より効率的に扱えます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var array = new Vector3MultiArray(4);

array.X[0] = 10;
array[1] = new Vector3(1.1f, 2.2f, 3.3f);

// multiply Y
foreach (ref var item in v.Y)
{
    item *= 2;
}

// iterate Vector3
foreach (var item in array)
{
    Console.WriteLine($&amp;quot;{item.X}, {item.Y}, {item.Z}&amp;quot;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yに2倍を掛ける処理などは、メモリ領域が連続していることにより、&lt;code&gt;Vector3[]&lt;/code&gt;を &lt;code&gt;item.Y *= 2&lt;/code&gt; などとして書くよりも高速に処理されます．&lt;/p&gt;
&lt;p&gt;他に&lt;code&gt;List&amp;lt;T&amp;gt;&lt;/code&gt;のようにAddできる&lt;code&gt;MultiArrayList&lt;/code&gt;や、内部的には&lt;code&gt;byte[]&lt;/code&gt;を持っているだけであることを生かした&lt;a href="https://github.com/Cysharp/MemoryPack"&gt;MemoryPack&lt;/a&gt;での超高速なシリアライズなどにも対応しています。気になったら是非ReadMeのほうを見てください。&lt;/p&gt;
&lt;h2&gt;.NET 7 時代のSIMD&lt;/h2&gt;
&lt;p&gt;.NETはSIMD対応が進んでいて、&lt;a href="https://learn.microsoft.com/ja-jp/dotnet/api/system.runtime.intrinsics.x86"&gt;System.Runtime.Intrinsics.X86&lt;/a&gt;によって、直接ハードウェア命令を書くことが出来ます。&lt;/p&gt;
&lt;p&gt;しかし、しかしですね、最近は .NET を Arm で動かすことが現実的になってきました。iOSやAndroidでけはなくMacのArm化、そしてAWS GravitonのようなArmサーバーはコスト面でも有利で、選択肢に十分入ります。そこでAvx.Addなんて書いていたらArmで動きません。勿論 &lt;a href="https://learn.microsoft.com/ja-jp/dotnet/api/system.runtime.intrinsics.arm"&gt;System.Runtime.Intrinsics.Arm&lt;/a&gt; というクラスも公開されていて、Arm版のSIMDを手書きすることもできるんですが、分岐して似たようなものを二個書けというのか！という話です。&lt;/p&gt;
&lt;p&gt;そこで、 &lt;a href="https://zenn.dev/pcysl5edgo/articles/d3e787599c5c8b"&gt;.NET 7こそがC# SIMDプログラミングを始めるのに最適である理由&lt;/a&gt; という記事があるのですが、確かに .NET 7 から追加された &lt;a href="https://learn.microsoft.com/en-us/dotnet/api/system.runtime.intrinsics.vector256.loadunsafe"&gt;Vector256.LoadUnsafe&lt;/a&gt; がまずめちゃくくちゃイイ！馴染みが深い（？）Unsafeによる ref var T で書けます！そして&lt;a href="https://github.com/dotnet/runtime/issues/49397"&gt;Expose cross-platform helpers for Vector64, Vector128, and Vector256&lt;/a&gt;により、&lt;code&gt;Vector64/128/256&amp;lt;T&amp;gt;&lt;/code&gt;にプラットフォーム抽象化されたSIMD処理が書けるようになりました、やはり .NET 7から。&lt;/p&gt;
&lt;p&gt;例えば .NET 7 でint[]のSumのSIMD化を書いてみます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var array = Enumerable.Range(1, 100).ToArray();

ref var begin = ref MemoryMarshal.GetArrayDataReference(array);
ref var last = ref Unsafe.Add(ref begin, array.Length);

var vectorSum = Vector256&amp;lt;int&amp;gt;.Zero;
ref var current = ref begin;

// Vector256で処理できるだけ処理
ref var to = ref Unsafe.Add(ref begin, array.Length - Vector256&amp;lt;int&amp;gt;.Count);
while (Unsafe.IsAddressLessThan(ref current, ref to))
{
    // 直接足し算できて便利
    vectorSum += Vector256.LoadUnsafe(ref current);
    current = ref Unsafe.Add(ref current, Vector256&amp;lt;int&amp;gt;.Count);
}

// Vector256をintに戻す
 var sum = Vector256.Sum(vectorSum);

// 残りの分は単純処理
while (Unsafe.IsAddressLessThan(ref current, ref last))
{
    sum += current;
    current = ref Unsafe.Add(ref current, 1);
}

Console.WriteLine(sum); // 5050
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;まぁforがwhileのアドレス処理になっていたり、最後にはみ出た分を処理する必要がありますが、かなり自然にSIMDを扱えているといってもいいんじゃないでしょうか。(Unsafeに慣れていれば)かなり書きやすいです。いいね。&lt;/p&gt;
&lt;p&gt;ところで .NET 7からLINQがSIMD対応してるからこんなの書く必要ないでしょ？というと、対応してません。LINQのSIMDはint[]のAverage, int[]のMin, Max, long[]のMin, Maxのみと、かなり限定的です。これは互換性の問題などなどがあり、まぁオマケみたいなものだと思っておきましょう。必要な局面があるなら自分で用意する方が無難です。&lt;/p&gt;
&lt;p&gt;ともあれ、.NET 7 からは手書きX86 SIMDはArm対応が漏れやすいので、極力Vectorによって抽象化されたコードで書きましょう、ということになります。どうしてもVectorじゃ書けないところだけ、仕方なく書くという感じですね。&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;反響全然ないだろうなあと想定していましたが、やはり反響全然ないです！まぁでも結構面白いライブラリになったと思うので、是非使ってください。それと、Incremental Source Generatorの作り方がMemoryPackの頃よりも習熟していて、コードがかなり洗練されたものになっているので、Source Generatorの作り方として参照するならMemoryPackのコードよりもこちらのコードのほうがお薦めです。&lt;/p&gt;
&lt;p&gt;というわけで、まだまだSource Generatorネタはいっぱいあるので、今年は大量に量産します！&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Fri, 27 Jan 2023 00:00:00 +0900</pubDate>
      <a10:updated>2023-01-27T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2022/12/30_year.html</guid>
      <link>https://neue.cc/2022/12/30_year.html</link>
      <title>2022年を振り返る</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2022/12/30_year.html"&gt;2022年を振り返る&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2022-12-30&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;今年はCysharpとしては、（控えめながら）露出があったので、何やってるかわからない、むしろ存在してるんですか？といったところから脱却したのではないでしょうか……？相変わらず&lt;a href="https://cysharp.co.jp/"&gt;ホームページはペライチ&lt;/a&gt;ですけれど。そろそろいい加減、更新したい。&lt;/p&gt;
&lt;p&gt;大きなところでは &lt;a href="https://neue.cc/2022/04/"&gt;プリコネ！グランドマスターズのサーバー開発をCysharpが開発協力しました&lt;/a&gt; というわけで、結構長くCygamesと一緒に作っていたゲームがリリースされました。超期間限定だったのでもうプレイできませんが……！技術的な詳細はCygamesのほうから &lt;a href="https://cedil.cesa.or.jp/cedil_sessions/view/2637"&gt;C#によるクライアント/サーバーの開発言語統一がもたらす高効率な開発体制 ～プリコネ！グランドマスターズ開発事例～&lt;/a&gt; という形でCEDECで講演していますが、2022年現在の開発体制としてはかなり先端を走っている、かつ、とてもいい感じに仕上がっています。&lt;/p&gt;
&lt;p&gt;MagicOnion採用タイトルも増えていて、特に今年リリースされたタイトルで一番大きなものは&lt;a href="https://mememori-game.com/"&gt;メメントモリ&lt;/a&gt;でしょうか、&lt;a href="https://twitter.com/neuecc/status/1595729906528587781"&gt;MagicOnion, MessagePack for C#を採用していただいています&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Cysharp/MagicOnion/"&gt;MagicOnion&lt;/a&gt;は12/28にv5をリリースしたばかりです！内部アーキテクチャの変更によるパフォーマンス向上や拡張性の確保、そして&lt;a href="https://github.com/Cysharp/MemoryPack"&gt;MemoryPack&lt;/a&gt;への対応といった、次世代に向けて大きく基盤整理されました。今後もSource Generatorフル対応などが控えています。&lt;/p&gt;
&lt;p&gt;OSS関連も、振り返るとかなり充実していました。後半、既存OSSのメンテが滞り気味だったのは来年消化します……！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://neue.cc/2022/02/28_DFrame.html"&gt;DFrame - C#でテストシナリオを書く分散負荷テストフレームワーク&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://neue.cc/2022/05/11_AlterNats.html"&gt;AlterNats - ハイパフォーマンスな.NET PubSubクライアントと、その実装に見る.NET 6時代のSocketプログラミング最適化のTips、或いはMagicOnionを絡めたメタバース構築のアーキテクチャについて&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://neue.cc/2022/11/04_memorypack.html"&gt;MemoryPackにみる .NET 7/C# 11世代のシリアライザー最適化技法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今年も自分のプログラミング能力の成長を実感できています。技術的に腐り始めたら一瞬！みたいな危機感はあるので、こうして毎年の成長を、ちゃんと対外的にも示し続けられているのはいいことかな。自分はできてると思ってるけど外から見るとやべぇ、みたいなパターンは往々にありますからね、常に実証と共にありたいです。&lt;/p&gt;
&lt;p&gt;特にMemoryPackは次世代の基準を打ち立てられたのではないかと思います。GitHub Starも3ヶ月で1300到達、非常に良い感じです。作ってる最中は、私が今これをやりきらなきゃC#は10年遅れてしまうんだ、みたいな気持ちでヒィヒィいいながら書いてましたが、大言壮語な妄想ではなく実際いい感じのものを出せたのではないでしょうか。&lt;/p&gt;
&lt;p&gt;Source Generatorの解説を &lt;a href="https://neue.cc/2022/12/16_IncrementalSourceGenerator.html"&gt;2022年のC# (Incremental) Source Generator開発手法&lt;/a&gt; として書きましたが、改めてC#にとってSource Generatorはめちゃくちゃ重要なテクノロジーになると、今更ながらに理解しました。いや、2020年の終わりに &lt;a href="https://neue.cc/2020/12/15_597.html"&gt;UnitGenerator&lt;/a&gt; を作ってから（これは今も使ってます）、しかしそこまで突き詰めてこなかったんですよね、今の今まで。来年はSource Generator元年ということで、色々な分野で革命的なものを大量に投下したいと思ってます。今なんかアイディアが溢れてるんですよ……！&lt;/p&gt;
&lt;p&gt;というわけで来年はいっぱいやることがある！今年に悔いが残るとすれば、Cysharpとして現在、自称革命的なサービス（？）を作ってるんですが、それの進捗があまり良くなかったことですかねえ。原因としては私がOSS関連でフラフラしててプロジェクトマネージャー/プロダクトオーナーとして1ミリも機能いてなかったせいなのですが！反省。PM的な話は昔からずっと反省し続けてるので一向に進歩してないですね……。そこに脳みそ注ぎ込む余力がないのだと言い訳してますが……。&lt;/p&gt;
&lt;p&gt;そんなわけで、来年こそは革命的サービスもリリースするので期待していてください。OSS関連も革命的なものをどかどか投下する予定なので、引き続きCysharpは時代の最先端を全力疾走していきます。&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Fri, 30 Dec 2022 00:00:00 +0900</pubDate>
      <a10:updated>2022-12-30T00:00:00+09:00</a10:updated>
    </item>
  </channel>
</rss>