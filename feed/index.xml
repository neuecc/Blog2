<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:a10="http://www.w3.org/2005/Atom" version="2.0">
  <channel>
    <title>neue cc</title>
    <link>http://neue.cc/</link>
    <description>C# Technical Blog</description>
    <language>ja</language>
    <lastBuildDate>Thu, 25 Nov 2021 17:09:56 +0900</lastBuildDate>
    <item>
      <guid isPermaLink="true">https://neue.cc/2021/11/21.html</guid>
      <link>https://neue.cc/2021/11/21.html</link>
      <title>C#による自家製静的サイトジェネレーターに移行した話</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2021/11/21.html"&gt;C#による自家製静的サイトジェネレーターに移行した話&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2021-11-21&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;見た目はほとんど変わっていませんが(とはいえ横幅広くしたので印象は結構変わったかも)、このサイト、フルリニューアルしました。内部構造が。完全に。別物に。元々はWordPressだったのですが、今回から自作の静的サイトジェネレーターでhtmlを生成し、GitHub Pagesでホストするようにしました。元になるソース(&lt;code&gt;.md&lt;/code&gt;)もGitHub上に置き、GitHub ActionsでビルドしてGitHub Pagesでホスティングされるという、完全GitHub完結ソリューション。また、記事を書くエディタも&lt;a href="https://docs.github.com/ja/codespaces/the-githubdev-web-based-editor"&gt;GitHub web-based editor&lt;/a&gt;(リポジトリのトップで&lt;code&gt;.&lt;/code&gt;を打つと、VS Codeそのものが起動するやつ)を利用することで、非常に快適で、というかMarkdownエディタとしては最高品質のものが乗っかっていて、たかがブログ書くにしては面倒くさいPush/Pullもなくダイレクトコミットで反映出来てしまうというのがとても良い体験になっています。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/neuecc/Blog2/"&gt;neuecc/Blog2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;.&lt;/code&gt;でエディタを起動して、&lt;a href="https://github.com/neuecc/Blog2/tree/master/articles"&gt;articles&lt;/a&gt;配下に&lt;code&gt;YYYY-MM-DD.md&lt;/code&gt;ファイルを新規作成。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/142737666-ec09db39-d517-4fb9-aa9f-b61bfb2cbfe7.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;完全にVS Codeそのものでデスクトップアプリのものと全く区別が付かないレベルで、これを超える品質のエディタを普通のサイトに乗せることは不可能でしょう。当然もちろん画像のプレビューもできますし、なんだったら拡張すら入る。&lt;/p&gt;
&lt;p&gt;GitHub管理だと画像置き場（アップロード）が面倒くさい問題があるのですが、これはIssueを画像アップローダーとして使うことで回避しています。Issueの入力フォームは、画像をCtrl+Vでそのままアップロードが可能です。そして嬉しいことに、マークダウンに変換してくれているのでコピペするだけでOK。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/142736683-d2b2acac-8523-4f54-a325-c1dbb12aa959.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/142736700-18928390-e53b-4014-a931-9cd974afcf56.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;上がった先の&lt;code&gt;user-images.githubusercontent&lt;/code&gt;は別にIssueそのものと紐付いているわけではないので、 アップローダ用に使ったIssueはSubmitすることなくポイ、です。そうしてどこにも紐付いていない&lt;code&gt;user-images.githubusercontent&lt;/code&gt;ですが、別にだからといって削除されることもなく永続的に上がり続けているので、遠慮なく使わせてもらうことにします。まぁちゃんとGitHub上に上げてるコンテンツ用に使っているので、許されるでしょう、きっと。多分。&lt;/p&gt;
&lt;p&gt;そうして出来上がった記事は、そのままエディタ上のgit UIからコミットすると、自身が作業している領域は直接サーバー上のmaster(main)なので、プッシュ不要で反映されます。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/142736833-55f36246-cb7f-4b62-addf-0e18b3fa6d07.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;こうなると、もうWordPressで投稿をポスト、するのと変わらないわけです。ブログ記事程度でcloneしてpullしてstagingしてpushしてというのは地味に重たいので、このぐらい身軽で行きたいですね。（実際、投稿後に編集ラッシュとかよくあるので、ちょっと手数が増えるだけで猛烈に嫌気がさす）&lt;/p&gt;
&lt;p&gt;ジェネレートは&lt;a href="https://github.com/neuecc/Blog2/blob/master/.github/workflows/build.yml"&gt;workflows/buildy.yml&lt;/a&gt;で、このリポジトリ内に配置されてるC#プロジェクトを直接ビルド/実行することで生成処理をしています。&lt;code&gt;dotnet run&lt;/code&gt;便利。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;build-blog:
runs-on: ubuntu-latest
steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
    - run: dotnet run --project ./src/Blog2/Blog2.csproj -c Release -- ./articles ./publish
    - uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./publish
        keep_files: true
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;生成されたファイルは&lt;a href="https://github.com/peaceiris/actions-gh-pages"&gt;peaceiris/actions-gh-pages&lt;/a&gt;を使って&lt;code&gt;gh-pages&lt;/code&gt;ブランチと同期します。その際、デフォルトでは既に上がってるファイルを全削除してしまうので、今回はstyleやassetを、同期とは別に置いてあるので削除されると困るので、&lt;code&gt;keep_files: true&lt;/code&gt;も指定しています。そうすると記事の削除がしづらくなるんですが、記事の削除はしない or どうしても削除しなかったら二重に(articlesとgh-pages)削除すればいいだけ、という運用で回避。&lt;/p&gt;
&lt;p&gt;と、いうわけでシステム的には満足です。&lt;/p&gt;
&lt;p&gt;C#でも&lt;a href="https://www.statiq.dev/"&gt;Statiq&lt;/a&gt;などといった静的サイトジェネレーターは存在するのですが、あえて自作した理由は、サイトのシステムをそっくり移行するという都合上、URLを前のものと完璧に合わせたかったというのがあります。&lt;a href="https://github.com/neuecc/Blog2/tree/gh-pages"&gt;生成結果のファイル一覧&lt;/a&gt;が若干変というかクドいというか、といったところがあるのですが、これは前のWordPressでやっていたルーティングをそのまんま再現するためということで。WordPressからのエクスポートも、DB直接見てC#でそのままテーブルダンプから作ったので、まぁ別に大したコードが必要なわけでもないので一気に作っちゃえという気になったというのもあります。&lt;/p&gt;
&lt;p&gt;外部ライブラリとしてはMarkdownのHTML化に&lt;a href="https://github.com/xoofx/markdig"&gt;Markdig&lt;/a&gt;を採用しました。色々高機能ではあるのですが、今回は &lt;code&gt;Markdown.ToHtml(input)&lt;/code&gt; しか使っていませんけれど、感触的にはとても良かったです。&lt;/p&gt;
&lt;p&gt;シンタックスハイライトには&lt;a href="https://prismjs.com/"&gt;Prism.js&lt;/a&gt;を用いました。Markdigの出力する```csharpの変換を、特に何も意識せずとも対象にしてくれるのが良かったですね。プラグインはautoloaderとnormalize-whitespaceを合わせて投下しています。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;script src=&amp;quot;&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/components/prism-core.min.js&amp;quot;&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/plugins/autoloader/prism-autoloader.min.js&amp;quot;&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;&amp;quot;https://cdnjs.cloudflare.com/ajax/libs/prism/1.25.0/plugins/normalize-whitespace/prism-normalize-whitespace.min.js&amp;quot;&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;最近ブログ投稿がだいぶ減ってしまっていたのですが、システムも一新したことでやる気が出てきたのでいいことです。まぁ見た目は本当にあんま全然変わってないんですが……！&lt;/p&gt;
&lt;p&gt;なお、反映に必要な所要時間は30秒弱。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/142737556-eac40d7a-46c8-4534-96de-38895104d4cb.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;遅いっちゃあ遅いですが、許容できるといえば許容できますね。サイトジェネレートプログラムの実行時間自体は1秒以下で、別に全然時間かかってないんで、CIセットアップとか、それ以外の時間が何かとかかっちゃってます。GitHub Actionsの仕組み的にしょうがないといえばしょうがないんですが、もう少しなんとかなってほしいかなあ。あとGitHub Pages自体が反映が若干遅い。遅い上に進捗が分からないのが地味にストレスフル。とはいえとはいえ、良いんじゃあないでしょうか。良さの殆どはGitHub web-based editorから来てますね、これは本当に革命的に良い。というわけで、このweb-based editorを活かすシステムを作っていくという手段と目的を逆転させた思考が最終的に実際良いんじゃないかと思ってます！&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Sun, 21 Nov 2021 00:00:00 +0900</pubDate>
      <a10:updated>2021-11-21T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2021/08/23_602.html</guid>
      <link>https://neue.cc/2021/08/23_602.html</link>
      <title>C#でgoogle/zx風にシェルスクリプトを書く</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2021/08/23_602.html"&gt;C#でgoogle/zx風にシェルスクリプトを書く&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2021-08-23&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;あまりシェルスクリプトを書かない私なのですが（小物でもなんでも書き捨てC#で書くスタイル）、CI だの .NET Core だのなんなので、全く書かないというわけにもいかない昨今です。まぁしかしcmdは嫌だし今更(？)PowerShellもなぁという感じもあり、bashねぇ、とかブツブツ言いながらしょっぱいスクリプトを書く羽目になるわけです。&lt;/p&gt;
&lt;p&gt;そこに颯爽と現れたのが &lt;a href="https://github.com/google/zx"&gt;google/zx&lt;/a&gt;。素敵そうだなーと思いつつJavaScriptを日常的に書くわけでもないのでスルーしてたのですが、こないだも&lt;a href="https://scrapbox.io/lacolaco-engineering/%E3%81%A1%E3%82%87%E3%81%A3%E3%81%A8%E8%A4%87%E9%9B%91%E3%81%AA%E3%82%B7%E3%82%A7%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88%E3%82%92JavaScript%E3%81%A7%E6%9B%B8%E3%81%8F"&gt;ちょっと複雑なシェルスクリプトをJavaScriptで書く&lt;/a&gt;で紹介されていて、なるほど色物じゃなくて便利なのか、そうだよね便利だよね！と思い、私は日常的にC#を書くので、C#だったら便利だな、同じ感じで書けるなら、と、思い至ったのでした。&lt;/p&gt;
&lt;p&gt;というかまぁzx見て思ったのが、これぐらいの内部DSL、C#でもいけるよ、ということであり……。そして以下のようなものが誕生しました。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/130373766-0f16e9ad-57ba-446b-81ee-c255c7149035.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;もともと&lt;a href="http://neue.cc/2020/01/30_590.html"&gt;ProcessX - C#でProcessを C# 8.0非同期ストリームで簡単に扱うライブラリ&lt;/a&gt;というものを公開していたので、更にそれをDSL風味に、zxっぽくシンタックスを弄りました。C# 5.0 async/awaitの拡張性、C# 6.0 using static、C# 6.0 String Interpolation、そしてC# 9.0のTop level statementsと、C#も内部DSLを容易にする構文がどんどん足されています。現在previewのC# 10.0でも、Improvement Interpolated Stringsとして、InterpolatedStringHandlerによって$&amp;quot;&amp;quot;の生成時の挙動そのものを生で弄ることが可能になり、よりますます表現のハックが可能になり、色々と期待が持てます。&lt;/p&gt;
&lt;p&gt;さて、で、これが使いやすいかというと、見た通りで、使いやすい、です……！stringをawaitしていることに一瞬違和感はめちゃくちゃあるでしょうが、DSLだと思って慣れれば全然自然です（そうか？）。なんか言われてもgoogle/zxなもんです、で逃げれば説得力マシマシになった（そうか？）のが最高ですね。cmd/PowerShell/bashに対する利点は、google/zxの利点と同じように&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;型が効いてる(C#なので)&lt;/li&gt;
&lt;li&gt;async/awaitが便利(C#なので)&lt;/li&gt;
&lt;li&gt;フォーマッタもある(C#なので)&lt;/li&gt;
&lt;li&gt;エディタ支援が最高(C#なので)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ということで、ぜひぜひお試しください。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Cysharp/ProcessX"&gt;https://github.com/Cysharp/ProcessX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PM&amp;gt; Install-Package ProcessX&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;csx vs new csproj vs ConsoleAppFramework&lt;/h2&gt;
&lt;p&gt;C#には.csxという失われしC#スクリプティングな構文が用意されていて、まさに1ファイルでC#の実行が完結するのでこうしたシェルスクリプト風味に最適、と思いきや、実行もエディッティング環境も貧弱で、まさに失われしテクノロジーになっているので、見なかったことにしておきましょう。実際、より良いC#スクリプティング的なシンプルC#の提案が &lt;a href="https://github.com/dotnet/designs/pull/213"&gt;Add Simple C# Programs&lt;/a&gt; として出ています(つまりcsxは完全に産廃、NO FUTURE……)。提案(&lt;a href="https://github.com/dotnet/designs/blob/a27fd42a68370f315bc2293dc748145f4075697f/proposed/simple-csharp-programs.md"&gt;proposed/simple-csharp-pgorams.md&lt;/a&gt;)読むと面白いですが、ちょっと少し時間かかりそうですね。&lt;/p&gt;
&lt;p&gt;というわけで、csprojとProgram.csの2ファイル構成が良いんじゃないかと思います。ちょっと冗長ではあるけれど、しょーがないね。実行に関しては dotnet run でビルドと実行がその場でできるので、ビルドなしの直接スクリプト実行みたいな雰囲気にはできます。これは普通に便利で、CIとかでもgit pullしている状態のリポジトリ内のスクリプトに対して一行でdotnet run書くだけで動かせるので、非常に良い。こうした .NET Core以降のシンプルになったcsprojとdotnetコマンドの充実から、csxの価値がどんどん消えていったんですねえ。&lt;/p&gt;
&lt;p&gt;さて、実際のプロジェクトなどでは、そもそもシェルスクリプト（に限らずバッチなんかも）は一つどころか大量にあったりすることもあるでしょう。そこでCysharpの提供している&lt;a href="https://github.com/Cysharp/ConsoleAppFramework/"&gt;Cysharp/ConsoleAppFramework&lt;/a&gt;を使うと、クラスを定義するだけで簡単に実行対象を増やしていけるので、大量のスクリプトの管理を1csprojでまかなうことが可能になります。実行は dotnet run -- foo/bar のようにすればいいだけです。非常におすすめ。シェルスクリプト的なものは、ConsoleAppFramework + ProcessX/zx で書いて回るのは、悪くない選択になると思います。&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Mon, 23 Aug 2021 00:00:00 +0900</pubDate>
      <a10:updated>2021-08-23T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2021/07/02_601.html</guid>
      <link>https://neue.cc/2021/07/02_601.html</link>
      <title>Microsoft MVP for Developer Technologies(C#)を再々々々々々々々々々受賞しました</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2021/07/02_601.html"&gt;Microsoft MVP for Developer Technologies(C#)を再々々々々々々々々々受賞しました&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2021-07-02&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;11回目。一年ごとに再審査があって7月に一斉更新されるシステムになっていて、今年も継続しました。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/neuecc/MessagePack-CSharp/"&gt;MessagePack for C#&lt;/a&gt;はprotobuf-netを抜いて、 .NET で最もGitHubのスター数の多いバイナリシリアライザになりそうな感じです（今はまだちょっと負けてるので、勢い的に8月か9月ぐらいには）。まぁ、たった3000ちょいがMost StarsというC#の狭さみたいなところがなきにしもあらずではありますが(JavaScriptだと桁が違うからなあ）、.NET の存在感というのは決して劣ってはいないと思います。&lt;/p&gt;
&lt;p&gt;MessagePack for C#は&lt;a href="https://github.com/neuecc/MessagePack-CSharp/pull/1272"&gt;v3を計画&lt;/a&gt;しています。パフォーマンスの大幅な向上（特にUnityで！）や、より良い使い勝手、ゼロアロケーションを超えたゼロコピー、SourceGenerator対応によるAOT対応の強化などなどを、破壊的変更も含めた上で考えてます。改めて、 .NET 6時代の最高のシリアライザを目指しています。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Cysharp"&gt;GitHub/Cysharp&lt;/a&gt;で公開しているものも、新規には &lt;a href="https://github.com/Cysharp/MessagePipe"&gt;MessagePipe&lt;/a&gt;は結構良いと思いますし、引き続き &lt;a href="https://github.com/Cysharp/MagicOnion"&gt;MagicOnion&lt;/a&gt;や&lt;a href="https://github.com/Cysharp/UniTask"&gt;UniTask&lt;/a&gt;は開発進めています。&lt;/p&gt;
&lt;p&gt;つまり全体的にとてもC#に貢献している。なるほどえらい。そりゃ更新も当然ですね（&lt;/p&gt;
&lt;p&gt;今年は会社として、今ひとつ大きなプロダクトを仕込んでいる最中でして、それで大きなインパクトを Unity と .NET 、双方で引き起こせるはず、です……！乞うご期待。&lt;/p&gt;
&lt;p&gt;というわけかで引き続きC#の最前線で戦っていきますので、今年もよろしくおねがいします。&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Fri, 02 Jul 2021 00:00:00 +0900</pubDate>
      <a10:updated>2021-07-02T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2021/05/08_600.html</guid>
      <link>https://neue.cc/2021/05/08_600.html</link>
      <title>2021年のC# Roslyn Analyzerの開発手法、或いはUnityでの利用法</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2021/05/08_600.html"&gt;2021年のC# Roslyn Analyzerの開発手法、或いはUnityでの利用法&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2021-05-08&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;C#のAnalyzer、.NET 5時代の現在では標準でも幾つか入ってきたり、&lt;a href="https://github.com/dotnet/roslyn-analyzers"&gt;dotnet/roslyn-analyzers&lt;/a&gt;として準標準なものも整備されてきたり（非同期関連だと他に&lt;a href="https://github.com/microsoft/vs-threading/blob/main/doc/analyzers/index.md"&gt;microsoft/vs-threading&lt;/a&gt;のAnalyzerも便利)、&lt;a href="https://docs.unity3d.com/2020.2/Documentation/Manual/roslyn-analyzers.html"&gt;Unity 2020.2からはUnityもAnalyzer対応したり&lt;/a&gt;、MicrosoftもUnity向けの&lt;a href="https://github.com/microsoft/Microsoft.Unity.Analyzers"&gt;microsoft/Microsoft.Unity.Analyzers&lt;/a&gt;という便利Analyzerが登場してきたりと、特に意識せずとも自然に使い始めている感じになってきました。&lt;/p&gt;
&lt;p&gt;Analyzerって何？というと、まぁlintです。lintなのですが、Roslyn(C#で書かれたC# Compiler)から抽象構文木を取り出せるので、それによってユーザーが自由にルールを作って、警告にしたりエラーにしたりできる、というのがミソです。更に高度な機能として、CodeFix(コードを任意に修正)もついているのですが、それはそれとして。&lt;/p&gt;
&lt;p&gt;このサイトでも幾つか書いてきましたが、初出の2014年-2015年辺りに固まってますね。もう6年前！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://neue.cc/2014/11/20_485.html"&gt;VS2015のRoslynでCode Analyzerを自作する(ついでにUnityコードも解析する)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://neue.cc/2014/12/08_496.html"&gt;VS2015+RoslynによるCodeRefactoringProviderの作り方と活用法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://neue.cc/2015/05/11_512.html"&gt;UniRxでの空呼び出し検出、或いはRoslynによるCode Aware Libraries時代の到来について&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://neue.cc/2015/06/13_513.html"&gt;NotifyPropertyChangedGenerator - RoslynによるVS2015時代の変更通知プロパティの書き方&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;実用的という点では、&lt;a href="https://github.com/neuecc/MessagePack-CSharp"&gt;MessagePack for C#&lt;/a&gt;に同梱しているMessagePackAnalyzerは今も現役でしっかり便利に使える代物になっています。&lt;/p&gt;
&lt;p&gt;と、いうわけで使う分にはいい感じになってきた、のですが、作る側はそうでもありません。初出の2015年辺りからテンプレートは変わってなくて、NuGetからすんなり入れれる時代になっても、VSIXがついてくるようなヘヴィなテンプレート。このクロスプラットフォームの時代に.NET Frameworkべったり、Visual Studioベッタリって……。Analyzerと似たようなシステムを使うSource Generator(&lt;a href="http://neue.cc/2020/12/15_597.html"&gt;UnitGenerator - C# 9.0 SourceGeneratorによるValueObjectパターンの自動実装とSourceGenerator実装Tips
&lt;/a&gt;)は、まぁまぁ今風のそこそこ作りやすい環境になってきたのに、Analyzerは取り残されている雰囲気があります。&lt;/p&gt;
&lt;p&gt;AnalyzerはCodeFixまで作ると非常に面倒なのですが、Analyzer単体でも非常に有益なんですよね。そしてプロジェクト固有の柔軟なエラー処理というのは、あって然りであり、もっとカジュアルに作れるべきなのです。が、もはや私でも腰が重くなってしまうぐらいに、2021年に作りたくないVisual Studio 2019のAnalyzerテンプレート……。&lt;/p&gt;
&lt;p&gt;どうしたものかなー、と思っていたのですが、非常に良い記事を見つけました、2つ！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://qiita.com/ryuix/items/36dabbf3c7e4e395e49e"&gt;SourceGeneratorのデバッグ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zenn.dev/naminodarie/articles/32973a36fcbe99"&gt;【C#】アナライザー・ソースジェネレーター開発のポイント&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前者の記事ではVS2019 16.10 preview2で ソースジェネレーターのデバッガーサポートが追加された、 &lt;code&gt;&amp;lt;IsRoslynComponent&amp;gt;true&amp;lt;/IsRoslynComponent&amp;gt;&lt;/code&gt; とすればいい。という話。なるほどめっちゃ便利そう、でもソースジェネレーターばっか便利になってくのはいいんですがAnalyzer置いてきぼりですかぁ？と思ったんですが、 &lt;code&gt;IsRoslynComponent&lt;/code&gt; だし、なんか挙動的にも別にAnalyzerで動いても良さそうな雰囲気を醸し出してる。と、いうわけで試してみたら無事動いた！最高！VS2019 16.10はまだpreviewですが(現時点では16.9が安定版の最新)、これはもうこれだけでpreview入れる価値ありますよ（あと少し待てば普通に正式版になると思うので待っても別にいいですが）&lt;/p&gt;
&lt;p&gt;後者の記事は .NET 5 時代のすっきりしたAnalyzerのcsprojの書き方を解説されています。つまり、この2つを合体させればシンプルにAnalyzerを開発できますね……？&lt;/p&gt;
&lt;p&gt;というわけでやっていきましょう。中身は本当に上記2つの記事そのものなので、そちらのほうも参照してください。&lt;/p&gt;
&lt;h2&gt;SuperSimpleAnalyzerをシンプル構成で作る&lt;/h2&gt;
&lt;p&gt;まずは Visual Studio 2019 16.10 をインストールします。16.10はついこないだ正式版になったばかりなので、バージョンを確認して16.10未満の場合はアップデートしておきましょう。&lt;/p&gt;
&lt;p&gt;Analyzerはnetstarndard2.0、Analyzerを参照するテスト用のConsoleAppプロジェクトをnet5.0で作成します。最終的には以下のようなソリューション構造にします。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/117477060-7c494b00-af98-11eb-8b45-b52734713821.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;さて、ではSuperSimpleAnalyzerのほうのcsprojをコピペ的に以下のものにしましょう。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;
    &amp;lt;PropertyGroup&amp;gt;
        &amp;lt;OutputType&amp;gt;library&amp;lt;/OutputType&amp;gt;
        &amp;lt;TargetFramework&amp;gt;netstandard2.0&amp;lt;/TargetFramework&amp;gt;
        &amp;lt;LangVersion&amp;gt;latest&amp;lt;/LangVersion&amp;gt;
        &amp;lt;Nullable&amp;gt;enable&amp;lt;/Nullable&amp;gt;
        &amp;lt;IsRoslynComponent&amp;gt;true&amp;lt;/IsRoslynComponent&amp;gt;
        &amp;lt;TargetsForTfmSpecificContentInPackage&amp;gt;$(TargetsForTfmSpecificContentInPackage);PackBuildOutputs&amp;lt;/TargetsForTfmSpecificContentInPackage&amp;gt;
        &amp;lt;IncludeBuildOutput&amp;gt;false&amp;lt;/IncludeBuildOutput&amp;gt;
        &amp;lt;IncludeSymbols&amp;gt;false&amp;lt;/IncludeSymbols&amp;gt;
        &amp;lt;SuppressDependenciesWhenPacking&amp;gt;true&amp;lt;/SuppressDependenciesWhenPacking&amp;gt;
        &amp;lt;DevelopmentDependency&amp;gt;true&amp;lt;/DevelopmentDependency&amp;gt;
    &amp;lt;/PropertyGroup&amp;gt;

    &amp;lt;ItemGroup&amp;gt;
        &amp;lt;PackageReference Include=&amp;quot;Microsoft.CodeAnalysis.Analyzers&amp;quot; Version=&amp;quot;3.3.2&amp;quot;&amp;gt;
            &amp;lt;IncludeAssets&amp;gt;runtime; build; native; contentfiles; analyzers&amp;lt;/IncludeAssets&amp;gt;
            &amp;lt;PrivateAssets&amp;gt;all&amp;lt;/PrivateAssets&amp;gt;
        &amp;lt;/PackageReference&amp;gt;
        &amp;lt;PackageReference Include=&amp;quot;Microsoft.CodeAnalysis.CSharp&amp;quot; Version=&amp;quot;3.8.0&amp;quot; /&amp;gt;
    &amp;lt;/ItemGroup&amp;gt;

    &amp;lt;Target Name=&amp;quot;PackBuildOutputs&amp;quot; DependsOnTargets=&amp;quot;SatelliteDllsProjectOutputGroup;DebugSymbolsProjectOutputGroup&amp;quot;&amp;gt;
        &amp;lt;ItemGroup&amp;gt;
            &amp;lt;TfmSpecificPackageFile Include=&amp;quot;$(TargetDir)\*.dll&amp;quot; PackagePath=&amp;quot;analyzers\dotnet\cs&amp;quot; /&amp;gt;
            &amp;lt;TfmSpecificPackageFile Include=&amp;quot;@(SatelliteDllsProjectOutputGroupOutput-&amp;gt;'%(FinalOutputPath)')&amp;quot; PackagePath=&amp;quot;analyzers\dotnet\cs\%(SatelliteDllsProjectOutputGroupOutput.Culture)\&amp;quot; /&amp;gt;
        &amp;lt;/ItemGroup&amp;gt;
    &amp;lt;/Target&amp;gt;
&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;基本的に&lt;a href="https://zenn.dev/naminodarie/articles/32973a36fcbe99"&gt;【C#】アナライザー・ソースジェネレーター開発のポイント&lt;/a&gt;から丸コピペさせてもらっちゃっているので、それぞれの詳しい説明は参照先記事に譲ります……！幾つか重要な点を出すと、&lt;code&gt;Microsoft.CodeAnalysis.CSharp&lt;/code&gt;のバージョンは新しすぎると詰みます。現在の最新は3.9.0ですが、3.9.0だと、今の正式版VS2019(16.9)だと動かない(動かなかったです、私の環境では、どうなんですかね？)ので、ちょっと古めの3.8.0にしておきます。&lt;/p&gt;
&lt;p&gt;もう一つは、件の &lt;code&gt;&amp;lt;IsRoslynComponent&amp;gt;true&amp;lt;/IsRoslynComponent&amp;gt;&lt;/code&gt; の追加です。&lt;/p&gt;
&lt;p&gt;では、次にConsoleApp.csprojのほうに行きましょう。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;

    &amp;lt;PropertyGroup&amp;gt;
        &amp;lt;OutputType&amp;gt;Exe&amp;lt;/OutputType&amp;gt;
        &amp;lt;TargetFramework&amp;gt;net5.0&amp;lt;/TargetFramework&amp;gt;
    &amp;lt;/PropertyGroup&amp;gt;

    &amp;lt;ItemGroup&amp;gt;
        &amp;lt;ProjectReference Include=&amp;quot;..\AnalyzerDemo\SuperSimpleAnalyzer.csproj&amp;quot;&amp;gt;
            &amp;lt;ReferenceOutputAssembly&amp;gt;false&amp;lt;/ReferenceOutputAssembly&amp;gt;
            &amp;lt;OutputItemType&amp;gt;Analyzer&amp;lt;/OutputItemType&amp;gt;
        &amp;lt;/ProjectReference&amp;gt;
    &amp;lt;/ItemGroup&amp;gt;

&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;こちらは別に特段変わったことなく、Analyzerのcsprojを参照するだけです。その際に &lt;code&gt;&amp;lt;OutputItemType&amp;gt;Analyzer&amp;lt;/OutputItemType&amp;gt;&lt;/code&gt;を欠かさずに。&lt;/p&gt;
&lt;p&gt;では再び SuperSimpleAnalyzer に戻って、プロパティ→デバッグから、「起動」をRoslyn Componentに変更すると以下のような形にできます。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/117478072-ab13f100-af99-11eb-9904-f7fae1b899a7.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;（この時、Target Projectが真っ白で何も選択できなかったら、ConsoleAppのほうでAnalyzer参照をしてるか確認の後、とりあえずVisual Studioを再起動しましょう）&lt;/p&gt;
&lt;p&gt;これで、SuperSimpleAnalyzerをF5するとAnalyzerがConsoleAppで動いてる状態でデバッガがアタッチされます！&lt;/p&gt;
&lt;p&gt;のですが、最後にじゃあそのAnalyzerの実体をコピペできるように置いておきます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;#pragma warning disable RS2008

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Diagnostics;
using System.Collections.Immutable;
using System.Linq;

[DiagnosticAnalyzer(LanguageNames.CSharp)]
public class SuperSimpleAnalyzer : DiagnosticAnalyzer
{
    // どうせローカライズなんてしないのでString直書きしてやりましょう
    private static readonly DiagnosticDescriptor Rule = new DiagnosticDescriptor(
        id: &amp;quot;SuperSimpleAnalyzer&amp;quot;,
        title: &amp;quot;SuperSimpleAnalyzer&amp;quot;,
        messageFormat: &amp;quot;MyMessageFormat&amp;quot;,
        category: &amp;quot;Naming&amp;quot;,
        defaultSeverity: DiagnosticSeverity.Warning,
        isEnabledByDefault: true,
        description: &amp;quot;Nanika suru.&amp;quot;);

    public override ImmutableArray&amp;lt;DiagnosticDescriptor&amp;gt; SupportedDiagnostics { get { return ImmutableArray.Create(Rule); } }
    
    public override void Initialize(AnalysisContext context)
    {
        // お約束。
        context.ConfigureGeneratedCodeAnalysis(GeneratedCodeAnalysisFlags.None);
        context.EnableConcurrentExecution();

        // 解析起動させたい部分を選ぶ。あとRegisterなんとかかんとかの種類は他にもいっぱいある。
        context.RegisterSymbolAction(AnalyzeSymbol, SymbolKind.NamedType);
    }

    private static void AnalyzeSymbol(SymbolAnalysisContext context)
    {
        // ここを適当に書き換える（これはサンプル通りの全部Lowerじゃないクラス名があった場合に警告を出す）
        var namedTypeSymbol = (INamedTypeSymbol)context.Symbol;

        if (namedTypeSymbol.Name.ToCharArray().Any(char.IsLower))
        {
            // Diagnosticを作ってReportDiagnosticに詰める。
            var diagnostic = Diagnostic.Create(Rule, namedTypeSymbol.Locations[0], namedTypeSymbol.Name);
            context.ReportDiagnostic(diagnostic);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Resourcesとか別に使う必要ないと思うので、ハイパーベタ書きの.csファイル一個に収めてあります。これでF5をすると……&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/117478737-7d7b7780-af9a-11eb-95cd-f1d970d2c22d.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;もちろんConsoleAppのほうでは、実際に動いて警告出している様が確認できます。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/117478595-558c1400-af9a-11eb-9516-47295823423c.png" alt="image" /&gt;&lt;/p&gt;
&lt;p&gt;昔のVSIXの時は、別のVisual Studioを起動させていたりしたので重たくて面倒くさかったのですが、今回の IsRoslynComponent では、普通のデバッグの感覚で実行できるので、めちゃくちゃ楽です。最高に書きやすい、これが2021年……！&lt;/p&gt;
&lt;h2&gt;ユニットテストもする&lt;/h2&gt;
&lt;p&gt;ユニットテストのいいところは、テストをデバッグ実行すればコードの中身をダイレクトにステップ実行できるところにもあります。ある程度、上のように実コードでデバッグ実行して雰囲気を作れた後は、ユニットテスト上で再現コードを作っていくと、より捗るでしょう。&lt;/p&gt;
&lt;p&gt;基本的にはxUnitのテンプレートでプロジェクトを作って、 &lt;code&gt;Microsoft.CodeAnalysis.CSharp.Analyzer.Testing.XUnit&lt;/code&gt; を参照に追加するだけ。ではあるのですが、net5でシンプルに作ったら連なってる依存関係のせいなのか .NET Frameworkのものの参照が入って警告されたりで鬱陶しいことになったので、とりあえず以下のが警告の出ないパターン（？）で作ったものになります。netcoreapp3.1で。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;

    &amp;lt;PropertyGroup&amp;gt;
        &amp;lt;TargetFramework&amp;gt;netcoreapp3.1&amp;lt;/TargetFramework&amp;gt;
        &amp;lt;IsPackable&amp;gt;false&amp;lt;/IsPackable&amp;gt;
    &amp;lt;/PropertyGroup&amp;gt;

    &amp;lt;ItemGroup&amp;gt;
        &amp;lt;PackageReference Include=&amp;quot;Microsoft.CodeAnalysis.Analyzers&amp;quot; Version=&amp;quot;3.3.2&amp;quot;&amp;gt;
            &amp;lt;IncludeAssets&amp;gt;runtime; build; native; contentfiles; analyzers&amp;lt;/IncludeAssets&amp;gt;
            &amp;lt;PrivateAssets&amp;gt;all&amp;lt;/PrivateAssets&amp;gt;
        &amp;lt;/PackageReference&amp;gt;
        &amp;lt;PackageReference Include=&amp;quot;Microsoft.CodeAnalysis.CSharp&amp;quot; Version=&amp;quot;3.8.0&amp;quot; /&amp;gt;
        &amp;lt;PackageReference Include=&amp;quot;Microsoft.CodeAnalysis.CSharp.Workspaces&amp;quot; Version=&amp;quot;3.8.0&amp;quot; /&amp;gt;
        &amp;lt;PackageReference Include=&amp;quot;Microsoft.CodeAnalysis.CSharp.Analyzer.Testing.XUnit&amp;quot; Version=&amp;quot;1.1.0&amp;quot; /&amp;gt;

        &amp;lt;PackageReference Include=&amp;quot;Microsoft.NET.Test.Sdk&amp;quot; Version=&amp;quot;16.9.4&amp;quot; /&amp;gt;
        &amp;lt;PackageReference Include=&amp;quot;xunit&amp;quot; Version=&amp;quot;2.4.1&amp;quot; /&amp;gt;
        &amp;lt;PackageReference Include=&amp;quot;xunit.runner.visualstudio&amp;quot; Version=&amp;quot;2.4.3&amp;quot;&amp;gt;
            &amp;lt;IncludeAssets&amp;gt;runtime; build; native; contentfiles; analyzers; buildtransitive&amp;lt;/IncludeAssets&amp;gt;
            &amp;lt;PrivateAssets&amp;gt;all&amp;lt;/PrivateAssets&amp;gt;
        &amp;lt;/PackageReference&amp;gt;
    &amp;lt;/ItemGroup&amp;gt;
&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;このプロジェクトに作ったAnalyzerの参照を足して、以下のようなテストコードを書きます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;        [Fact]
        public async Task SimpleTest2()
        {
            var testCode = @&amp;quot;
class Program
{
    static void Main()
    {
    }
}&amp;quot;;

            await Microsoft.CodeAnalysis.CSharp.Testing.XUnit.AnalyzerVerifier&amp;lt;SuperSimpleAnalyzer&amp;gt;
                .VerifyAnalyzerAsync(testCode, new DiagnosticResult(&amp;quot;SuperSimpleAnalyzer&amp;quot;, DiagnosticSeverity.Warning).WithSpan(0, 0, 0, 0));
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;やることはVerifyAnalyzerAsyncに、それによって発生するエラー部分をDianogsticResultで指定する、という感じです。&lt;/p&gt;
&lt;p&gt;シンプルなケースはそれでいいのですが、テストコードにNuGetで外部ライブラリ参照があったり、プロジェクト参照があったりすると、これだけだとテストできません。そこで、そうしたケースが必要な場合は CSharpAnalyzerTest に追加の参照関係を指定してあげる必要があります( XUnit.AnalyzerVerifier は CSharpAnalyzerTest をxUnitのシンプルなケースに特化してラップしただけのものです）。&lt;/p&gt;
&lt;p&gt;例えば&lt;a href="https://github.com/Cysharp/MessagePipe/"&gt;MessagePipe&lt;/a&gt;では以下のようなユーティリティを用意してテストしました。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;static async Task VerifyAsync(string testCode, int startLine, int startColumn, int endLine, int endColumn)
{

    await new CSharpAnalyzerTest&amp;lt;MessagePipeAnalyzer, XUnitVerifier&amp;gt;
    {
        ReferenceAssemblies = ReferenceAssemblies.Default.WithPackages(ImmutableArray.Create(new PackageIdentity(&amp;quot;MessagePipe&amp;quot;, &amp;quot;1.4.0&amp;quot;))),
        ExpectedDiagnostics = { new DiagnosticResult(&amp;quot;MPA001&amp;quot;, DiagnosticSeverity.Error).WithSpan(startLine, startColumn, endLine, endColumn) },
        TestCode = testCode
    }.RunAsync();
}

static async Task VerifyNoErrorAsync(string testCode)
{

    await new CSharpAnalyzerTest&amp;lt;MessagePipeAnalyzer, XUnitVerifier&amp;gt;
    {
        ReferenceAssemblies = ReferenceAssemblies.Default.WithPackages(ImmutableArray.Create(new PackageIdentity(&amp;quot;MessagePipe&amp;quot;, &amp;quot;1.4.0&amp;quot;))),
        ExpectedDiagnostics = { },
        TestCode = testCode
    }.RunAsync();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これで&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;        [Fact]
        public async Task SimpleTest()
        {
            var testCode = @&amp;quot;using MessagePipe;

class C
{
    public void M(ISubscriber&amp;lt;int&amp;gt; subscriber)
    {
        subscriber.Subscribe(x =&amp;gt; { });
    }
}&amp;quot;;

            await VerifyAsync(testCode, 7, 9, 7, 39);
        }

        [Fact]
        public async Task NoErrorReport()
        {
            var testCode = @&amp;quot;using MessagePipe;

class C
{
    public void M(ISubscriber&amp;lt;int&amp;gt; subscriber)
    {
        var d = subscriber.Subscribe(x =&amp;gt; { });
    }
}&amp;quot;;

            await VerifyNoErrorAsync(testCode);
        }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;のようにテストが書けました。&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;というわけでAnalyzer書いていきましょう。今現在は結局Visual Studioだけかよ！みたいな気もしなくもないですが、そのうちVS CodeとかRiderでも出来るようになるんじゃないでしょうか、どうだろうね、そのへんはわかりません。&lt;/p&gt;
&lt;p&gt;ところでUnity 2020.2からAnalyzerが使えると言いましたが、そのサポート状況はなんだかヘンテコで、ぶっちゃけあんま使えないんじゃ疑惑があります。特に問題は、Unity Editor側では有効になっているけどIDE側で有効にならない場合が割とあります。これはUnityの生成したcsprojに、カスタムで追加したAnalyzerの参照が適切に入ってなかったりするせいなのですが、それだと使いづらいですよね、というかAnalyzerってコード書いてる最中にリアルタイムに警告あるのがイケてるポイントなので。&lt;/p&gt;
&lt;p&gt;そこでCysharpで&lt;a href="https://github.com/Cysharp/CsprojModifier"&gt;CsprojModifier&lt;/a&gt;というUnity用の拡張をオープンソースで公開しました。ついさっき。6時間ぐらい前に。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://github.com/Cysharp/CsprojModifier/raw/master/docs/images/Screen-01.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;これがあるとUnityでも正しくAnalyzerの参照の入ったcsprojを使える他に、例えば&lt;a href="https://github.com/dotnet/roslyn-analyzers/blob/main/src/Microsoft.CodeAnalysis.BannedApiAnalyzers/BannedApiAnalyzers.Help.md"&gt;BannedApiAnalyzers&lt;/a&gt;という、任意のクラスやメソッド、プロパティの呼び出しを禁止するという、かなり使えるAnalyzerがあるんですが（例えばUnityだとGameObject.Find絶対禁止マンとかが作れます）、これはどのメソッドの呼び出しを禁止するかをBannedSymbols.txtというファイルに書く必要があり、Unityのcsproj生成まんまだとこのBannedSymbols.txtへの参照が作れないんですね。で、CsprojModifierなら、参照を入れたcsprojが作れるので、問題なくUnityでBannedApiAnalyzersが使えるようになるというわけです。&lt;/p&gt;
&lt;p&gt;というわけで改めて、Analyzer、書いていきましょう……！&lt;/p&gt;
&lt;p&gt;実際こないだリリースした&lt;a href="https://github.com/Cysharp/MessagePipe/"&gt;MessagePipe&lt;/a&gt;用に、Subscribe放置を絶対に許さない（エラー化する）Analyzerを公開しました。&lt;/p&gt;
&lt;p&gt;&lt;img src="https://user-images.githubusercontent.com/46207/117535259-da753d00-b02f-11eb-9818-0ab5ef3049b1.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;こういうの、必要だし、そしてちゃんと導入するととても強力なんですよね。せっかくのC#の強力な機能なので、やっていきましょう。&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Sat, 08 May 2021 00:00:00 +0900</pubDate>
      <a10:updated>2021-05-08T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2021/02/26_599.html</guid>
      <link>https://neue.cc/2021/02/26_599.html</link>
      <title>C#のasync/await再考, タイムアウト処理のベストプラクティス, UniTask v2.2.0</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2021/02/26_599.html"&gt;C#のasync/await再考, タイムアウト処理のベストプラクティス, UniTask v2.2.0&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2021-02-26&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;お題を3つ並べましたが、記事は逆順で書いていきます！というわけで、&lt;a href="https://github.com/Cysharp/UniTask"&gt;UniTask v2.2.0&lt;/a&gt;を出しました。改めてUniTask v2とは&lt;a href="https://tech.cygames.co.jp/archives/3417/"&gt;Unityのためのゼロアロケーションasync/awaitと非同期LINQ&lt;/a&gt;を実現するライブラリで、とv2リリース時の解説記事を貼っつけましたが、ちょいちょい細かい改善を続けてまして、今回v2.2.0になります。&lt;/p&gt;
&lt;h2&gt;PlayerLoopへのループ挿入のカスタマイズ対応&lt;/h2&gt;
&lt;p&gt;現状のUnityはPlayerLoop上で動いていて、&lt;a href="https://gist.github.com/neuecc/bc3a1cfd4d74501ad057e49efcd7bdae"&gt;Unity 2020.1のリストをここに置いておきました&lt;/a&gt;が、デフォルトでは120個ぐらいのループがエンジンから駆動されています。Updateループだけでも&lt;code&gt;ScriptRunBehaviourUpdate&lt;/code&gt;, &lt;code&gt;ScriptRunDelayedDynamicFrameRate&lt;/code&gt;, &lt;code&gt;ScriptRunDelayedTasks&lt;/code&gt;, &lt;code&gt;DirectorUpdate&lt;/code&gt;と色々あります。UniTaskも基本的にはPlayerLoop上で動かしているのですが、自由に任意の実行箇所を選べるように、28個のループを挿入しています。これにより &lt;code&gt;UniTask.Yield(PlayerLoopTiming.PreLateUpdate)&lt;/code&gt; などといったような指定を可能にしているわけですが、28個ってちょっと多いんじゃないか？という。デフォで120個あるうちのプラス28個、多いっちゃあ多いけど、ループの中身も空っぽに近いし、空UpdateのMonoBehaviourを10000個並べるみたいなのとは比較にならないほど小さい話だから許容範囲内ぢゃん、と思ってはいるんですが、例えばAndroidでDeep Profilingなんかすると、ちょとプロファイラのデータに出てきちゃったりなんかは指摘されたことがあります（Deep Profilingの影響があるので、実際のビルドではそうでもないんですが）。&lt;/p&gt;
&lt;p&gt;何れにせよ、99.99%はUpdateしか使わねえよ、みたいなのはあると思います。というわけで、UniTaskのPlayerLoopの挿入量を任意に調整できるようにしました。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.AfterAssembliesLoaded)]
public static void InitUniTaskLoop()
{
    var loop = PlayerLoop.GetCurrentPlayerLoop();
    PlayerLoopHelper.Initialize(ref loop, InjectPlayerLoopTimings.Minimum);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これで、&lt;code&gt;Update | FixedUpdate | LastPostLateUpdate&lt;/code&gt; の3つしか挿入されなくなります。&lt;code&gt;InjectPlayerLoopTimings&lt;/code&gt;は任意のLoopTimingの選択、例えば &lt;code&gt;InjectPlayerLoopTimings.Update | InjectPlayerLoopTimings.FixedUpdate | InjectPlayerLoopTimings.PreLateUpdate&lt;/code&gt; のような指定と、3つのプリセット、 &lt;code&gt;All&lt;/code&gt;(デフォルトです), &lt;code&gt;Standard&lt;/code&gt;(Lastを抜いたもの、挿入量が半分になる(ただし一番最後のLastPostLateUpdateは挿入する))、&lt;code&gt;Minimum&lt;/code&gt;(Update, FixedUpate, LastPostLateUpdate)が選べます。正直なところ9割の人はMinimumで十分だと思ってますが、まぁ状況に応じて任意に足したり引いたりしてもらえればいいんじゃないかと。&lt;/p&gt;
&lt;p&gt;ところで、そうすると、挿入していないループタイミングを指定するとどうなるんですか？というと、実行時例外です。えー、それじゃー困るよーと思うので、そこで使えるのが&lt;a href="https://github.com/dotnet/roslyn-analyzers/blob/master/src/Microsoft.CodeAnalysis.BannedApiAnalyzers/BannedApiAnalyzers.Help.md"&gt;Microsoft.CodeAnalysis.BannedApiAnalyzers&lt;/a&gt;というやつで、(&lt;a href="https://docs.unity3d.com/2020.2/Documentation/Manual/roslyn-analyzers.html"&gt;Unity 2020.2からAnalyzerが何のハックもなくそのまま使えるようになった&lt;/a&gt;のでAnalyzerは普通に使えますよ！)、例えばInjectPlayerLoopTimings.Minimum用に、このBannedApiAnalyzersの設定、BannedSymbols.txtを書くとこうなります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-txt"&gt;F:Cysharp.Threading.Tasks.PlayerLoopTiming.Initialization; Isn't injected this PlayerLoop in this project.
F:Cysharp.Threading.Tasks.PlayerLoopTiming.LastInitialization; Isn't injected this PlayerLoop in this project.
F:Cysharp.Threading.Tasks.PlayerLoopTiming.EarlyUpdate; Isn't injected this PlayerLoop in this project.
F:Cysharp.Threading.Tasks.PlayerLoopTiming.LastEarlyUpdate; Isn't injected this PlayerLoop in this project.d
F:Cysharp.Threading.Tasks.PlayerLoopTiming.LastFixedUpdate; Isn't injected this PlayerLoop in this project.
F:Cysharp.Threading.Tasks.PlayerLoopTiming.PreUpdate; Isn't injected this PlayerLoop in this project.
F:Cysharp.Threading.Tasks.PlayerLoopTiming.LastPreUpdate; Isn't injected this PlayerLoop in this project.
F:Cysharp.Threading.Tasks.PlayerLoopTiming.LastUpdate; Isn't injected this PlayerLoop in this project.
F:Cysharp.Threading.Tasks.PlayerLoopTiming.PreLateUpdate; Isn't injected this PlayerLoop in this project.
F:Cysharp.Threading.Tasks.PlayerLoopTiming.LastPreLateUpdate; Isn't injected this PlayerLoop in this project.
F:Cysharp.Threading.Tasks.PlayerLoopTiming.PostLateUpdate; Isn't injected this PlayerLoop in this project.
F:Cysharp.Threading.Tasks.PlayerLoopTiming.TimeUpdate; Isn't injected this PlayerLoop in this project.
F:Cysharp.Threading.Tasks.PlayerLoopTiming.LastTimeUpdate; Isn't injected this PlayerLoop in this project.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;こうすると、例えば PlayerLoopTiming.LastUpdate をコード上に書くと RS0030 のWarningとなります。WarningじゃなくてErrorでいいので、そこはUnityのドキュメントの通りにwarn-&amp;gt;errorに設定を入れてやれば、以下の画像のようになります。&lt;/p&gt;
&lt;img src="https://user-images.githubusercontent.com/46207/109150837-bb933880-77ac-11eb-85ba-4fd15819dbd0.png" width=600 /&gt;
&lt;p&gt;このぐらい出来ていれば、十分でしょう。ところでBannedApiAnalyzersはめっちゃ使えるやつなので、これの対応以外にも普通に入れておくと捗ります。どうしてもこのメソッドはプロジェクトでは使用禁止！といったようなものはあると思います、それを規約じゃなくてコンパイルエラー（警告）に変換できるわけです。例えばGameObject.Find(&amp;quot;name&amp;quot;) 絶対殺すマンとかがさくっと設定できるわけです。&lt;/p&gt;
&lt;p&gt;（と思ったのですが、現状のUnity 2020.2のAnalyzer標準対応はかなりヘッポコのようで、そのままだとBannedApiAnalyzersはうまく使えなさそうです(BannedSymbols.txtの適用ができないとか、その他色々。csproj生成をフックして差し込むことはできるので、それによって差し込んでIDE側で利用する、ぐらいが妥協点になりそう)&lt;/p&gt;
&lt;h2&gt;タイムアウト処理について&lt;/h2&gt;
&lt;p&gt;タイムアウトはキャンセルのバリエーションと見なせます。つまり、CancellationTokenを渡すところに、時限発火のCancellationTokenを渡せばいいのです。そうすれば、タイムアウトの時間が来るとキャンセルが発動する。それがタイムアウト処理です。UniTaskでは &lt;code&gt;CancellationTokenSouce.CancelAfterSlim(TimeSpan)&lt;/code&gt; というのがあるので、それを使います。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var cts = new CancellationTokenSource();
cts.CancelAfterSlim(TimeSpan.FromSeconds(5)); // 5sec timeout.

try
{
    await UnityWebRequest.Get(&amp;quot;http://foo&amp;quot;).SendWebRequest().WithCancellation(cts.Token);
}
catch (OperationCanceledException ex)
{
    if (ex.CancellationToken == cts.Token) // Tokenの比較をすることで厳密に発火元を調べることができますが、この場合100%タイムアウトなので比較しなくてもそれはそれでいい
    {
        UnityEngine.Debug.Log(&amp;quot;Timeout&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;CancellationTokenSource は.NET標準のクラスであり、CancelAfterというメソッドが標準にありますが、これは（例によって）使わないでください。標準で備え付けられているものは当然のようにスレッドタイマーを用いますが、これはUnityにおいては不都合な場合が多いでしょう。CancelAfterSlimはUniTaskが用意している拡張メソッドで、PlayerLoopベースでタイマー処理を行います。パフォーマンス上でも軽量です。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;タイムアウトによるキャンセル処理と、別のキャンセル処理を組み合わせたい場合も少なくないでしょう。その場合は &lt;code&gt;CancellationTokenSource.CreateLinkedTokenSource&lt;/code&gt; を使ってCancellationTokenを合成します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var cancelToken = new CancellationTokenSource();
cancelButton.onClick.AddListener(()=&amp;gt;
{
    cancelToken.Cancel(); // cancel from button click.
});

var timeoutToken = new CancellationTokenSource();
timeoutToken.CancelAfterSlim(TimeSpan.FromSeconds(5)); // 5sec timeout.

try
{
    // combine token
    var linkedTokenSource = CancellationTokenSource.CreateLinkedTokenSource(cancelToken.Token, timeoutToken.Token);

    await UnityWebRequest.Get(&amp;quot;http://foo&amp;quot;).SendWebRequest().WithCancellation(linkedTokenSource.Token);
}
catch (OperationCanceledException ex)
{
    if (timeoutToken.IsCancellationRequested)
    {
        UnityEngine.Debug.Log(&amp;quot;Timeout.&amp;quot;);
    }
    else if (cancelToken.IsCancellationRequested)
    {
        UnityEngine.Debug.Log(&amp;quot;Cancel clicked.&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これによってキャンセルボタンのクリックによるキャンセル発火と、タイムアウトによるキャンセル発火を合成することが出来ました。&lt;/p&gt;
&lt;h2&gt;TimeoutController&lt;/h2&gt;
&lt;p&gt;ここまでが王道パターンのキャンセル処理だったのですが、今回UniTask v2.2.0では新しくTimeoutControllerというクラスを追加しました。これはタイムアウトが発火しない場合はアロケーションがなく再利用可能なCancellationTokenSourceです。タイムアウトは例外的状況なはずなので、これによってほとんどの状況で、タイムアウト処理のためのアロケーションをゼロにすることができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;TimeoutController timeoutController = new TimeoutController(); // setup to field for reuse.

async UniTask FooAsync()
{
    try
    {
        // you can pass timeoutController.Timeout(TimeSpan) to cancellationToken.
        await UnityWebRequest.Get(&amp;quot;http://foo&amp;quot;).SendWebRequest()
            .WithCancellation(timeoutController.Timeout(TimeSpan.FromSeconds(5)));
        timeoutController.Reset(); // call Reset(Stop timeout timer and ready for reuse) when succeed.
    }
    catch (OperationCanceledException ex)
    {
        if (timeoutController.IsTimeout())
        {
            UnityEngine.Debug.Log(&amp;quot;timeout&amp;quot;);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再利用（と、内部のタイマーの停止）のために、awaitが正常終了したらResetを手動で呼んでください、という一点だけ気をつけてください。&lt;/p&gt;
&lt;p&gt;CreateLinkedTokenSource的な使い方をする場合は、コンストラクタの引数に別のCancellationTokenを渡せます。これによってTimeout(TimeSpan)で得られるCancellationTokenがリンクされたものとなります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;TimeoutController timeoutController;
CancellationTokenSource clickCancelSource;

void Start()
{
    this.clickCancelSource = new CancellationTokenSource();
    this.timeoutController = new TimeoutController(clickCancelSource);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ところでここで告知が幾つか有りまして、まず、UniTaskには標準で &lt;code&gt;.Timeout&lt;/code&gt;, &lt;code&gt;.TimeoutWithoutException&lt;/code&gt; というメソッドが生えているのですが、これらは可能であれば使わないでください。というのも、 &lt;code&gt;.Timeout&lt;/code&gt;は外部からタイムアウト処理を行うもので、その場合に動いているタスク本体を停止することができないのです。タイムアウトが発火してもTask自体は動いていて、やってることは結果を無視するということです（世の中、AbortできないAPIも少なくなくて、そういうもののキャンセル処理ってこういうことなので、別にこれ自体は悪いわけではない）。かたやCancellationTokenをメソッドに渡す場合は、内部からのタイムアウト処理となるので、その場合TaskがAbort可能なものであれば、正しく処理がAbortされます。まとめると、CancellationTokenを渡すことができないメソッドに対して外付けでタイムアウト処理を行いたいときだけ、&lt;code&gt;.Timeout&lt;/code&gt;を使いましょう、ということになります。正直名前ももう少し、あんま使わないで感を醸し出す名前に変更したいぐらいなのですが、まぁとりあえずは、ということで……。&lt;/p&gt;
&lt;p&gt;もう一つ、UniTaskには &lt;code&gt;AsyncOperation.WithCancellation&lt;/code&gt; とは別に &lt;code&gt;UniTask.WithCancellation&lt;/code&gt; というメソッドが生えていたのですが、&lt;code&gt;UniTask.WithCancellation&lt;/code&gt;のほうの名前を&lt;code&gt;AttachExternalCancellation&lt;/code&gt;に変更しました。これもTimeoutの話と同じで、 &lt;code&gt;AsyncOperation.WithCancellation&lt;/code&gt; が内部からのキャンセル処理で、 &lt;code&gt;UniTask.WithCancellation&lt;/code&gt; は外部からのキャンセル処理となっていて、挙動は似ていても内部動作が全く違うからです。内部キャンセルのほうが望ましいんですが、コードを見ただけだと内部キャンセルなのか外部キャンセルなのか分からないのは非常に良くない。つーかマズい。ダメ。ので変えました。名前的にも、使いたくない雰囲気を漂わせてる名前であるとおり、あんま使わないでねという意図が込められています。&lt;/p&gt;
&lt;p&gt;最後に微妙に細かいところなのですが、&lt;code&gt;AsyncOperation.WithCancellation&lt;/code&gt;の挙動を&lt;code&gt;.ToUniTask(cancellationToken)&lt;/code&gt;のただのショートカットにしました。Timeout処理で使うのに微妙に都合が悪かったからです。挙動はあんま変わらないんですが、細かく厳密なことを言うと少し違うんですが、まぁ、そういうことということで。&lt;/p&gt;
&lt;p&gt;この手の初期のデザインミスの修正は、あんま破壊的変更祭り死ね、とはならない程度に、ちょいちょいやらなきゃなあとは思ってるので、すみませんが宜しくおねがいします。&lt;/p&gt;
&lt;h2&gt;async/awaitは何故無限に分からないのか&lt;/h2&gt;
&lt;p&gt;async/await自体は非同期処理を容易にするための仕組みであり、雰囲気としては誰でも同期処理と同じように書けることをゴールにしています。そして、実際のところそれは、達成できてます。同期と同じことしかしなければ。asyncと宣言してawaitと書けば、同期処理と同じです。それは全く嘘偽りなく正しい。別にラムダ式も出てこないし特殊なコールバックも実行順序もない。ちゃんとループも書けるしtry-catchもできる。そういうように作られてる。&lt;/p&gt;
&lt;p&gt;じゃあなぜ難しいのかというと、同期処理よりも出来ることが増えているからです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直列にすべきか並行にすべきか&lt;/li&gt;
&lt;li&gt;キャンセルにどう対応すべきか&lt;/li&gt;
&lt;li&gt;伝搬の終点をどう扱うべきか&lt;/li&gt;
&lt;li&gt;Task(UniTask)が伝搬するのをよしとすべきか&lt;/li&gt;
&lt;li&gt;投げっぱなし処理にすべきか&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;で、これらってそもそも同期処理だと出来ないことなんですよね、キャンセルって同期だと原則できないわけで。だからキャンセルなんて考えず黙ってawait、以上。とすればいいのです。別に並行(WhenAll)なんてしなくても直列で回してもいいのです、だって同期だったら黙って直列でやってた話じゃないですか。以上。&lt;/p&gt;
&lt;p&gt;が、まぁ人間出来るとなると欲が出るし、そもそも実際そういうわけにはいかないので、同期処理と比べて、よりベターな処理にするために、考えることが増える。やるべきことが増える。そこが難しさのポイントです。でも出来ることが多いってのは良いアプリケーション作りのためには悪いことではない。ブロッキング処理がなくなればUIの体験は非常に良くなるし、並行処理で高速に読み込まれれば嬉しいし、きちんとキャンセル処理されたほうがいいに決まってる。だから、非同期は重要なのです。&lt;/p&gt;
&lt;p&gt;というわけで、とりあえず一個一個考えていきましょうか。&lt;/p&gt;
&lt;h2&gt;直列にすべきか並行にすべきか&lt;/h2&gt;
&lt;p&gt;これ、JavaScriptの記事とかで、 Promise.all 使わないのは素人、バーカバーカ。みたいな記事がめちゃくちゃ良くありますが、んなこたーなくて使うかどうかはものによる。もちろん簡単に並行に束ねられるのは素晴らしいことなので、それはいいです。大いにやるべきだ。じゃあ直列処理は間違ってるかというと、別に間違っちゃあいないし、そうすべき局面だってそれなりにある。あと、allを使う必要があるからasync/awaitよりPromiseだ、みたいなのは意味不明なので無視していい。そもそも、そういう人たちってロクにコード書いたことないからなのか、thenとallぐらいしか用例を知らない説すらある。awaitはただのthenの糖衣構文「ではない」し、thenだけだと無理があるみたいなパターンもいっぱいあります。例えば非同期のミドルウェアパターンを&lt;a href="http://neue.cc/2020/08/20_594.html"&gt;async decoratorパターンによるUnityWebRequestの拡張とUniTaskによる応用的設計例&lt;/a&gt;で紹介しましたが、これなんかはasync/awaitだからこそ成立させられる、そして非常に強力な用例です。&lt;/p&gt;
&lt;p&gt;と、脱線しましたが、とはいえこうした並行処理を簡単に書けるようになったのがasync/await（つまりはPromise/Future/Task/UniTask）のいいところです。同期処理の場合では書けないのは勿論、コールバックベースでも難しくて無理がある、のでやらないものだったのが、async/awaitの登場によって頻繁に出てくるパターン、そして誰でも比較的安全に処理できるパターンとなりました。ちなみにこれ、Promiseだけでも誰でも使えるパターンとはなり得なくて、async/awaitがあるからこそ、Promiseのコード上での出現頻度が上がり、それによって適用可能になるシチュエーションが増えるという側面があると思っています。&lt;/p&gt;
&lt;h2&gt;Task(UniTask)が伝搬するのをよしとすべきか&lt;/h2&gt;
&lt;p&gt;前の話から続けると、asyncのための型(Promise/Task/UniTask)が頻出するのは、いいことだと思ってます。そのお陰で、効果的に適用できるシチュエーションが増えるんですから。とはいえ面倒くせーしグチャグチャするし嫌だ、という気持ちは大いにわかる。はい。&lt;/p&gt;
&lt;p&gt;と、ここで最新型のasync/await実装であるSwift 6から幾つか例を見てみましょう。日本語でわかりやすくまとまってる &lt;a href="https://zenn.dev/koher/articles/swift6-concurrency"&gt;Swift 6で来たる並行処理の大型アップデート近況&lt;/a&gt; と &lt;a href="https://speakerdeck.com/koher/await"&gt;先取り！ Swift 6 の async/await&lt;/a&gt; から引かせてもらいますが、まずメソッドの宣言。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;func download(from url: URL) async -&amp;gt; Data
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Dataが戻り値なわけですが UniTask[Data] みたいになっていない、Promiseが出てこないやったー、かというと、別にそんなこたぁないかなあ、と思います。Swiftの場合、asyncで宣言したメソッドにはawaitが必須であり、awaitを使うにはasyncである必要がある、と、伝搬していっているわけなので、 &lt;code&gt;async -&amp;gt; Data&lt;/code&gt; の一塊で見れば、制約や機能は UniTask[Data] のようなものと大きな違いはありません（型として明示されない分だけ、より強い制約がかかってるのですが、そのへんは後述）。&lt;/p&gt;
&lt;p&gt;そういうわけでasyncが伝搬している（悪いような言い方をすればコードを汚染している）わけですが、それに関してはどうでしょう。Swiftがいい対称性を持っているのは&lt;a href="https://qiita.com/koher/items/e4c1d88981291c35d571"&gt;Swiftの検査例外&lt;/a&gt;と似たような雰囲気で捉えられるところで、エラーの発生しうるメソッド(throws)の呼び出しにはawaitのようにtryが必要で、tryにはthrowかcatchが必要、と。&lt;/p&gt;
&lt;p&gt;なので、最下層でエラーなしメソッドからエラーありメソッドに変えたら、呼び出し側はどんどんさかのぼってエラー処理を書く必要がある。別にこれはGoも一緒ですよね、戻り値が(value)から(value, error)に変わり、対応していく必要がある。そういう対応が面倒くさいので、そうしたエラーに関しては検査しない勢もいる（C#や非検査例外のJavaなんかはそうですよね、どちらかというとむしろそのほうが多数派）わけで、良し悪し、とは言いませんが、現代的にエラー処理を強制的に伝搬させることは絶対に忌避するもの、というほどの価値観ではなくなってるのではないかと思います。&lt;/p&gt;
&lt;p&gt;で、async/awaitの話しに戻りますが、非同期もまた同様に最下層で同期から非同期に処理を変更したら伝搬していく。で、エラー処理をやったほうがいいのと同じように、同期から非同期へと性質が異なるものになったので、そしてそのことが型で明示されるのは当然いいことなので、伝搬していくのは当たり前じゃないですか？性質が変化したことを型(UniTask)なり宣言(async)なりで示し、上層側に性質が変化したことにより増えた出来ることの選択(並行処理/キャンセル/etc...)を与える。悪いことじゃないので受け入れるべきだし、async汚染とか言って喜んでるのはやめるべきですね。&lt;/p&gt;
&lt;p&gt;全部非同期というか、そういうことを全く意識させないような言語としてデザインする、というアイディアも当然あって、Goは実際それに近くて、しかも圧倒的に少数派で独特なデザインなのに大成功を収めているのが凄い。まぁじゃあそれが理想的で全ての言語がそうなっていくべきかというとそうではないとは思います（例えばキャンセルやタイムアウト処理などは結局意識させなきゃいけないので、Contextを伝搬させる必要があるため、完全に透過的にできているかというとそうではない。また全体のシンプル化の結果WaitGroupのような他ではあまり出てこないプリミティブな処理や、Channelが頻出する、もちろんそれはトレードオフなのでデザインとしてナシではないですが）。みんな違ってみんないい、とは思いませんが、目の前のプロダクトのために現在の現実の時間で何を選ぶべきか、という話ですね。&lt;/p&gt;
&lt;p&gt;伝搬はしょーがないとしても、書き味を良くするやり方はありますよね。Swiftの場合は、非同期で宣言している関数に同期関数を突っ込める。雑多なところでいうと、Task.FromResult()書いて回らなくていい、的な良さがありますね。ただまあ呼び出し側のawait, asyncの伝搬のほうが面倒くさ度というか、書くことはずっと多いので、あったほうがいいけど、なくても許容できるぐらいの感じかしら。&lt;/p&gt;
&lt;p&gt;それと async -&amp;gt; Data には UniTask[Data] のようなTask型が出てこない。これも一々ジェネリクスで書くの面倒くさいので、asyncって言ってるんだからイチイチ、そっちの型でまで書きたくない、と。めっちゃいいですね。はい、いいです。また、文法とタイトにくっついてるのでUniTaskのawait二度漬け禁止とか、フィールドには持たないで欲しいなぁみたいなのが文法レベルで制限かけられる。これもいいところです。&lt;/p&gt;
&lt;p&gt;じゃあそれと比べたC#の良いところというか現状こうなってるという点では、asyncで宣言した戻り値の型によって実行する非同期ランタイム(AsyncMethodBuilder)が切り替えられます。asyncで宣言したメソッドを非同期ステートマシンに変換するのはコンパイラの仕事ですが、そのステートマシンの各ポイントでどう処理するかの実行機は型に紐付いています。Taskで宣言しているメソッドはTaskの非同期ランタイム、ValueTaskで宣言してるメソッドはValueTaskの非同期ランタイム、そしてUniTaskで宣言してるメソッドはUniTaskの非同期ランタイムで動きます。UniTaskがやっているように、この非同期ランタイムはユーザーがC#で実装できます。&lt;/p&gt;
&lt;p&gt;世の中の99%は別に既定の非同期ランタイムで不自由しない、と思いきや、そうではなくて、完全にデフォルトの実装を無視して100%実行環境(Unity)に特化して最適化することの効果、意味みたいなことを実証したのがUniTaskで、ちゃんと成功しています。非同期実行ランタイムを切り替えられる言語は他にもありますが(Rustもそうですね)、C#のそれは私が自分で書いてそこそこうまく普及させたというのもありますが、現状よくできた仕組みになっているんじゃないかとは思います。&lt;/p&gt;
&lt;h2&gt;伝搬の終点&lt;/h2&gt;
&lt;p&gt;asyncは伝搬していきますが、一番根っこで何か処理しなきゃいけないのはC#もそうですし、別にSwiftも同様です。Swift 6の仕様を見る限り@asyncHandlerでマークされたメソッドは伝搬を打ち切った根っこのメソッドになるようですが、つまりようするにこれってC#でいうところの &lt;code&gt;async void&lt;/code&gt; です。&lt;/p&gt;
&lt;p&gt;伝搬をどういう風に打ち切ればいいのかというのは、実際初心者殺しなところがありますが、フレームワークがasync/await前提で作られている場合は意識させないことが可能です。例えばMVCウェブフレームワークのControllerで言ったら&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class FooController : Controller
{
    // Foo/Helloでアクセスできる
    public async Task Hello()
    {
        // Usercode...
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;というようにすると、ユーザーのコード記述のエントリポイントは async Task Hello であり、非同期伝搬の最上位の処理(async void)はMVCフレームワークの中で隠蔽されています。&lt;/p&gt;
&lt;p&gt;コンソールアプリケーションのMainもそうです&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;static async Task Main()
{
    // Usercode...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最上位がMainなので、伝搬の終点なんて考えなくていい。&lt;/p&gt;
&lt;p&gt;じゃあUnityは、とかWinFormsやWPFは？というと、async/awaitなんて存在しない時代からのフレームワークであり、別にそれを前提としていないので、最上位を自分で作る必要があります。これが悩ましさを増させてしまうんですね。まぁ大抵はユーザーの入力が起点なので、Buttonのイベントハンドラーに対して UniTaskVoid(async void) を突っ込む、みたいな運用になってきますが……。あとはStartCoroutineと同じような雰囲気で、MonoBehaviourのどこかでFireAndForgetですね。何れにせよ、自分で最上位となるポイントを判断しなきゃいけないというのが、ひと手間感じるところで、難しいと言われてもしょうがない話です。async voidは使うんじゃねえ（正しくはある）、みたいな話もあるから余計分からなくなるという。使っても良いんですよ、最上位では……。&lt;/p&gt;
&lt;p&gt;UniTaskの場合はUniTaskVoidという存在がまた面倒くささを増量しているのですが、上の方でC#は戻り値の型で非同期ランタイムを切り替えられると書きましたが、つまりvoidに対するC#既定のランタイムがあり、voidで宣言する以上、それは変えられないのです。そのためasync UniTaskVoid と書かせるのですが、voidは特殊な存在でありUniTaskVoidは普通の戻り値の型なので、C#コンパイラの都合上、最上位として使うためにはなんらかのハンドリング(空の警告を抑制するためだけの.Forget()呼び出し)が強いられるという……。&lt;/p&gt;
&lt;p&gt;C# 10.0 だから C# 11.0 だかに向けての提案に&lt;a href="https://github.com/dotnet/csharplang/blob/master/proposals/async-method-builders.md"&gt;AsyncMethodBuilder override&lt;/a&gt;という仕様があって、メソッド単位で非同期ランタイムを選択できるようになる、可能性があります。そうしたら&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[AsyncMethodBuilderOverride(typeof(UniTaskVoidMethodBuilder))]
async void FooAsync() { }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;みたいに書けるようになるかもしれません。うーん、でも別にこれ全然書き味悪いですねぇ。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[UniTaskVoid]
async void FooAsync() { }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ぐらいまで縮められるようになって欲しい、まぁまだProposalなので今後に期待、あとどっか適当なタイミングで提案しておこう（そもそも C# で現実的に稼働してる 非同期ランタイム を実装してるのはMicrosoftのTask/ValueTask実装者(Stephen Toub)と私ぐらいしかいないのだ）&lt;/p&gt;
&lt;h2&gt;キャンセルにどう対応すべきか&lt;/h2&gt;
&lt;p&gt;C#において、asyncメソッドは引数の最後にCancellationTokenを受け入れるべきだというふんわりした規約があります。これが、ダセーしウゼーし面倒くせーと大不評で。なるほどね、そうだね！私もそう思う！&lt;/p&gt;
&lt;p&gt;なんでこうなってるかというと、asyncに使うTask型って別にasyncで宣言したメソッドからしか作れないわけじゃなくて、手動で作れるんですよね。new Taskみたいな。Task.FromResultみたいな。それどころか別にawaitできる型もGetAwaiterという決め打ちな名前のメソッドを後付けで（拡張メソッドで）実装すればawaitできるようになりますからね。ゆるふわー。&lt;/p&gt;
&lt;p&gt;それはそれで非常に拡張性があって、そもそもasync/awaitに全然対応していないもの(Unity)に対してもユーザー側(UniTask)が対応させることが出来たりして、とても良かったのです、が、awaitする型全体を通してコンパイラがChildTask的な、便利Contextを裏側で自動で伝搬してあげるみたいな仕組みを作りづらいわけです。&lt;/p&gt;
&lt;p&gt;Swiftの場合は言語とタイトにくっついたasyncが用意されているので、&lt;code&gt;let handle = Task.runDetached { await ...}  handle.cancel()&lt;/code&gt; みたいに書ける、つまりObservableをSubscribeしたのをDisposeすればCancelでこれがUniRxで良かったのにUniTaskは面倒くせえなおい、みたいなことが出来てハッピーっぽそうです。独立したCancellationTokenを持っているのは、それはそれで柔軟な取り回しができて悪くない場合もあるんですが、まぁ99.99%の状況で上位から伝搬するCancellationTokenだけで済むのは間違いないでしょう。&lt;/p&gt;
&lt;p&gt;ともあれ現状のC#的にはどうにもなんないししょーがないかなぁ、と思ってます。（GoだってContext手動で取り回すわけだし、ね）。はい。実際にはExecutionContextというスロットをawaitの伝搬で共有していて、SynchronizationContext.Currentはそれ経由で格納されてるので、そこにCancellationToken.Currentみたいなものを仕込むこと自体はランタイム的には出来るんですけどね。でも、ExecutionContextのスロットを使うというオーバーヘッドも避けれるなら避けたほうがいいというのもあります（などもあって、Taskで自動的に行われているExecutionContextの伝搬をUniTaskでは切っています）。&lt;/p&gt;
&lt;p&gt;一応、文化として「引数の最後にCancellationTokenを受け入れる」というルールが普及していること自体は良かったと思います。JavaScriptだとAbortControllerがCancellationTokenのような機能を果たしますが、これを使っていくのが一般的という雰囲気でもないので、キャンセルに対する統一的なやり方が作れてない感じがあるので。&lt;/p&gt;
&lt;h2&gt;CPU資源の有効活用とスケジューラー&lt;/h2&gt;
&lt;p&gt;まず、非同期とCPU使って並列処理だー、みたいなのは被るけど被らないんですね。そして、CPUをぶん回さない非同期に価値はないかというと、んなわきゃぁないんですね。まずI/Oの非同期について考えるのが大事で、JavaScriptがシングルスレッドだから全然使えないかと言ったらんなわきゃあねえだろ、であり(Node.jsで見事実証されてます)、Redisがアーキテクチャとしてシングルスレッドを選択しても価値ある性能を出せることを証明してます。&lt;/p&gt;
&lt;p&gt;その上で使える資源は色々使えたほうがいいよーということであり、C#のasync/awaitの場合はTaskが、というかawaitからawaitの間が実行単位になってきます。Unityの場合はawaitの最中にゲームエンジン(C++)に処理を渡して、エンジンが処理結果をメインスレッドに戻してきたのをC#がawaitで受け取る流れになってます。エンジン側に処理をぶん投げまくってC#側のメインスレッドを空けるのが現状のUnityにおける非同期というかasync/awaitというわけですね（この辺はJavaScriptに非常に似ています）。&lt;/p&gt;
&lt;p&gt;.NET の場合はasyncメソッドは最終的にどこかの非同期I/Oに叩き込まれて、awaitで戻ってくるときにスレッドプールを使います。async/awaitが言語に実装されて以降、C#はスレッドプールをめちゃくちゃ使うようになりました、というかawaitするとスレッドプールに行くので、本質的にもはやプログラムは全てスレッドプール上で動いているといっても過言ではない。のです。全てがGoルーチンみたいな世界観と同じです（言い過ぎ）。というわけで、スレッドプールのスケジューラーへの改善の投資は続いて、もちろんワークスティーリングもしますし、ただのスレッドのプール、ではない賢い動作をする、.NETの非同期処理の心臓部となっています。&lt;/p&gt;
&lt;p&gt;.NET 6ではこのスレッドプールはPure C#実装になります。というのもC#が動くランタイムも複数あって（.NET Coreであったりmonoであったり）、それぞれが個別のネイティブ実装だと、一つのランタイムがアルゴリズム改善しても、他のランタイムに反映されなくなってしまうなどなど。.NET Core以降、C#上で低レベルなコードが書けるようになったこととランタイムの実行速度の改善が続いていることもあり、.NET 6においてはネイティブ実装→Pure C#実装への切り替えはパフォーマンス的な向上にも繋がったそうです。&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;C#のasync/awaitが登場したのは2012年、preview辺りの頃から考えるともう10年前！実用言語での大規模投入は間違いなく初めてで、最初の実装(C# 5.0)が現在から見て良かったかというと、まずかった部分も少なからずあります。しかしまぁ、6.0, 7.0, 8.0と改良を進めて来た現在のC#のasync/awaitは別に他と比べて劣っているとは思えません。8.0 のasync streamsやAsync LINQは&lt;a href="https://github.com/apple/swift-evolution/blob/main/proposals/0298-asyncsequence.md"&gt;Swiftのasync seqeunceのproposal(つまりまだ先)&lt;/a&gt;みたいなところもありますし。&lt;/p&gt;
&lt;p&gt;Unity上でUniTaskみたいな独自非同期ランタイムを作るのも、別にC#で無理してやってるというわけでもなく、自分の中では自然なことです。現実にモバイルゲームを開発していこうというところで、まず動かせない要素を決める、つまりUnityというのは不動な要素。そしてそこに乗ってるC#も外れない言語。その中で、現在可能な技術(C# 8.0)の範囲で、最高の結果を引き出すための手法を選んで、手を動かす。&lt;/p&gt;
&lt;p&gt;こないだ私の会社で出してるOSSの紹介をしたのですが、非現実的な理想ではなくて、今表現できる最高のものを生み出していく。というのをモットーにしてます。エンジニアなら評論家にならず手を動かして結果で示せ、ということですね。&lt;/p&gt;
&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/abifk9UuCO8pDc" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt; &lt;/iframe&gt; &lt;div style="margin-bottom:5px"&gt; &lt;strong&gt; &lt;a href="//www.slideshare.net/neuecc/a-quick-tour-of-the-cysharp-oss" title="A quick tour of the Cysharp OSS" target="_blank"&gt;A quick tour of the Cysharp OSS&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href="https://www.slideshare.net/neuecc" target="_blank"&gt;Yoshifumi Kawai&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;
&lt;p&gt;というわけでまぁUniTask v2.2.0もいい感じになっていると思うので、ぜひぜひ使っていただければです！&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Fri, 26 Feb 2021 00:00:00 +0900</pubDate>
      <a10:updated>2021-02-26T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2020/12/30_598.html</guid>
      <link>https://neue.cc/2020/12/30_598.html</link>
      <title>2020年を振り返る</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2020/12/30_598.html"&gt;2020年を振り返る&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2020-12-30&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;今年は前半が絶好調で、&lt;a href="http://neue.cc/2020/01/09_588.html"&gt;ConsoleAppFramework&lt;/a&gt;、&lt;a href="http://neue.cc/2020/01/30_590.html"&gt;ProcessX&lt;/a&gt;、&lt;a href="https://tech.cygames.co.jp/archives/3383/"&gt;ZString&lt;/a&gt;、&lt;a href="https://tech.cygames.co.jp/archives/3401/"&gt;ZLogger&lt;/a&gt;、そして&lt;a href="https://tech.cygames.co.jp/archives/3417/"&gt;UniTask v2&lt;/a&gt;と、凄い勢いでプログラミング的なクリエイティビティを発揮できていました。なので今年トータルとしてみれば良かったと言えます。&lt;/p&gt;
&lt;p&gt;が、後半が絶不調で無。とにかく無。なんでこんな無になったのか分からないほどに無。コロナか、コロナが悪いんか。それも実際あるんですが、いや、というかそれが全てかなー。リモートワーク向いてないんすよー、みたいな。リモート前半で魂の貯金を使い切った。無が加速してからヤバいと思って自主リモート返納（自分だけオフィスワーク）に戻したんですが、それでもなんか違うんですよねえ。まぁ、言い訳なんですけどね！新環境に適応できない旧世代民には死あるのみ、って感じなので、来年は脳みそ入れ替えてやってきたいと思います。&lt;/p&gt;
&lt;p&gt;この12月は、書く予定だったアドベントカレンダーも書けずにフィニッシュと最悪な感じですからねえ、終わりが全くしまらなかった結果、今年の印象としてはあんま良くない。でも客観的に一年通しで見たら、中々の成果を上げたとは言えます。&lt;/p&gt;
&lt;p&gt;OSSがかなり出揃ったことで、&lt;a href="https://cysharp.co.jp/"&gt;Cysharp&lt;/a&gt;という会社の輪郭をはっきりさせられた年になりました。対外的には何やってる会社か分からない、まぁ実際そこは今もよくわからないと思うんですが、それでもC#の最先端を突っ走っている会社だというイメージは確固たるものになったのではないでしょうか。去年ではまだまだ足りてないと考えていたのですが、今年追加したOSS群によって、一つポジションを引き上げられたと思っています。&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/Cysharp/MagicOnion/"&gt;MagicOnion&lt;/a&gt;もv4になって .NET 5/Pure C# gRPC 対応を果たしましたし、今年は実際に採用しているアプリケーションがリリースされていったことで、よりCysharpの目指しているヴィジョンの現実感が出てきました。来年はそのヴィジョンをより鮮明にしていくことと、もうプラスαに仕込んでいるものがあるので、その辺の露出がうまくできるといいかなーと思ってます。&lt;/p&gt;
&lt;p&gt;私個人の能力の成長という点でも、UniTask v2を始めとしてパワーある実装をやりきったことと、そこから深く学んだこともいっぱいあるので、まだまだ行けるぞという感じです。ちゃんとね、毎年成長してますよ。はい。人間、停滞＝衰退ですから。&lt;/p&gt;
&lt;p&gt;私は出したもののウケ度に割と拘るところがあるんですが、これは自分の感覚と市場の感覚が乖離していないかを測っているという面もあります。今日が誕生日でもうN回この振り返りも書いてるわけですが、そろそろ油断すると感性が腐る頃合いなんですよね。なんかピンとのズレたことを言い始めてしまうという。端的に言えばそれが老害というわけなんですが、自分も油断するとなりかねない。という危機感がそぞろ出てくるような頃合いでして。しかもね、そういうのは自覚がないわけですよ、本人は自覚がない！本人はイケてると思っているのが余計辛い！自覚がないからこそ老害なのだ。みたいなところがある。&lt;/p&gt;
&lt;p&gt;と、いうわけで、客観的な指標が必要で、とりあえず今年はOKじゃないですかね。はい。&lt;/p&gt;
&lt;h2&gt;その他文化&lt;/h2&gt;
&lt;p&gt;今年のGame of the Yearは&lt;a href="https://bethesda.net/ja/game/doom"&gt;DOOM Eternal&lt;/a&gt;ですよね……！震えるほど面白いゲームって本当に数年単位で久々で、腐った感性を復活させてくれた神の救いですよ。というわけでマストバイ。（しかし超期待したDLCは微妙だった……）&lt;/p&gt;
&lt;p&gt;今年のベストアルバムは中村佳穂のAINOUです。&lt;a href="https://mikiki.tokyo.jp/articles/-/19940"&gt;中村佳穂『AINOU』はなぜ2018年を代表する名盤なのか?&lt;/a&gt;とかって記事出てるように全然今年のアルバムじゃないんですが、聴いたのは今年だからshoganai。名盤。&lt;/p&gt;
&lt;p&gt;読み物としては、ちょくちょく&lt;a href="https://www.shibatashoten.co.jp/magazine.php?cid=3"&gt;月刊専門料理&lt;/a&gt;を買ってて、これが面白いんですよね。料理とエンジニアリングは共通するものがあると&lt;a href="https://www.oreilly.co.jp/books/9784873117874/"&gt;Cooking for Geeks&lt;/a&gt;をはじめとしてよく言われるやつですが、それプラス経営的な話とかも中々身に沁みるものがあって良いわけです。あと、料理業界はまだまだ多分アナログなんですよね、だから紙の雑誌にも相応の密度がある。その点エンジニアの場合はウェブ媒体のほうが紙より良い状態なので、雑誌が面白くないんですよね（Web+DBとかもはやつまらんでしょ）。良くも悪くもですが、まぁもう進んでしまった業界は紙の媒体が面白くなることはないのでしょう。&lt;/p&gt;
&lt;h2&gt;来年&lt;/h2&gt;
&lt;p&gt;アドベントカレンダーネタは書いてないしGitHub Issuesもかなり手を付けてないのが残っちゃったしで、あんまりスッキリして来年を迎えられないんですが……！そのへんはなるはやですっきりさせたいとして、今年はCysharpの仕込みフェーズがとてもうまくいった。実際うまくいった。そして仕込みフェーズは終了。つまり来年はどーんといきましょう。というわけで、ぜひぜひ大躍進にご期待くださいな。&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Wed, 30 Dec 2020 00:00:00 +0900</pubDate>
      <a10:updated>2020-12-30T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2020/12/15_597.html</guid>
      <link>https://neue.cc/2020/12/15_597.html</link>
      <title>UnitGenerator - C# 9.0 SourceGeneratorによるValueObjectパターンの自動実装とSourceGenerator実装Tips</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2020/12/15_597.html"&gt;UnitGenerator - C# 9.0 SourceGeneratorによるValueObjectパターンの自動実装とSourceGenerator実装Tips&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2020-12-15&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;ValueObjectは好きですか？私は大嫌いです。いじょ。&lt;/p&gt;
&lt;p&gt;ざっくり言えばプリミティブ型に専用の型を付ける教義です。例えばUserIdをintとして扱っているとTeamIdと取り違えるかもしれないし、Hpに突っ込んでしまうかもしれない。StrengthとIntelligenceとAgilityとSpeedは別物なのだから全部intじゃなくて区別して欲しい、そうじゃないと間違った演算しちゃうぞ、と。まぁそういう自体を避けるために、それぞれラップした個別型を作るのです。int strengthじゃなくてStrength strengthだぞ、と。&lt;/p&gt;
&lt;p&gt;これは一見正しく実際正しいのですが、問題もあります。一つに面倒くさい。ラップしたctorを作るのだけでも定形でウザ、と思いますが、更に等値とか実装するのは面倒くさい。また、そのままだと計算できなくなるので、算術演算のために生の値を&lt;code&gt;.Value&lt;/code&gt;で取り出す、が頻出すると安全度も下がるし見た目もめっちゃ汚くなる、当然ながらものすごく書きづらい。そしてシリアライゼーションの問題。Serialize(userId)としたときに「{ &amp;quot;Value&amp;quot; = 100 }」なんて形にシリアライズされたら最低で、全く許容できない。また、データベースで扱うときにもORMはそのままだとプリミティブしか扱えないので、マッピングできなくて不便なことになります。&lt;/p&gt;
&lt;p&gt;といった問題があるため、基本的には大嫌いなのでそういうのやらない、プリミティブで何が悪いんだボケ。ぐらいの勢いでした。実際、社内でそうしたい、という話があった場合にはトップダウン権限で却下してたぐらいです（横暴！）。のですが、上記の問題が解決するのならば、全然許せます。むしろ良い。むしろすべき。かもしれません。&lt;/p&gt;
&lt;p&gt;そこで C# 9.0 から新搭載されたSourceGeneratorの出番です。SourceGeneratorを活用したUnitGeneratorというライブラリを新しく作りました。今回はその内容の解説と、SourceGeneratorを実装する上でのTipsを紹介します。また、この記事は &lt;a href="https://qiita.com/advent-calendar/2020/csharplang2"&gt;C# その2 Advent Calendar 2020&lt;/a&gt; 15日用です。19日にも&lt;a href="https://qiita.com/advent-calendar/2020/csharplang"&gt;C# Advent Calendar 2020&lt;/a&gt;でSourceGeneratorネタを書く予定なので、まずはPart 1ということで合わせてお楽しみください。&lt;/p&gt;
&lt;p&gt;ちなみにC# Advent Calendar 2020の初日の記事 &lt;a href="https://qiita.com/RyotaMurohoshi/items/83775cf4ed1ce4f6378d"&gt;C# 9.0で加わったC# Source Generatorと、それで作ったValueObjectGeneratorの紹介&lt;/a&gt; と内容的には非常に似通ってるんですが、そこはshoganai。また&lt;a href="https://qiita.com/pierusan2010/items/d66b835240af30955da6"&gt;C#9.0 SourceGeneratorでReadonly構造体を生成するGeneratorを作ってみました。&lt;/a&gt;とも被ってますね、しょーがしょーがない。&lt;/p&gt;
&lt;h2&gt;SourceGeneratorの特性&lt;/h2&gt;
&lt;p&gt;GitHubとNuGetに&lt;code&gt;UnitGenerator&lt;/code&gt;として公開しました（この記事でも後で触れますが、ReadMe末尾にはUnityでの使い方も載せてあります）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/Cysharp/UnitGenerator"&gt;Cysharp/UnitGenerator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使い方は、&lt;code&gt;public readonly partial struct&lt;/code&gt;に対して、&lt;code&gt;[UnitOf(typeof(T))]&lt;/code&gt;を書くだけです。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;using UnitGenerator;

[UnitOf(typeof(int))]
public readonly partial struct UserId { }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これを書くと、SourceGeneratorが裏側で以下のpartial classをコンパイル時（ビルド前）に生成します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[System.ComponentModel.TypeConverter(typeof(UserIdTypeConverter))]
public readonly partial struct UserId : IEquatable&amp;lt;UserId&amp;gt; 
{
    readonly int value;
    
    public UserId(int value)
    {
        this.value = value;
    }

    public readonly int AsPrimitive() =&amp;gt; value;
    public static explicit operator int(UserId value) =&amp;gt; value.value;
    public static explicit operator UserId(int value) =&amp;gt; new UserId(value);
    public bool Equals(UserId other) =&amp;gt; value.Equals(other.value);
    public override bool Equals(object? obj) =&amp;gt; // snip...
    public override int GetHashCode() =&amp;gt; value.GetHashCode();
    public override string ToString() =&amp;gt; &amp;quot;UserId(&amp;quot; + value + &amp;quot;)&amp;quot;;
    public static bool operator ==(in UserId x, in UserId y) =&amp;gt; x.value.Equals(y.value);
    public static bool operator !=(in UserId x, in UserId y) =&amp;gt; !x.value.Equals(y.value);

    private class UserIdTypeConverter : System.ComponentModel.TypeConverter
    {
        // snip...
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;SourceGeneratorのいいところは、生成コードがC#コンパイラのメモリ内で完結していることです。つまり、ファイルが出てきません。ファイルが出てこないのは非常にいいことで、自動生成ファイルが減った時の管理をしなくてすみます。ディレクトリごと毎回Cleanするのもイマイチですし、かといって古いファイルが残り続けるのはマズいので、そこの管理をどうするか問題は毎度面倒くさいことです。&lt;/p&gt;
&lt;p&gt;欠点はメモリ内で完結していることです。ソースが見えないとデバッガビリティも下がりますし、コンパイルしないと追加されたコードが使えないというのもコード書いてる最中の手触り的に面倒。というのが一般的な話なのですが、そこを言語組み込みの機能として用意したことでカバーしているのがSourceGeneratorの良いところです。まず、デバッガビリティに関してはIDE(Visual Studioなど)でコードジャンプできるようになっているし、デバッガのステップ実行もフルサポート。また、IDEのインクリメンタルコンパイルとフルに連動しているため、属性を書いた瞬間から、裏ではそこの部分だけコンパイルが走ってコードが生成されて、生成コードが利用可能になっています。これは今までのビルド時プリプロセッサー/ポストプロセッサーではできなかった体験で、中々小気味良いものです。&lt;/p&gt;
&lt;p&gt;唯一の欠点は既存コードをEditできないので、partialであることが必須になることと、編集を要求する内容は作れないことでしょうか。まぁ、それは従来あったAnalyzer(CodeFixProvider)でやればいいということで、それなりに棲み分けもできてますし、ソースコードの追加しかできないという仕様のお陰で、作成に関してはかなりシンプルになったこともいいことです。&lt;/p&gt;
&lt;h2&gt;UnitGenerateOptions&lt;/h2&gt;
&lt;p&gt;値の等値性だけを実装するのはままあるのですが、それだけだと不便なんですよね。例えばHpは + 100 とかそのまま演算したいじゃん、と。その辺のサポートがないとすぐに.Valueで生の値を取り出すことになって
よくないし、MinやMaxなんかもそのまんま使いたい、例えばHpを現在値の2倍で回復する、みたいなのは &lt;code&gt;target.Hp = Hp.Min(target.Hp * 2, target.MaxHp)&lt;/code&gt; と書けたるとかなり自然でいいよね、と。&lt;/p&gt;
&lt;p&gt;その辺の生成をサポートするのが UnitGenerateOptions で、これを組み合わせることによって、算術演算子など好きなメソッドが追加されます。UserIdのようなものは算術演算子が生成されては困るので抑制したいし、Hpはフルで生成したい、みたいな使い分けができます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[UnitOf(typeof(int), UnitGenerateOptions.ArithmeticOperator | UnitGenerateOptions.ValueArithmeticOperator | UnitGenerateOptions.Comparable | UnitGenerateOptions.MinMaxMethod)]
public readonly partial struct Hp { }

// -- generates

[System.ComponentModel.TypeConverter(typeof(HpTypeConverter))]
public readonly partial struct Hp : IEquatable&amp;lt;Hp&amp;gt; , IComparable&amp;lt;Hp&amp;gt;
{
    readonly int value;

    public Hp(int value)
    {
        this.value = value;
    }

    public readonly int AsPrimitive() =&amp;gt; value;
    public static explicit operator int(Hp value) =&amp;gt; value.value;
    public static explicit operator Hp(int value) =&amp;gt; new Hp(value);
    public bool Equals(Hp other) =&amp;gt; value.Equals(other.value);
    public override bool Equals(object? obj) =&amp;gt; // snip...
    public override int GetHashCode() =&amp;gt; value.GetHashCode();
    public override string ToString() =&amp;gt; &amp;quot;Hp(&amp;quot; + value + &amp;quot;)&amp;quot;;
    public static bool operator ==(in Hp x, in Hp y) =&amp;gt; x.value.Equals(y.value);
    public static bool operator !=(in Hp x, in Hp y) =&amp;gt; !x.value.Equals(y.value);
    private class HpTypeConverter : System.ComponentModel.TypeConverter { /* snip... */ }

    // UnitGenerateOptions.ArithmeticOperator
    public static Hp operator +(in Hp x, in Hp y) =&amp;gt; new Hp(checked((int)(x.value + y.value)));
    public static Hp operator -(in Hp x, in Hp y) =&amp;gt; new Hp(checked((int)(x.value - y.value)));
    public static Hp operator *(in Hp x, in Hp y) =&amp;gt; new Hp(checked((int)(x.value * y.value)));
    public static Hp operator /(in Hp x, in Hp y) =&amp;gt; new Hp(checked((int)(x.value / y.value)));

    // UnitGenerateOptions.ValueArithmeticOperator
    public static Hp operator ++(in Hp x) =&amp;gt; new Hp(checked((int)(x.value + 1)));
    public static Hp operator --(in Hp x) =&amp;gt; new Hp(checked((int)(x.value - 1)));
    public static Hp operator +(in Hp x, in int y) =&amp;gt; new Hp(checked((int)(x.value + y)));
    public static Hp operator -(in Hp x, in int y) =&amp;gt; new Hp(checked((int)(x.value - y)));
    public static Hp operator *(in Hp x, in int y) =&amp;gt; new Hp(checked((int)(x.value * y)));
    public static Hp operator /(in Hp x, in int y) =&amp;gt; new Hp(checked((int)(x.value / y)));

    // UnitGenerateOptions.Comparable
    public int CompareTo(Hp other) =&amp;gt; value.CompareTo(other);
    public static bool operator &amp;gt;(in Hp x, in Hp y) =&amp;gt; x.value &amp;gt; y.value;
    public static bool operator &amp;lt;(in Hp x, in Hp y) =&amp;gt; x.value &amp;lt; y.value;
    public static bool operator &amp;gt;=(in Hp x, in Hp y) =&amp;gt; x.value &amp;gt;= y.value;
    public static bool operator &amp;lt;=(in Hp x, in Hp y) =&amp;gt; x.value &amp;lt;= y.value;

    // UnitGenerateOptions.MinMaxMethod
    public static Hp Min(Hp x, Hp y) =&amp;gt; new Hp(Math.Min(x.value, y.value));
    public static Hp Max(Hp x, Hp y) =&amp;gt; new Hp(Math.Max(x.value, y.value));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;この辺のメソッドがしっかり生成されることによって、プリミティブ型をそのまま使うのと遜色のない使用感が担保できるわけです。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;if (character.Hp &amp;lt;= 0) // Hp.GetType == typeof(Hp)
{
    // is dead.
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;みたいに書けるようになってとても嬉しい。&lt;/p&gt;
&lt;p&gt;また、演算子のオーバーロードはしっかり考慮して作るのが地味に大変な代物なので、そこをちゃんとやってくれるのも助かりです。例えばboolの場合はtrue演算子を自動実装します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public static bool operator true(Foo x) =&amp;gt; x.value;
public static bool operator false(Foo x) =&amp;gt; !x.value;
public static bool operator !(Foo x) =&amp;gt; !x.value;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;こんなの自分で実装する機会なんてほとんどないと思いますが、これによってifに直接突っ込めるようになります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;if (foo) // foo.GetType() == typeof(Foo)
{
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;UnitGenerateOptionsは現在のところ以下のオプションを提供しています。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[Flags]
internal enum UnitGenerateOptions
{
    None = 0,
    ImplicitOperator = 1,
    ParseMethod = 2,
    MinMaxMethod = 4,
    ArithmeticOperator = 8,
    ValueArithmeticOperator = 16,
    Comparable = 32,
    Validate = 64,
    JsonConverter = 128,
    MessagePackFormatter = 256,
    DapperTypeHandler = 512,
    EntityFrameworkValueConverter = 1024,
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例えば以下のように指定できます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[UnitOf(typeof(int), UnitGenerateOptions.ArithmeticOperator | UnitGenerateOptions.ValueArithmeticOperator | UnitGenerateOptions.Comparable | UnitGenerateOptions.MinMaxMethod)]
public readonly partial struct Strength { }

[UnitOf(typeof(DateTime), UnitGenerateOptions.ParseMethod | UnitGenerateOptions.Comparable)]
public readonly partial struct EndDate { }

[UnitOf(typeof(string), UnitGenerateOptions.MessagePackFormatter)]
public readonly partial struct Message { }

[UnitOf(typeof(byte[]))]
public readonly partial struct Image { }

[UnitOf(typeof((string street, string city)), UnitGenerateOptions.Validate)]
public readonly partial struct StreetAddress
{
    private partial void Validate()
    {
        if (!DataMaster.Contains(value.street)) throw new Exception(&amp;quot;Invalid Street: &amp;quot; + value.street);
        if (!DataMaster.Contains(value.city)) throw new Exception(&amp;quot;Invalid City: &amp;quot; + value.city);
    }   
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Validateだけ少し特殊で、自動生成側のコードが&lt;code&gt;partial void Validate()&lt;/code&gt;メソッドを生成して、自動生成されるコンストラクタでそれを呼ぶようになっています。Validateの実体をユーザー側が書けばOKということですね。プリミティブ型と違って、値が検証済みであることが保証されている、というのも一般的なプラクティスとしては重要な話です。（ただしstructのため、default(T)は防げないので、そういう意味では完全なValidationではありません）&lt;/p&gt;
&lt;h2&gt;シリアライザの自動実装&lt;/h2&gt;
&lt;p&gt;繰り返しますが 「{ &amp;quot;Value&amp;quot; = 100 }」みたいにシリアライズされるのは最低です。「100」とシリアライズされなければならない。と、いうわけで、そういう場合は専用のシリアライザを実装すれば回避できます。現状はSystem.Text.JsonのJsonConverterとMessagePack用のMessagePackFormatterを自動実装するオプションが用意されています。こういうのをちまちま用意するのは、私がシリアライザについて人一倍拘りがあるからで、普通はあんまないでしょうね。でもシリアライザはシステムにおいて本当に大事なことだから！&lt;/p&gt;
&lt;p&gt;例えば &lt;code&gt;UnitGenerateOptions.MessagePackFormatter&lt;/code&gt; は以下のようなコードを自動実装します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[UnitOf(typeof(int), UnitGenerateOptions.MessagePackFormatter)]
public readonly partial struct UserId { }

// -- generates

[MessagePackFormatter(typeof(UserIdMessagePackFormatter))]
public readonly partial struct UserId 
{
    class UserIdMessagePackFormatter : IMessagePackFormatter&amp;lt;UserId&amp;gt;
    {
        public void Serialize(ref MessagePackWriter writer, UserId value, MessagePackSerializerOptions options)
        {
            options.Resolver.GetFormatterWithVerify&amp;lt;int&amp;gt;().Serialize(ref writer, value.value, options);
        }

        public UserId Deserialize(ref MessagePackReader reader, MessagePackSerializerOptions options)
        {
            return new UserId(options.Resolver.GetFormatterWithVerify&amp;lt;int&amp;gt;().Deserialize(ref reader, options));
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;private classでFormatterが実装されるのがポイントで、Attributeからそのフォーマッターを取り出すことで、外部のResolverへの登録をせずに専用の対応をしています。Serialize/DeserializeはResolver経由じゃなくて直接Writer/Readerのプリミティブ型を呼ぶことで高速化できますが、まぁそれは次の機会に。このコードを発展化させた、MessagePack for C#におけるSourceGenerator対応については12/19の記事で詳しく触れる予定です。&lt;/p&gt;
&lt;p&gt;データベースに関しても UnitGenerateOptions.DapperTypeHandler, UnitGenerateOptions.EntityFrameworkValueConverter でDapperとEF Coreの対応コードを生成します。ただしこちらは自動利用のシステムがないので、手動で取り出して登録する必要があります。&lt;/p&gt;
&lt;h2&gt;.Value is dead&lt;/h2&gt;
&lt;p&gt;UnitGeneratorはpublicプロパティを一つも生成しません。つまり、.Valueはありません。私は.Valueによる値の取り出しが悪いプラクティスだと思っていて、カジュアルに使おうという気持ちを起こさないようにしています。演算子の生成なども用意してあるし、あとは専用のメソッドを自前で書いたりしていくなどで解決できるといいよね、と。&lt;/p&gt;
&lt;p&gt;とはいえさすがに取り出せないのは不便というか実用的ではないので、&lt;code&gt;.AsPrimitive()&lt;/code&gt; で取れます。プロパティではなくメソッドというだけで、心理的に少し抵抗感出るんじゃないでしょうか？制約なんてそのぐらいでいいでしょう。あんまりキツくやるのも好きではないので。&lt;/p&gt;
&lt;h2&gt;Unityで使う&lt;/h2&gt;
&lt;p&gt;Source Generatorは C# 9.0 の機能です。というわけで、2020年現在のUnityはどのバージョンもそれをサポートしていません。じゃあ使えないじゃんって話なのですが、幸いファイルとして生成する機能も用意されているので、外部コマンドを実行したら自動生成する、ぐらいの雰囲気でならUnityでも使うことができます。&lt;/p&gt;
&lt;p&gt;まずはコンフィグとなるcsprojを用意します。例えばUnitSourceGen.csprojとして、以下のような内容のものを作ります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;
    &amp;lt;PropertyGroup&amp;gt;
        &amp;lt;TargetFramework&amp;gt;net5.0&amp;lt;/TargetFramework&amp;gt;

        &amp;lt;!-- add this two lines and configure output path --&amp;gt;
        &amp;lt;EmitCompilerGeneratedFiles&amp;gt;true&amp;lt;/EmitCompilerGeneratedFiles&amp;gt;
        &amp;lt;CompilerGeneratedFilesOutputPath&amp;gt;$(ProjectDir)..\Generated&amp;lt;/CompilerGeneratedFilesOutputPath&amp;gt;
    &amp;lt;/PropertyGroup&amp;gt;

    &amp;lt;ItemGroup&amp;gt;
        &amp;lt;!-- reference UnitGenerator --&amp;gt;
        &amp;lt;PackageReference Include=&amp;quot;UnitGenerator&amp;quot; Version=&amp;quot;1.0.0&amp;quot; /&amp;gt;

        &amp;lt;!-- add target sources path from Unity --&amp;gt;
        &amp;lt;Compile Include=&amp;quot;..\MyUnity\Assets\Scripts\Models\**\*.cs&amp;quot; /&amp;gt;
    &amp;lt;/ItemGroup&amp;gt;
&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;あとは &lt;a href="https://dotnet.microsoft.com/download"&gt;.NET SDK&lt;/a&gt;を入れて、コマンドを叩きましょう。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dotnet build UnitSourceGen.csproj
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;これで UnitGenerator\UnitGenerator.SourceGenerator*.Generated.cs がOutputPathに指定したところに生成されています。UnitGeneratorは、UnitOfAttributeやUnitGenerateOptionsも自動生成コードの中に含まれる仕様（ランタイムレス）なので、一回空の状態で実行すれば、それらのコードが生成されて利用可能になります。&lt;/p&gt;
&lt;h2&gt;SourceGenerator実装の方法&lt;/h2&gt;
&lt;p&gt;netstandard2.0のライブラリプロジェクトとして（いまのところnet5.0だとうまくいかない、これはVisual Studioが .NET Frameworkで動いているせいだから、らしい）Microsoft.CodeAnalysis.CSharpを参照します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;
    &amp;lt;PropertyGroup&amp;gt;
        &amp;lt;TargetFramework&amp;gt;netstandard2.0&amp;lt;/TargetFramework&amp;gt;
        &amp;lt;LangVersion&amp;gt;preview&amp;lt;/LangVersion&amp;gt;
        &amp;lt;Nullable&amp;gt;enable&amp;lt;/Nullable&amp;gt;
    &amp;lt;/PropertyGroup&amp;gt;

    &amp;lt;ItemGroup&amp;gt;
        &amp;lt;PackageReference Include=&amp;quot;Microsoft.CodeAnalysis.CSharp&amp;quot; Version=&amp;quot;3.8.0&amp;quot; PrivateAssets=&amp;quot;all&amp;quot; /&amp;gt;
    &amp;lt;/ItemGroup&amp;gt;
&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;また、合わせてテスト用のプロジェクトを用意して、ライブラリプロジェクトを参照するようにしておくといいでしょう。プロジェクト参照を、OutputItemType=&amp;quot;Analyzer&amp;quot;にしておきます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Project Sdk=&amp;quot;Microsoft.NET.Sdk&amp;quot;&amp;gt;
    &amp;lt;PropertyGroup&amp;gt;
        &amp;lt;OutputType&amp;gt;Exe&amp;lt;/OutputType&amp;gt;
        &amp;lt;TargetFramework&amp;gt;net5.0&amp;lt;/TargetFramework&amp;gt;
        &amp;lt;Nullable&amp;gt;enable&amp;lt;/Nullable&amp;gt;
        &amp;lt;LangVersion&amp;gt;preview&amp;lt;/LangVersion&amp;gt;
    &amp;lt;/PropertyGroup&amp;gt;

    &amp;lt;ItemGroup&amp;gt;
        &amp;lt;ProjectReference Include=&amp;quot;..\..\src\UnitGenerator\UnitGenerator.csproj&amp;quot;
                          OutputItemType=&amp;quot;Analyzer&amp;quot; ReferenceOutputAssembly=&amp;quot;false&amp;quot; /&amp;gt;
    &amp;lt;/ItemGroup&amp;gt;
&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;あとはISourceGeneratorを実装するだけ。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;[Generator]
public class SourceGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
#if DEBUG
        if (!System.Diagnostics.Debugger.IsAttached)
        {
            // System.Diagnostics.Debugger.Launch();
        }
#endif 

        context.RegisterForSyntaxNotifications(() =&amp;gt; new SyntaxReceiver());
    }

    public void Execute(GeneratorExecutionContext context)
    {
    }

    // 実装しなくてもいいけど、この段階で対象になるファイルを引っ掛けておくとワンパスで処理できる
    class SyntaxReceiver : ISyntaxReceiver
    {
        public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
        {
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;System.Diagnostics.Debugger.Launch() を入れておくと、デバッガでアタッチできて実装が捗ります。ただしVisual Studioがインクリメンタルコンパイル的にかなりの頻度でキックしてくるので、不要なときはコメントアウトしておくのが吉。また、SourceGeneratorの実装コードの変更にたいしてVisual Studioのキャッシュがうまく追随してくれなくて、実装中は挙動が腐ることがよくあるので、困ったときの再起動でやり過ごしましょう。&lt;/p&gt;
&lt;p&gt;RegisterForSyntaxNotificationsは使っても使わなくてもどちらでもいいのですが(ExecuteのところでSyntaxTreeの全てが手に入るので探索し放題)、ここで大雑把でも引っ掛けておいたほうが、その後の処理が軽量になるので、使ったほうが基本的にはヨシ。&lt;/p&gt;
&lt;p&gt;SourceGeneratorでユーザーが使う属性は、参照DLL内に含めておいてそれを使う場合と、参照DLLは完全に空にして、ソースジェネレーター自身が生成するパターンがあります。後者のパターンを使うと、ソースジェネレーターのためだけに参照DLLが増えることを避けれるので、今回のUnitGeneratorのような、生成コードが全ての処理を行うタイプのものは、そちらのパターンを使ったほうが良いでしょう。&lt;/p&gt;
&lt;p&gt;やりかたは単純に最初に必要な属性を突っ込んでしまうという、ただそれだけなのですが一点注意なのは、この生成は絶対死守しましょう。Execute内で例外が発生したりすると、ここでAddSourceした属性の追加はキャンセルされます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public void Execute(GeneratorExecutionContext context)
{
    context.AddSource(&amp;quot;UnitOfAttribute.cs&amp;quot;, &amp;quot;internal class UnitOfAttribute...);

    try
    {
        // manipulate syntax...
    }
    catch (Exception ex)
    {
        System.Diagnostics.Trace.WriteLine(ex.ToString());
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;特にIDEのインクリメンタルコンパイルが稼働している状態だと、入力途中の「不完全なコード」が頻繁に飛んできます。こうした不完全なコードによる不正な構文木を正しくハンドリングするのはかなり難しく、例外を飛ばしてしまうのは正直避けられません。しかし、何があっても最初に生成する属性のAddSourceだけは維持しないと、「入力途中の不完全コード→例外発生で属性が吹っ飛ぶ→属性が吹っ飛ぶので入力補完が効かないどころか書いてるものが全てエラーになる」という負のループが発生します。なので、これに関してはtry-catchで握り潰しOKです。&lt;/p&gt;
&lt;p&gt;コード生成のためのテンプレートですが、サンプルだとみんなstring interpolationでさっくり処理してますが、やめときましょう。複雑なコードを生成しようとすると破綻するので、よほど単純な生成じゃないならちゃんとテンプレートエンジン使いましょう。&lt;/p&gt;
&lt;p&gt;じゃあ何を使えばいいのか、というとT4 Templateです。以前に&lt;a href="http://neue.cc/2019/12/06_585.html"&gt;.NET Core時代のT4によるC#のテキストテンプレート術&lt;/a&gt;という記事を書いたので、それを読んでくださいな。これの「実行時テキスト生成(TextTemplatingFilePreprocessor)」を使います。具体的なUnitGeneratorのテンプレートは&lt;a href="https://github.com/Cysharp/UnitGenerator/blob/939e6d54d68dbb102d2986de5fe442b8780d4216/src/UnitGenerator/CodeTemplate.tt"&gt;UnitGenerator/CodeTemplate.tt&lt;/a&gt;にあるので参考にどうぞ。ただたんにOptionによってifがちょろちょろある程度ですが、それでもこれをstring interpolationとStringBuilderで処理するのは無理があります。&lt;/p&gt;
&lt;p&gt;ユニットテストに関しては &lt;code&gt;CSharpGeneratorDriver&lt;/code&gt; というものが用意されているので、それで小さいCompilationを作って渡せばOK。ってどういうこっちゃという感じですが、&lt;a href="https://gist.github.com/chsienki/2955ed9336d7eb22bcb246840bfeb05c"&gt;chsienki/GeneratorTests.cs&lt;/a&gt;のコードをまんま使えばOKですね。中身は単純です。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var comp = CreateCompilation(/* ソースジェネレーターの対象コード */);
var newComp = RunGenerators(comp, out var generatorDiags, new SimpleGenerator());

// あとはnewCompから生成コードを引っ張ってきて、それが意図通りの正しさかどうか見たり
Assert.Empty(newComp.GetDiagnostics()); // エラーなくちゃんと生成できてるかどうか
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ただし、参照DLLを増やすと面倒くさい挙動したり、そもそも生成されたコードの挙動が正しいかどうかを見たい(UnitGeneratorでいうと算術演算子が正しいかとか、シリアライザの実装が正しいかとか）ほうが多いんじゃないかなーと思うので、普通にユニットテストプロジェクトにSourceGenerator参照して、それが生成されたコードを動かして普通にAssert書く、みたいなのでいいかな。私は実際そんなわけで、CSharpGeneratorDriver経由のテストはやめました。（というかそもそも普通のユニットテストもたいして書いてない説はある）&lt;/p&gt;
&lt;p&gt;最後にNuGetへのパブリッシュについて。SourceGeneratorはAnalyerとして登録したいので、ひと手間いります。具体的には以下のように処理します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;PropertyGroup&amp;gt;
    &amp;lt;IncludeBuildOutput&amp;gt;false&amp;lt;/IncludeBuildOutput&amp;gt;
    &amp;lt;SuppressDependenciesWhenPacking&amp;gt;true&amp;lt;/SuppressDependenciesWhenPacking&amp;gt;
&amp;lt;/PropertyGroup&amp;gt;

&amp;lt;ItemGroup&amp;gt;
    &amp;lt;None Include=&amp;quot;$(OutputPath)\$(AssemblyName).dll&amp;quot; Pack=&amp;quot;true&amp;quot; PackagePath=&amp;quot;analyzers/dotnet/cs&amp;quot; Visible=&amp;quot;false&amp;quot; /&amp;gt;
&amp;lt;/ItemGroup&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;IncludeBuildOutputで、自身のDLLを参照用として含めないようにします、これは前述の「参照DLLは完全に空にして、ソースジェネレーター自身が必要な属性を生成するパターン」を使う場合には自身の参照は不要だからですね。SuppressDependenciesWhenPackingは、これ設定しとかないとpack時に空なんだけど、という警告が出てくるので黙らせます。空なのは知っとるがな。&lt;/p&gt;
&lt;p&gt;Analyzerとしてpackするにはanalyzers/dotnet/cs以下に配置すればいいだけ、ということで、そういう設定をしておきます。&lt;/p&gt;
&lt;p&gt;一手間と言ってもこれだけです。昔はAnalyzerはPowerShell動かして小細工しなきゃいけないとか色々あって超絶面倒くさかったんですが、.NET 5時代の今は、だいぶ簡単になりました。&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;ずっとF#の&lt;a href="https://docs.microsoft.com/en-us/dotnet/fsharp/language-reference/units-of-measure"&gt;Units of Measure&lt;/a&gt;のようなものが欲しいと思っていたのですよね。プリミティブなのだけど型がついてる。コンパイル時には型が消えてプリミティブそのものになるのでオーバーヘッドがない。そのままでも色々な演算ができる。&lt;/p&gt;
&lt;p&gt;UnitGeneratorはお洒落なsuffixで生成とかはできないし組み込みの単位の変換関係（グラムとキログラムとかインチとフィーととか）があるわけじゃないので、同じものかといったら全然別物ではありますが、しかしValue Objectパターンの実装としては必要十分で、雰囲気も近づけられたのではないかと思います。&lt;/p&gt;
&lt;p&gt;C#において、1要素のstructはメモリレイアウト的にはプリミティブ型と同一なので、完全に消せるわけではないですが、オーバーヘッドも減らしていける余地があります(演算のたびにnewで包み直していたりするのも、Unsafe.Asを活用していけばなくせるので、だいぶ近づけはするかな、と）。&lt;/p&gt;
&lt;p&gt;実際ちゃんと型がついているのは良い状態で最終的に捗るのは間違いないので、このUnitGeneratorのアプローチが役に立てば何よりですね、是非試してみてください。あと、SourceGeneratorも是非作っていきましょう！&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Tue, 15 Dec 2020 00:00:00 +0900</pubDate>
      <a10:updated>2020-12-15T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2020/11/16_596.html</guid>
      <link>https://neue.cc/2020/11/16_596.html</link>
      <title>MagicOnion v4 - .NET 5 と ASP .NET Core gRPC対応への進化</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2020/11/16_596.html"&gt;MagicOnion v4 - .NET 5 と ASP .NET Core gRPC対応への進化&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2020-11-16&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;Cysharpから&lt;a href="https://github.com/Cysharp/MagicOnion/"&gt;MagicOnion v4&lt;/a&gt;を先週リリースしました。今回のリリースの実装はほぼ全て&lt;a href="https://github.com/mayuki"&gt;@mayuki&lt;/a&gt;さんにやってもらったので、詳細はそちらに丸投げドンとして(ReadMeもかなり書き換えてあるので、詳しいところはそちらも読んでください)、改めて .NET 5とgRPC、そしてMagicOnionの位置付けとロードマップなどを説明したいかな、と思います。&lt;/p&gt;
&lt;p&gt;MagicOnion v4ではサーバーサイド側は完全に ASP.NET Core KestrelベースのPure C#実装になりました。今まではGoogleの提供していたgRPC C Coreを利用していたのですが、今回よりMicrosoft実装に切り替えています。これによりASP.NET Core MVCなどと基盤が共通化されたので、gRPCを提供しつつHTTP/1 REST APIの口やHTML出力を行うような同居がとてもやりやすくなりました。&lt;/p&gt;
&lt;p&gt;そして何より、パフォーマンスが向上しています。&lt;/p&gt;
&lt;p class="noindent"&gt;
&lt;img src="https://user-images.githubusercontent.com/46207/99238325-ed574380-283c-11eb-91cb-5c6982dc6be8.png" width=640&gt;
&lt;/p&gt;
&lt;p&gt;.NET 5における性能向上に関しては&lt;a href="https://devblogs.microsoft.com/aspnet/grpc-performance-improvements-in-net-5/"&gt;gRPC performance improvements in .NET 5&lt;/a&gt;にて紹介されていますが、まず、gRPCと一口で言っても性能は言語によって千差万別です。HTTP/2だから速いとか、gRPCだから速いとか、そういうことはありません。大事なのは実装です。&lt;/p&gt;
&lt;p&gt;gRPCの場合は、各言語での独自実装組(Java, Go, Rust)と、Cで作られているCoreのバインディング組(Ruby, Python, Node.js, etc...)に分かれます。バインディングだから低速だということはないのですが（そもそも高速なC++実装はC Coreの上に作られている）、どうしてもマーシャリング部分の実装の甘さや、各言語の部分に乗っかった箇所の実装の弱さに引っ張られて、性能が落ちやすい傾向にあります。&lt;/p&gt;
&lt;p&gt;実際のところ、どれだけパフォーマンスに本気になって実装しているか、というところが性能に現れるので、わざわざ各言語で独自実装しているものは本気度が高く、バインディングで済ませているのは本気度が低い（動けば御の字）といったような見方でも良いでしょう。&lt;/p&gt;
&lt;p&gt;C#も今まではC Coreのバインディングでしたが、.NET Core 3.1からPure C#実装が提供され、そして今回の.NET 5よりHTTP/2の性能向上に注力したことで、C++, Rust, Goと並ぶTier1の位置までパフォーマンス向上を果たしました。&lt;/p&gt;
&lt;p&gt;もともとHTTP/1においても執念深く延々と性能改善施策を続けていて、ついに&lt;a href="https://www.techempower.com/benchmarks/#section=data-r19&amp;amp;hw=ph&amp;amp;test=plaintext"&gt;TechEmpower Web Framework Benchmarks&lt;/a&gt;では1位(Plaintextのみですが)を奪取しています。&lt;/p&gt;
&lt;p class="noindent"&gt;
&lt;img src="https://user-images.githubusercontent.com/46207/99238486-2099d280-283d-11eb-87b6-322730902eee.png" width=640&gt;
&lt;/p&gt;
&lt;p&gt;それ以外にも .NET 5では&lt;a href="https://devblogs.microsoft.com/dotnet/performance-improvements-in-net-5/"&gt;Performance Improvements in .NET 5&lt;/a&gt;として細かい対応を延々としてきたのがついに実ったという感じですね。&lt;a href="https://devblogs.microsoft.com/dotnet/announcing-net-5-0/"&gt;Announcing .NET 5.0&lt;/a&gt;で表明されていますが、.NET 5 は Unified Platformsを標榜してランタイムコンポーネント・コンパイラ・言語を統一するという話があります。そうした大きなバージョンアップに相応しい一歩なのではないでしょうか。&lt;/p&gt;
&lt;p&gt;ちなみに、.NET 5、実質的に機能しだすのは.NET 6からで、5に関しては基礎固めと.NET Core 3のリブランディング的な感じなので、実際のインパクトは今の所あんまありません。&lt;/p&gt;
&lt;h2&gt;gRPCとトランスポート中立、或いはQUIC&lt;/h2&gt;
&lt;p&gt;色々な構成要素の塊がgRPCなのですが、それぞれの要素はプラガブルで分解可能だったりします。シリアライザはProtocol Buffersでなくてもいいし(C++実装は&lt;a href="https://google.github.io/flatbuffers/"&gt;FlatBuffers&lt;/a&gt;に置き換えられるものも用意されていたりするし、MagicOnionはMessagePackを使っています)、トランスポート層もHTTP/2的な決まりごとにさえ従えるのなら、ある程度は自由に変更できます、実際TCPではなくUNIX domain socketへの置き換えはプロセス間通信としてgRPCを使う場合にはままあります。&lt;/p&gt;
&lt;p&gt;C Coreにべったりの場合は、換装の自由度が低かったりしたのですが、Pure C#に置き換わり、その辺の仕組みが全て ASP.NET Core の上に乗っかったことにより、比較的自由に弄れるようになっています。&lt;/p&gt;
&lt;p&gt;既にASP.NET CoreにはQuic実装が&lt;a href="https://www.nuget.org/packages/Microsoft.AspNetCore.Server.Kestrel.Transport.Experimental.Quic/"&gt;Microsoft.AspNetCore.Server.Kestrel.Transport.Experimental.Quic&lt;/a&gt;として(Experimentalですが)提供されています。&lt;a href="https://github.com/microsoft/msquic"&gt;MsQuic&lt;/a&gt;を基盤として利用するため、Quicの実装準拠度としても比較的信用が置けるでしょう。MsQuicはWindows Serverで使うため、当然ながら相当固い実装である必要があるからです。なお、MsQuic自体はクロスプラットフォームのためLinuxで動きます。&lt;/p&gt;
&lt;p&gt;サーバーはそうして自由に対応できるとして、現状クライアント側がイマイチなのですが、そこは追々という感じでしょうか。&lt;/p&gt;
&lt;p&gt;特にゲームでのリアルタイム通信での利用時に、TCPであることがボトルネックとなることは避けたいので、RUDPや、中国のネットワークゲームでよく使われる&lt;a href="https://github.com/skywind3000/kcp/blob/master/README.en.md"&gt;KCP&lt;/a&gt;による通信の口は用意しておきたいと思っています。QUICが大安定して全てそれで解決、みたいな時代が来ればいいんですけれどね。そう遠くはなさそうな感じがあるので、期待しています。&lt;/p&gt;
&lt;h2&gt;gRPCとMagicOnion、StreamingHubとBidirectional Streaming&lt;/h2&gt;
&lt;p&gt;gRPCの色々な構成要素の中でも最重要なのがprotoによる言語中立のスキーマとコードジェネレートにあるでしょう。MagicOnionは、そのprotoを投げ捨ててC# to C#に限定されるため、デメリットを超えるだけのメリットが必要です。&lt;/p&gt;
&lt;p&gt;一つはprotoが言語中立であることによる表現力の乏しさを、C#そのものスキーマとすることで解決しています。protoの場合は少しのプリミティブとEnum、コレクションとマップのみですが（また、nullもない)、MagicOnionの場合は、C#そのものスキーマとして見立て、メッセージ形式にMessagePack for C#を利用することで、（ほぼ）全てのC#型が転送可能になっています。&lt;/p&gt;
&lt;p&gt;例えば.NET 5ではWCFの置き換えにgRPCが推奨されていますが &lt;a href="https://docs.microsoft.com/en-us/dotnet/architecture/grpc-for-wcf-developers/migrate-request-reply"&gt;Migrate a WCF request-reply service to a gRPC unary RPC&lt;/a&gt; 、protoへの書き換えが必要なことと、表現力のギャップに苦しむことがあります。MagicOnionならDataContractで表現された型は全てMessagePack for C#でシリアライズ可能ですし、OperationContractのメソッドの複数引数のような表現も可能なため、移行におけるギャップはほとんどありません。&lt;/p&gt;
&lt;p&gt;また、gRPCは双方向のリアルタイム通信用にBidirectional streaming RPCが利用できますが、これは双方が投げっぱなしのAPIしか存在しないため、戻り値の取得や処理の完了の待機などが実装できません。更にエンドポイントとなる型も一つしか使えないため、大量のoneofで呼び出しの切り分け処理をするしかありません。&lt;/p&gt;
&lt;p&gt;MagicOnion StreamingHubはBidirectional streaming RPCの上に、双方向にC#としての型やメソッドのルーティング処理をつけ、client -&amp;gt; server -&amp;gt; client の呼び出しでは戻り値の取得やエラー送信、完了待機のシステムを入れました。この基盤処理の実装によって、初めてgRPCで実用的なリアルタイム通信が可能になっています。なお、APIは &lt;a href="https://docs.microsoft.com/en-us/aspnet/core/signalr/introduction"&gt;ASP.NET Core SignalR&lt;/a&gt;に寄せたため、そちらの経験があれば比較的スムーズに移行できるはずです。&lt;/p&gt;
&lt;h2&gt;UnityとgRPC&lt;/h2&gt;
&lt;p&gt;MagicOnion v4ではサーバーサイド側は完全に ASP.NET Core KestrelベースのPure C#実装になりました。クライアント側も.NET Coreの場合はHttpClientベースのPure C#実装になりました。Unityは……？というと、引き続きC Coreベースの提供になります。Unity側の改善はMagicOnionにおいてはv5でなんとかする予定ですので少々お待ち下さい。&lt;/p&gt;
&lt;p&gt;Unity側の実装がC Coreで提供されている状態は、初期セットアップが相当面倒くさくなっています。というのもGoogleがAndroid, iOS向けのビルドを雑にとりあえずといった感じで提供しているだけなので、そのまんまだと動かないという……。MagicOnionのReadMeの&lt;a href="https://github.com/Cysharp/MagicOnion/#support-for-unity-client"&gt;Support for Unity Client&lt;/a&gt;セクションで、その辺は手厚めに解説してはいます。例えばそのまんまだとiOS用のgRPC libが100MBを超えていてGitHubで扱えないという問題が発生するのですが、ReadMeに説明してあるストリッピングの手順に従ってもらえればlibのサイズを縮めることができます。&lt;/p&gt;
&lt;p&gt;ほか、C Coreの持つネイティブコネクションのライフサイクルと、Unity上での頻繁なPlay/StopによるC#側のライフサイクルが自動では一致しないため、ネイティブコネクションがリークするとエディタごと巻き込んでフリーズする（この場合、コネクション管理を徹底してライフサイクルを一致させれば大丈夫）、といった面倒くさい問題が発生したりします。&lt;/p&gt;
&lt;p&gt;また、Taskベースで作られているためアロケーションが多めという問題もあったり。&lt;/p&gt;
&lt;p&gt;これらネイティブライブラリであることの問題は、Pure C#実装を提供することで解決すると考えています。Task部分に関しては&lt;a href="https://github.com/Cysharp/UniTask/"&gt;UniTask&lt;/a&gt;を活用するように書き換えれば、アロケーションも減らせるでしょう。実際、Unity用のメジャーなOSSネットワークフレームワークであるMirror、の作者陣が内部分裂してForkされた&lt;a href="https://github.com/MirrorNG/MirrorNG"&gt;MirrorNG&lt;/a&gt;はUniTaskベースで構築されています。&lt;/p&gt;
&lt;p&gt;Pure C#実装の場合は、UnityのC#ランタイムであるmonoがあまり性能が良いとは言えないため、問題になる可能性があるのですが、サーバーとして使わなければ大丈夫なのではないかと踏んでいます。フルUnity実装でサーバーを提供する場合は気になるところなのでネイティブ実装を混ぜるなどの方向性もあるとは思いますが、現状のMagicOnionの構成はUnityはクライアントにしかならないので。&lt;/p&gt;
&lt;h2&gt;gRPCであること&lt;/h2&gt;
&lt;p&gt;gRPCを推しているのは、HTTP/2に乗っかっていることでインフラ側のミドルウェアが豊富なことがあります。Nginx, Envoyなど、今ではほとんどのソフトウェアがHTTP/2対応していますし、AWS ALBに至っては&lt;a href="https://aws.amazon.com/jp/blogs/news/new-application-load-balancer-support-for-end-to-end-http-2-and-grpc/"&gt;gRPC専用のサポート&lt;/a&gt;を追加してきました。これらを活用することで、独自の通信形式などに比べると、サーバー構築の柔軟性が飛躍的に向上しています。独自っぽい雰囲気の漂っているMagicOnionも、変更しているのはメッセージの中身だけなので、gRPCのミドルウェアのエコシステムにはフルに乗っかれています（というか、ちゃんと乗れるように作っているのです）&lt;/p&gt;
&lt;p&gt;また、自社で何もかもをすべて作らない、というのもあります。ASP.NET Coreに乗っかることで、Microsoftによる通信ライブラリの性能改善にタダ乗りしています。&lt;/p&gt;
&lt;p&gt;gRPCそのもののメリットとしては、API通信とリアルタイム通信の二系統を一つのフレームワークに一本化できること、これは私が4年前にgRPCを採用した（当時は1.0が出たばかりでUnityの利用事例はゼロだし、一般の事例はマイクロサービスのサーバー間通信用としてが多くクライアント-サーバー通信を置き換えようとする例もあまりなかった）理由でもあります。&lt;/p&gt;
&lt;h2&gt;ロードマップ&lt;/h2&gt;
&lt;p&gt;v5におけるUnityクライアントの作成、ユーティリティとして負荷テストツールの提供、などがとりあえず並んでいます。特に負荷テストツールはあと少しなので、近日中にお届けできるかと。&lt;/p&gt;
&lt;p&gt;MagicOnion自体のプロダクト採用の実績は増えてきていて、直近では&lt;a href="https://d4dj.bushimo.jp/"&gt;D4DJ Groovy Mix&lt;/a&gt;がAPI(Unary)もリアルタイムマルチ(StreamingHub)も活用しています。また、&lt;a href="https://virtualcast.jp/"&gt;バーチャルキャスト&lt;/a&gt; 2.0では、ルームというVR SNSの実装に活用されているそうです。&lt;/p&gt;
&lt;p&gt;ゲームーサーバーとしてC#が活用できるのか？といったことは、クラスメソッドさん向けにお話したゲームサーバー用の発表でも話しましたので、レポ記事 - &lt;a href="https://dev.classmethod.jp/articles/game-server-development-seminar-by-cysharp/"&gt;Cysharpの河合様をゲスト講師にお招きしてゲームサーバーに関する社内勉強会を開催しました！&lt;/a&gt;と、発表資料もどうぞ。&lt;/p&gt;
&lt;iframe src="//www.slideshare.net/slideshow/embed_code/key/Gfd2wf6fsBsj3y" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen&gt; &lt;/iframe&gt; &lt;div style="margin-bottom:5px"&gt; &lt;strong&gt; &lt;a href="//www.slideshare.net/neuecc/building-the-game-server-both-api-and-realtime-via-c" title="Building the Game Server both API and Realtime via c#" target="_blank"&gt;Building the Game Server both API and Realtime via c#&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href="https://www.slideshare.net/neuecc" target="_blank"&gt;Yoshifumi Kawai&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;
&lt;p&gt;世の中、適材適所なのは間違いありません。だからこそ、「C#がその適材である」と言えるだけの環境を提供していく、というのがCysharpのミッションでもあります。Microsoftも.NET Coreにおいて、当初はWindowsべったりなC#が今更Linuxとか言ったって、みたいな白い目で見られていました。しかし、最初のバージョンから4年が経ち、文句を言わせないだけのパフォーマンスでもって証明してきました。&lt;/p&gt;
&lt;p&gt;.NET 5はスタート地点だと考えています。C#も大変面白い環境になってきたと思うので、是非みんなと追求していけたら嬉しいですね。&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Mon, 16 Nov 2020 00:00:00 +0900</pubDate>
      <a10:updated>2020-11-16T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2020/10/01_595.html</guid>
      <link>https://neue.cc/2020/10/01_595.html</link>
      <title>ConsoleAppFramework v3 - より強化されたC#のためのコマンドラインツール用フレームワーク</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2020/10/01_595.html"&gt;ConsoleAppFramework v3 - より強化されたC#のためのコマンドラインツール用フレームワーク&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2020-10-01&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;.NET 5も控えていることだし、というのは関係ないのですが、CLIアプリケーションや大量のバッチをC#で簡単に作れるフレームワークであるところのConsoleAppFrameworkを思い立って更新しました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;github - &lt;a href="https://github.com/Cysharp/ConsoleAppFramework/"&gt;Cysharp/ConsoleAppFramework&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;基本的な構成である、Generic Hostの上に乗っかるCLIフレームワークというコンセプトには変更ありません。&lt;/p&gt;
&lt;p class="noindent"&gt;
&lt;img src="https://user-images.githubusercontent.com/46207/72047323-a08e0c80-32fd-11ea-850a-7f926adf3d22.png" width=640 /&gt;
&lt;/p&gt;
&lt;p&gt;メソッド定義がそのままコマンドライン引数になって、ヘルプなども自動生成してくれます。Host(ASP.NET Coreなどでも使う)の設定によってロガーやDIの設定、オプションの読み込みとバインディングも可能なので、細かいコンフィグレーションもそれで行えますし、基盤が一緒なためASP.NET Coreなどとの共通化なども可能になります。&lt;/p&gt;
&lt;p&gt;一番単純な例を出すとこんな感じになります。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Program : ConsoleAppBase
{
    static async Task Main(string[] args)
    {
        await Host.CreateDefaultBuilder().RunConsoleAppFrameworkAsync&amp;lt;Program&amp;gt;(args);
    }

    public void Hello([Option(&amp;quot;m&amp;quot;, &amp;quot;Message to display.&amp;quot;)]string message)
    {
        Console.WriteLine(&amp;quot;Hello &amp;quot; + message);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;&amp;gt; SampleApp.exe help

Usage: SampleApp [options...]

Options:
  -m, -message &amp;lt;String&amp;gt;    Message to display. (Required)

Commands:
  help          Display help.
  version       Display version.

&amp;gt; SampleApp.exe -m World
Hello World
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;今回の変更内容は&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;厳密っぽいオプション引数指定&lt;/li&gt;
&lt;li&gt;version, helpコマンドをデフォルトでヘルプ表示&lt;/li&gt;
&lt;li&gt;class/methodによる自動コマンド定義を class method コマンド引数で実行可能に(以前はClass.Methodだった)&lt;/li&gt;
&lt;li&gt;Interceptorを廃止してFilterによる拡張&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Interceptorの廃止だけが破壊的変更で、それ以外は互換性取れています。&lt;/p&gt;
&lt;h2&gt;厳密っぽいオプション引数指定&lt;/h2&gt;
&lt;p&gt;厳密っぽいというか、 &lt;code&gt;-i, --input&lt;/code&gt; のようにショート版の名前を-、ロング版の名前を--で一致を見るスタイルを適用可能にしました。デフォルトは-の数を無視します、つまり-inputでも--inputでも-----inputでも同じ扱いにしています。これ区別するの面倒くさいなーと思っていて、例えばgoのコマンドは全て-o, -outputみたいな-だけで済ませていて、私もそれでいいじゃん、むしろそれがいいじゃん、と思ってはいるのですが（なのでデフォルトはそう）、区別したい人も世の中には大勢いるとは思うので、そーいうオプションを足しました。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class Program : ConsoleAppBase
{
    static async Task Main(string[] args)
    {
        await Host.CreateDefaultBuilder().RunConsoleAppFrameworkAsync&amp;lt;Program&amp;gt;(args, new ConsoleAppOptions
        {
            StrictOption = true, // default is false.
            ShowDefaultCommand = false, // default is true
        });
    }

    public void Hello([Option(&amp;quot;m&amp;quot;, &amp;quot;Message to display.&amp;quot;)]string message)
    {
        Console.WriteLine(message);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;&amp;gt; SampleApp.exe help

Usage: SampleApp [options...]

Options:
  -m, --message &amp;lt;String&amp;gt;    Message to display. (Required)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;デフォルトが &lt;code&gt; -m, --message &amp;lt;String&amp;gt;&lt;/code&gt;だったhelpが、 &lt;code&gt;-m, --message&lt;/code&gt; になっています。-messageという指定をすると、名前が合わないというエラーが出るようになります。&lt;/p&gt;
&lt;p&gt;また、version, helpコマンドがデフォルトでヘルプ表示されるように今回からなりました。これもオプションで ShowDefaultCommand = false にすれば表示されなくなります（表示されなくなるだけで、コマンドとして存在はしています）。&lt;/p&gt;
&lt;h2&gt;class/methodによる自動コマンド定義&lt;/h2&gt;
&lt;p&gt;プロジェクトに沿ったバッチを作成する場合に、数十、時に数百個のバッチを作る必要があります。そうなると一々コマンド定義をしてる場合じゃねえ、という感じなので、自動でルーティングしてくれる機能がConsoleAppFrameworkにはあります。 MVCフレームワークがclass/methodでURLルーティングするのと同様に、class methodというサブコマンド階層を自動で生成してくれます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;class Program
{
    static async Task Main(string[] args)
    {
        // &amp;lt;T&amp;gt;を指定しないとアセンブリ全体から実行コマンドとなるクラスを検索して登録する
        await Host.CreateDefaultBuilder().RunConsoleAppFrameworkAsync(args);
    }
}

public class Foo : ConsoleAppBase
{
    public void Echo(string msg)
    {
        Console.WriteLine(msg);
    }

    public void Sum([Option(0)]int x, [Option(1)]int y)
    {
        Console.WriteLine((x + y).ToString());
    }
}

public class Bar : ConsoleAppBase
{
    public void Hello2()
    {
        Console.WriteLine(&amp;quot;H E L L O&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;&amp;gt; SampleApp.exe help
Usage: SampleApp &amp;lt;Command&amp;gt;

Commands:
  foo echo
  foo sum
  bar hello2
  help          Display help.
  version       Display version.

&amp;gt; SampleApp.exe foo sum 10 30
40
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;前のバージョンでは &amp;quot;Foo.Sum&amp;quot; というコマンド名での呼び出しだったのですが、それはコマンドラインツールとして不自然だろう、ということで、小文字の &amp;quot;class method&amp;quot; で実行されるようになりました。互換性のために &amp;quot;Foo.Sum&amp;quot;といった指定でも実行可能です。&lt;/p&gt;
&lt;h2&gt;Filterによる拡張&lt;/h2&gt;
&lt;p&gt;ASP.NET Core や &lt;a href="https://github.com/Cysharp/MagicOnion/"&gt;MagicOnion&lt;/a&gt; のように、フィルターによって実行前後を拡張できるようになりました。実装はConsoleAppFilterを継承して、await nextを実行するという非同期スタイルです。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class MyFilter : ConsoleAppFilter
{
    // Filter is instantiated by DI so you can get parameter by constructor injection.

    public async override ValueTask Invoke(ConsoleAppContext context, Func&amp;lt;ConsoleAppContext, ValueTask&amp;gt; next)
    {
        try
        {
            /* on before */
            await next(context); // next
        }
        catch
        {
            /* on after */
            throw;
        }
        finally
        {
            /* on finally */
        }
    }
}

// ConsoleAppContext
public class ConsoleAppContext
{
    public string?[] Arguments { get; }
    public DateTime Timestamp { get; }
    public CancellationToken CancellationToken { get; }
    public ILogger&amp;lt;ConsoleAppEngine&amp;gt; Logger { get; }
    public MethodInfo MethodInfo { get; }
    public IServiceProvider ServiceProvider { get; }
    public IDictionary&amp;lt;string, object&amp;gt; Items { get; }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;フィルターはグローバル(全てのメソッドで呼ばれる)、クラス、メソッド単位で付与することが可能です。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// フィルターの呼び出し順序はOrderで設定可能
await Host.CreateDefaultBuilder()
    .RunConsoleAppFrameworkAsync(args, options: new ConsoleAppOptions
    {
        GlobalFilters = new ConsoleAppFilter[] { new MyFilter2 { Order = -1 }, new MyFilter() }
    });

[ConsoleAppFilter(typeof(MyFilter3))]
public class MyBatch : ConsoleAppBase
{
    [ConsoleAppFilter(typeof(MyFilter4), Order = -9999)]
    [ConsoleAppFilter(typeof(MyFilter5), Order = 9999)]
    public void Do()
    {
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;シンプルさと機能性のバランスがうまくとれてるんじゃないでしょうか。すごく細かい調整ができるわけではないので、そこはどうしても割り切りという感じになってしまうのですが、それでもほとんどのユースケースは満たせているんじゃないかと思います。&lt;/p&gt;
&lt;p&gt;自動コマンド定義は大量にバッチを量産する場合に便利、でもあるのですが、それと同時にC#のプロジェクト一つで大量のバッチを管理できるようになる、というのも利点です。ファイル単位で管理するとわけわからん、ということになりがちですが、これなら綺麗に整理されますし、ロジックのメソッド化などで共通化もできます。また、フィルターを活用することによっても前処理や後処理などの共通化をより推し進められるでしょう。&lt;/p&gt;
&lt;p&gt;大きなプロジェクトの一部としてのバッチアプリの場合、ASP.NET Coreなどのコンフィグに定義されているDBのパスなどが、同じジェネリックホストなのでそのまま読み込めるのも楽になれるポイントです。ロガーのパフォーマンスが必要な場合は、 &lt;a href="https://github.com/Cysharp/ZLogger/"&gt;Cysharp/ZLogger&lt;/a&gt;を使うと良いでしょう、ZLoggerも Microsoft.Extensions.Logging の上に構築されているので、ジェネリックホストが基盤になっているConsoleAppFrameworkではスムーズに使えます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;await Host.CreateDefaultBuilder()
    .ConfigureLogging(x =&amp;gt;
    {
        x.ClearProviders();
        x.SetMinimumLevel(LogLevel.Trace);
        x.AddZLoggerConsole();
        x.AddZLoggerFile(&amp;quot;fileName.log&amp;quot;);
    })
    .RunConsoleAppFrameworkAsync(args);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;と、いうわけでより強力になったConsoleAppFramework、是非使ってみてください。&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Thu, 01 Oct 2020 00:00:00 +0900</pubDate>
      <a10:updated>2020-10-01T00:00:00+09:00</a10:updated>
    </item>
    <item>
      <guid isPermaLink="true">https://neue.cc/2020/08/20_594.html</guid>
      <link>https://neue.cc/2020/08/20_594.html</link>
      <title>async decoratorパターンによるUnityWebRequestの拡張とUniTaskによる応用的設計例</title>
      <description>&lt;h1&gt;&lt;a href="https://neue.cc/2020/08/20_594.html"&gt;async decoratorパターンによるUnityWebRequestの拡張とUniTaskによる応用的設計例&lt;/a&gt;&lt;/h1&gt;
&lt;ul class="date"&gt;&lt;li&gt;2020-08-20&lt;/li&gt;&lt;/ul&gt;
&lt;div class="entry_body"&gt;&lt;p&gt;&lt;a href="https://github.com/Cysharp/UniTask/"&gt;UniTask v2&lt;/a&gt;も2.0.30まで到達し、いい加減そろそろ安定したと言える頃合いです（ほんと！）。GitHub Star数も1000を超えて、準スタンダードとして安心して使ってもらえるレベルまで到達したと思うので、基盤部分から入れ込んで設計するとこんなことができますよ、という一例を出してみます。&lt;/p&gt;
&lt;p&gt;UnityWebRequestはかなりプリミティブな代物で、そのまま使うよりかはある程度はアプリケーションに沿ったラッパーを被せることがほとんどなのではないかと思います。しかし、ライブラリ単体でアプリケーションの要求を全て満たそうとするとヘヴィになりすぎたり、というかそもそもアプリケーション固有の要求には絶対に答えられない。というわけで、理想的なラッパーというのは、それ自身が極力軽量で、拡張性を持たせたプラガブルな仕組みが用意されているものということになります。プラガブルな拡張性がないと、例えば基盤ライブラリ側で用意されたラッパーをアプリケーションで使う場合にうまく要件をあわせられなくて、Forkして直接改造しちゃう、という不毛な自体になったりします。&lt;/p&gt;
&lt;p&gt;と、いうものを実現するにあたって、非同期リクエストにつきもののコールバックは非常に相性が悪い。コールバックの連鎖は、コード上でその場でネストしていくだけだったら数階層ネストしてもまぁまぁなんとかなりますが、プラガブルで複雑な組み合わせを実現しようとするとハンドリング不可能になります。&lt;/p&gt;
&lt;p&gt;そこでasync/await。async/awaitならコンパイラの力に頼ることでそういうものができます！&lt;/p&gt;
&lt;p&gt;async decoratorパターンという名前で紹介しますが、一般にはMiddlewareとして知られているものを実装します。ASP.NET Core、node.js(Express)やReactのMiddleware、PythonのWSGI、MagicOnionではFilterとして実装している、サーバーサイドではよく使われるデザインです。これは非常に強力なデザインパターンで、クライアント処理においても有用だと私は考えています。もし知らなければ絶対に覚えるべき……！&lt;/p&gt;
&lt;p&gt;MagicOnionのフィルターの図を持ってくるとこんな感じで&lt;/p&gt;
&lt;img src="https://user-images.githubusercontent.com/46207/50969421-cb465900-1521-11e9-8824-8a34cc52bbe4.png" width=600 /&gt;
&lt;p&gt;メソッドが外から内側に包まれて呼ばれていきます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;await next(
    await next(
        await next()
    )
);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通常やりたいことってざっくり&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ロギング&lt;/li&gt;
&lt;li&gt;モック&lt;/li&gt;
&lt;li&gt;タイムアウト処理&lt;/li&gt;
&lt;li&gt;リクエスト前のヘッダー処理&lt;/li&gt;
&lt;li&gt;リクエスト後のヘッダー処理&lt;/li&gt;
&lt;li&gt;ステータスコードに応じた例外時処理&lt;/li&gt;
&lt;li&gt;エラー時の処理（ポップアップ/リトライ/画面遷移）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;といったことだと思われますが、この仕組みなら、これだけで全て実装できます……！&lt;/p&gt;
&lt;p&gt;というわけで、実装例を見ていきましょう。&lt;/p&gt;
&lt;h2&gt;デコレーター例&lt;/h2&gt;
&lt;p&gt;まずは共通のインターフェイスとして以下のものを用意します。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public interface IAsyncDecorator
{
    UniTask&amp;lt;ResponseContext&amp;gt; SendAsync(RequestContext context, CancellationToken cancellationToken, Func&amp;lt;RequestContext, CancellationToken, UniTask&amp;lt;ResponseContext&amp;gt;&amp;gt; next);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;なるほどわからん。RequestContext、ResponseContextがそれぞれリクエスト/レスポンスに必要なデータが詰まっている単純な入れ物ということで特に気にしないこととして、大事なのはFunc nextです。&lt;/p&gt;
&lt;p&gt;とりあえず、単純な例としてヘッダーの前後で処理するなにかを。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class SetupHeaderDecorator : IAsyncDecorator
{
    public async UniTask&amp;lt;ResponseContext&amp;gt; SendAsync(RequestContext context, CancellationToken cancellationToken, Func&amp;lt;RequestContext, CancellationToken, UniTask&amp;lt;ResponseContext&amp;gt;&amp;gt; next)
    {
        context.RequestHeaders[&amp;quot;x-app-timestamp&amp;quot;] = context.Timestamp.ToString();
        context.RequestHeaders[&amp;quot;x-user-id&amp;quot;] = &amp;quot;132141411&amp;quot;; // どこかから持ってくる
        context.RequestHeaders[&amp;quot;x-access-token&amp;quot;] = &amp;quot;fafafawfafewaea&amp;quot;; // どこかから持ってくる2

        var respsonse = await next(context, cancellationToken); // 次のメソッドが呼ばれる

        var nextToken = respsonse.ResponseHeaders[&amp;quot;token&amp;quot;];
        UserProfile.Token = nextToken; // どこかにセットするということにする

        return respsonse;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;await next() によって連鎖しているデコレーターメソッドの内側に進んでいきます。つまり、その前に書けば前処理、後ろに書けば後処理になります。nextの定義がよくわからなくても、デコレーターを量産していくことは簡単です。そこが大事。そんなんでいいんです。&lt;/p&gt;
&lt;p&gt;さて、async/awaitと統合されていることによって、try-catch-finallyも自然に書けます。例えばロギングを用意すると&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class LoggingDecorator : IAsyncDecorator
{
    public async UniTask&amp;lt;ResponseContext&amp;gt; SendAsync(RequestContext context, CancellationToken cancellationToken, Func&amp;lt;RequestContext, CancellationToken, UniTask&amp;lt;ResponseContext&amp;gt;&amp;gt; next)
    {
        var sw = Stopwatch.StartNew();
        try
        {
            UnityEngine.Debug.Log(&amp;quot;Start Network Request:&amp;quot; + context.Path);

            var response = await next(context, cancellationToken);

            UnityEngine.Debug.Log($&amp;quot;Complete Network Request: {context.Path} , Elapsed: {sw.Elapsed}, Size: {response.GetRawData().Length}&amp;quot;);

            return response;
        }
        catch (Exception ex)
        {
            if (ex is OperationCanceledException)
            {
                UnityEngine.Debug.Log(&amp;quot;Request Canceled:&amp;quot; + context.Path);
            }
            else if (ex is TimeoutException)
            {
                UnityEngine.Debug.Log(&amp;quot;Request Timeout:&amp;quot; + context.Path);
            }
            else if (ex is UnityWebRequestException webex)
            {
                if (webex.IsHttpError)
                {
                    UnityEngine.Debug.Log($&amp;quot;Request HttpError: {context.Path} Code:{webex.ResponseCode} Message:{webex.Message}&amp;quot;);
                }
                else if (webex.IsNetworkError)
                {
                    UnityEngine.Debug.Log($&amp;quot;Request NetworkError: {context.Path} Code:{webex.ResponseCode} Message:{webex.Message}&amp;quot;);
                }
            }
            throw;
        }
        finally
        {
            /* log other */
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;また、処理を打ち切ることも簡単に実現できます。nextを呼ばないだけですから。例えばダミーのレスポンスを返す（テストに使ったり、サーバー側の実装が整わない間に進めたりするために）デコレーターが作れます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class MockDecorator : IAsyncDecorator
{
    Dictionary&amp;lt;string, object&amp;gt; mock;

    // Pathと型を1:1にして事前定義したオブジェクトを返す辞書を渡す
    public MockDecorator(Dictionary&amp;lt;string, object&amp;gt; mock)
    {
        this.mock = mock;
    }

    public UniTask&amp;lt;ResponseContext&amp;gt; SendAsync(RequestContext context, CancellationToken cancellationToken, Func&amp;lt;RequestContext, CancellationToken, UniTask&amp;lt;ResponseContext&amp;gt;&amp;gt; next)
    {
        // それと if (EditorProfile.EnableMocking) とか用意しておいて、モック使うかの有無をエディタ拡張辺りで切り替えれるようにしとくと楽
        if (mock.TryGetValue(context.Path, out var value))
        {
            // 一致したものがあればそれを返す（実際の通信は行わない）
            return new UniTask&amp;lt;ResponseContext&amp;gt;(new ResponseContext(value));
        }
        else
        {
            return next(context, cancellationToken);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;リトライ的な処理も考えてみましょう。例えば特殊なレスポンスコードを受信したときは、Tokenを取ってから再度処理し直してくれ、みたいな要求があるとします。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class AppendTokenDecorator : IAsyncDecorator
{
    public async UniTask&amp;lt;ResponseContext&amp;gt; SendAsync(RequestContext context, CancellationToken cancellationToken, Func&amp;lt;RequestContext, CancellationToken, UniTask&amp;lt;ResponseContext&amp;gt;&amp;gt; next)
    {
        string token = &amp;quot;token&amp;quot;; // どっかから取ってくるということにする
        RETRY:
        try
        {
            context.RequestHeaders[&amp;quot;x-accesss-token&amp;quot;] = token;
            return await next(context, cancellationToken);
        }
        catch (UnityWebRequestException ex)
        {
            // 例えば700はTokenを再取得してください的な意味だったとする
            if (ex.ResponseCode == 700)
            {
                // 別口でTokenを取得します的な処理
                var newToken = await new NetworkClient(context.BasePath, context.Timeout).PostAsync&amp;lt;string&amp;gt;(&amp;quot;/Auth/GetToken&amp;quot;, &amp;quot;access_token&amp;quot;, cancellationToken);
                context.Reset(this); // RequestContextの状態が汚れてる（？）ので、nextを最初からやり直す場合はResetする
                token = newToken;
                goto RETRY;
            }

            throw;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;シーケンシャルな処理を強制するために、キューを挟む場合はこのように書けます。私は並列リクエストできるなら極力並列にしたい派なので、あまりこういうのを挟むのは好きではないのですけれど、サーバー側の要求によっては必要な場合もあると思います。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class QueueRequestDecorator : IAsyncDecorator
{
    readonly Queue&amp;lt;(UniTaskCompletionSource&amp;lt;ResponseContext&amp;gt;, RequestContext, CancellationToken, Func&amp;lt;RequestContext, CancellationToken, UniTask&amp;lt;ResponseContext&amp;gt;&amp;gt;)&amp;gt; q = new Queue&amp;lt;(UniTaskCompletionSource&amp;lt;ResponseContext&amp;gt;, RequestContext, CancellationToken, Func&amp;lt;RequestContext, CancellationToken, UniTask&amp;lt;ResponseContext&amp;gt;&amp;gt;)&amp;gt;();
    bool running;

    public async UniTask&amp;lt;ResponseContext&amp;gt; SendAsync(RequestContext context, CancellationToken cancellationToken, Func&amp;lt;RequestContext, CancellationToken, UniTask&amp;lt;ResponseContext&amp;gt;&amp;gt; next)
    {
        if (q.Count == 0)
        {
            return await next(context, cancellationToken);
        }
        else
        {
            var completionSource = new UniTaskCompletionSource&amp;lt;ResponseContext&amp;gt;();
            q.Enqueue((completionSource, context, cancellationToken, next));
            if (!running)
            {
                Run().Forget();
            }
            return await completionSource.Task;
        }
    }

    async UniTaskVoid Run()
    {
        running = true;
        try
        {
            while (q.Count != 0)
            {
                var (tcs, context, cancellationToken, next) = q.Dequeue();
                try
                {
                    var response = await next(context, cancellationToken);
                    tcs.TrySetResult(response);
                }
                catch (Exception ex)
                {
                    tcs.TrySetException(ex);
                }
            }
        }
        finally
        {
            running = false;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;簡単なものから結構複雑そうなものまで、そこそこ単純に書けることがわかったと思います！ただのawait nextという仕組みを用意するだけで！&lt;/p&gt;
&lt;p&gt;用意したデコレーターはこんな風に使います。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// デコレーターの詰まったClientを生成（これは一度作ったらフィールドに保存可）
var client = new NetworkClient(&amp;quot;http://localhost&amp;quot;, TimeSpan.FromSeconds(10),
    new QueueRequestDecorator(),
    new LoggingDecorator(),
    new AppendTokenDecorator(),
    new SetupHeaderDecorator());

// 例えばこんな風に呼ぶということにする
var result = await client.PostAsync(&amp;quot;/User/Register&amp;quot;, new { Id = 100 });
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;async decoratorを実装する&lt;/h2&gt;
&lt;p&gt;ちょっと長くなりますが、そんな複雑なわけではありません。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;// 基本のインターフェイス
public interface IAsyncDecorator
{
    UniTask&amp;lt;ResponseContext&amp;gt; SendAsync(RequestContext context, CancellationToken cancellationToken, Func&amp;lt;RequestContext, CancellationToken, UniTask&amp;lt;ResponseContext&amp;gt;&amp;gt; next);
}

// リクエスト用の入れ物
public class RequestContext
{
    int decoratorIndex;
    readonly IAsyncDecorator[] decorators;
    Dictionary&amp;lt;string, string&amp;gt; headers;

    public string BasePath { get; }
    public string Path { get; }
    public object Value { get; }
    public TimeSpan Timeout { get; }
    public DateTimeOffset Timestamp { get; private set; }

    public IDictionary&amp;lt;string, string&amp;gt; RequestHeaders
    {
        get
        {
            if (headers == null)
            {
                headers = new Dictionary&amp;lt;string, string&amp;gt;();
            }
            return headers;
        }
    }

    public RequestContext(string basePath, string path, object value, TimeSpan timeout, IAsyncDecorator[] filters)
    {
        this.decoratorIndex = -1;
        this.decorators = filters;
        this.BasePath = basePath;
        this.Path = path;
        this.Value = value;
        this.Timeout = timeout;
        this.Timestamp = DateTimeOffset.UtcNow;
    }

    internal Dictionary&amp;lt;string, string&amp;gt; GetRawHeaders() =&amp;gt; headers;
    internal IAsyncDecorator GetNextDecorator() =&amp;gt; decorators[++decoratorIndex];

    public void Reset(IAsyncDecorator currentFilter)
    {
        decoratorIndex = Array.IndexOf(decorators, currentFilter);
        if (headers != null)
        {
            headers.Clear();
        }
        Timestamp = DateTimeOffset.UtcNow;
    }
}

// レスポンス用の入れ物
public class ResponseContext
{
    readonly byte[] bytes;

    public long StatusCode { get; }
    public Dictionary&amp;lt;string, string&amp;gt; ResponseHeaders { get; }

    public ResponseContext(byte[] bytes, long statusCode, Dictionary&amp;lt;string, string&amp;gt; responseHeaders)
    {
        this.bytes = bytes;
        StatusCode = statusCode;
        ResponseHeaders = responseHeaders;
    }

    public byte[] GetRawData() =&amp;gt; bytes;

    public T GetResponseAs&amp;lt;T&amp;gt;()
    {
        return JsonUtility.FromJson&amp;lt;T&amp;gt;(Encoding.UTF8.GetString(bytes));
    }
}

// 本体
public class NetworkClient : IAsyncDecorator
{
    readonly Func&amp;lt;RequestContext, CancellationToken, UniTask&amp;lt;ResponseContext&amp;gt;&amp;gt; next;
    readonly IAsyncDecorator[] decorators;
    readonly TimeSpan timeout;
    readonly IProgress&amp;lt;float&amp;gt; progress;
    readonly string basePath;

    public NetworkClient(string basePath, TimeSpan timeout, params IAsyncDecorator[] decorators)
        : this(basePath, timeout, null, decorators)
    {
    }

    public NetworkClient(string basePath, TimeSpan timeout, IProgress&amp;lt;float&amp;gt; progress, params IAsyncDecorator[] decorators)
    {
        this.next = InvokeRecursive; // setup delegate

        this.basePath = basePath;
        this.timeout = timeout;
        this.progress = progress;
        this.decorators = new IAsyncDecorator[decorators.Length + 1];
        Array.Copy(decorators, this.decorators, decorators.Length);
        this.decorators[this.decorators.Length - 1] = this;
    }

    public async UniTask&amp;lt;T&amp;gt; PostAsync&amp;lt;T&amp;gt;(string path, T value, CancellationToken cancellationToken = default)
    {
        var request = new RequestContext(basePath, path, value, timeout, decorators);
        var response = await InvokeRecursive(request, cancellationToken);
        return response.GetResponseAs&amp;lt;T&amp;gt;();
    }

    UniTask&amp;lt;ResponseContext&amp;gt; InvokeRecursive(RequestContext context, CancellationToken cancellationToken)
    {
        return context.GetNextDecorator().SendAsync(context, cancellationToken, next); // マジカル再帰処理
    }

    async UniTask&amp;lt;ResponseContext&amp;gt; IAsyncDecorator.SendAsync(RequestContext context, CancellationToken cancellationToken, Func&amp;lt;RequestContext, CancellationToken, UniTask&amp;lt;ResponseContext&amp;gt;&amp;gt; _)
    {
        // Postしか興味ないからPostにしかしないよ！
        // パフォーマンスを最大限にしたい場合はuploadHandler, downloadHandlerをカスタマイズすること

        // JSONでbodyに送るというパラメータで送るという雑設定。
        var data = JsonUtility.ToJson(context.Value);
        var formData = new Dictionary&amp;lt;string, string&amp;gt; { { &amp;quot;body&amp;quot;, data } };

        using (var req = UnityWebRequest.Post(basePath + context.Path, formData))
        {
            var header = context.GetRawHeaders();
            if (header != null)
            {
                foreach (var item in header)
                {
                    req.SetRequestHeader(item.Key, item.Value);
                }
            }

            // Timeout処理はCancellationTokenSourceのCancelAfterSlim(UniTask拡張)を使ってサクッと処理
            var linkToken = CancellationTokenSource.CreateLinkedTokenSource(cancellationToken);
            linkToken.CancelAfterSlim(timeout);
            try
            {
                // 完了待ちや終了処理はUniTaskの拡張自体に丸投げ
                await req.SendWebRequest().ToUniTask(progress: progress, cancellationToken: linkToken.Token);
            }
            catch (OperationCanceledException)
            {
                // 元キャンセレーションソースがキャンセルしてなければTimeoutによるものと判定
                if (!cancellationToken.IsCancellationRequested)
                {
                    throw new TimeoutException();
                }
            }
            finally
            {
                // Timeoutに引っかからなかった場合にてるのでCancelAfterSlimの裏で回ってるループをこれで終わらせとく
                if (!linkToken.IsCancellationRequested)
                {
                    linkToken.Cancel();
                }
            }

            // UnityWebRequestを先にDisposeしちゃうので先に必要なものを取得しておく（性能的には無駄なのでパフォーマンスを最大限にしたい場合は更に一工夫を）
            return new ResponseContext(req.downloadHandler.data, req.responseCode, req.GetResponseHeaders());
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;コアの処理はInvokeRecursiveです。もう少し単純化すると&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;UniTask&amp;lt;ResponseContext&amp;gt; InvokeRecursive(RequestContext context, CancellationToken cancellationToken)
{
    context.decoratorIndex++;
    return decorators[context.decoratorIndex].SendAsync(context, cancellationToken, InvokeRecursive);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;というように、IAsyncDecorator[]を少しずつ進めています。nextに入っているのは、配列の次の要素ということで、実際パターンの実装としてはそれだけです。&lt;/p&gt;
&lt;p&gt;また、NetworkClient自体がIAsyncDecoratorとなっていて、つまりnextを使わないものが最奥部の、最後の処理となるわけです。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;async UniTask&amp;lt;ResponseContext&amp;gt; IAsyncDecorator.SendAsync(RequestContext context, CancellationToken cancellationToken, Func&amp;lt;RequestContext, CancellationToken, UniTask&amp;lt;ResponseContext&amp;gt;&amp;gt; _)
{
    // nextは使わず、ここで実際の通信処理を始める
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;今回はasync decoratorの紹介なので本体の処理は雑なんですが（とりあえずJsonシリアライズ/デシリアライズしたものを受け渡しするだけ、的な）、まぁ概ね雰囲気はわかると思うのでそれでいいでしょう。通常Pathとリクエスト/レスポンス型は1:1のはずなので（そうなってなければサーバー実装者を〆て1:1にさせましょう)、その辺のメソッドを自動生成しておくとかはよくあります。また、戻り値を複数めいたこと（ポリモーフィズム的な）のしたいんだよなあ、という場合にはMessagePack for C#のUnionという機能が使えるので、活用するといい感じになります。&lt;/p&gt;
&lt;p&gt;面白要素としてはTimeoutの処理を CancellationTokenSource.CancelAfterSlim で行っているところでしょうか。TimeoutはWhenAnyを使って外側から処理するパターンもありますが、対象がCancellationTokenを受け取れる場合は、こっちのほうがより効率的で良いです。&lt;/p&gt;
&lt;h2&gt;タイトル画面に戻すなどダイアログとシーン遷移を組み合わせる&lt;/h2&gt;
&lt;p&gt;ネットワークリクエストに失敗した時って、なんかポップアップ出して 「エラーが発生しました タイトルに戻ります 「OK」」 みたいな画面が出てきますよね？それをやりましょうやりましょう。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public enum DialogResult
{
    Ok,
    Cancel
}

public static class MessageDialog
{
    public static async UniTask&amp;lt;DialogResult&amp;gt; ShowAsync(string message)
    {
        // (例えば)Prefabで作っておいたダイアログを生成する
        var view = await Resources.LoadAsync(&amp;quot;Prefabs/Dialog&amp;quot;);

        // Ok, Cancelボタンのどちらかが押されるのを待機
        return await (view as GameObject).GetComponent&amp;lt;MessageDialogView&amp;gt;().ClickResult;
    }
}

public class MessageDialogView : MonoBehaviour
{
    [SerializeField] Button okButton = default;
    [SerializeField] Button closeButton = default;

    UniTaskCompletionSource&amp;lt;DialogResult&amp;gt; taskCompletion;

    // これでどちらかが押されるまで無限に待つを表現
    public UniTask&amp;lt;DialogResult&amp;gt; ClickResult =&amp;gt; taskCompletion.Task;

    private void Start()
    {
        taskCompletion = new UniTaskCompletionSource&amp;lt;DialogResult&amp;gt;();

        okButton.onClick.AddListener(() =&amp;gt;
        {
            taskCompletion.TrySetResult(DialogResult.Ok);
        });

        closeButton.onClick.AddListener(() =&amp;gt;
        {
            taskCompletion.TrySetResult(DialogResult.Cancel);
        });
    }

    // もしボタンが押されずに消滅した場合にネンノタメ。
    private void OnDestroy()
    {
        taskCompletion.TrySetResult(DialogResult.Cancel);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;UniTaskCompletionSourceを活用して、ボタンが押されるまで待機というのを表現できます。こういう使い方、めっちゃするので覚えましょう。UniTaskCompletionSourceめっちゃ大事。&lt;/p&gt;
&lt;p&gt;では、これとasync decoratorを組み合わせていきます。&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;public class ReturnToTitleDecorator : IAsyncDecorator
{
    public async UniTask&amp;lt;ResponseContext&amp;gt; SendAsync(RequestContext context, CancellationToken cancellationToken, Func&amp;lt;RequestContext, CancellationToken, UniTask&amp;lt;ResponseContext&amp;gt;&amp;gt; next)
    {
        try
        {
            return await next(context, cancellationToken);
        }
        catch (Exception ex)
        {
            if (ex is OperationCanceledException)
            {
                // キャンセルはきっと想定されている処理なのでそのまんまスルー（呼び出し側でOperationCanceledExceptionとして飛んでいく)
                throw;
            }

            if (ex is UnityWebRequestException uwe)
            {
                // ステータスコードを使って、タイトルに戻す例外です、とかリトライさせる例外です、とかハンドリングさせると便利
                // if (uwe.ResponseCode) { }...
            }

            // サーバー例外のMessageを直接出すなんて乱暴なことはデバッグ時だけですよ勿論。
            var result = await MessageDialog.ShowAsync(ex.Message);

            // OK か Cancelかで分岐するなら。今回はボタン一個、OKのみの想定なので無視
            // if (result == DialogResult.Ok) { }...

            // シーン呼び出しはawaitしないこと！awaitして正常終了しちゃうと、この通信の呼び出し元に処理が戻って続行してしまいます
            // のでForget。
            SceneManager.LoadSceneAsync(&amp;quot;TitleScene&amp;quot;).ToUniTask().Forget();


            // そしてOperationCanceledExceptionを投げて、この通信の呼び出し元の処理はキャンセル扱いにして終了させる
            throw new OperationCanceledException();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;await使ってサクサク書いていけるので、道具が揃っていれば非同期処理とは思えないほど難なく書けます。&lt;/p&gt;
&lt;p&gt;一つ注意なのは、呼び出し元に処理を戻すか戻さないか。普通にreturnすると処理が戻っていってしまいますが、Exceptionを再スローすればそれはそれでエラーとして出てしまってウザい。タイトル画面に戻すということは、その通信処理はキャンセルされたということなので、ここは処理がキャンセルされたとマークするのが正解です。asyncメソッドでキャンセル扱いするにはOperationCanceledExceptionを投げる必要があります。これは初見だと？？？という感じになると思いますが、そういうものなのでそういうものとして受け入れませう。&lt;/p&gt;
&lt;h2&gt;まとめ&lt;/h2&gt;
&lt;p&gt;UniTaskで道具を揃えたんだから、別に普通にばんばん書けるでしょ、便利に使ってね！ぐらいの気持ちでいたのであんまり応用例みたいなのの発信をしてこなかったんですが、よくよく考えると別にそんなことないよね……。ということにやっと気づいたので、色々盛りだくさんで紹介してみましたがどうでしょう。&lt;/p&gt;
&lt;p&gt;最初はコールバックに毛が生えたもの程度でもいいとは思いますが、それだけじゃあ勿体ないわけです。せっかく言語機能として用意されているので、コールバックでは実現不可能なもう一段階上の設計が狙えるので、コールバックのことは忘れて使いこなしていって欲しいですね。&lt;/p&gt;
&lt;p&gt;キャンセル処理に癖があるのは事実ですが（実際、最後に書いた明示的にOperationCanceledExceptionを投げよう、とかは一から発想していくのは難しいかもしれません）、「引数の最後に渡す」「明示的に投げてもいい」の二点だけなので、これは慣れるしかないし、それを理由にして利用範囲を限定的にするのはよくないかなー、と思ってます。&lt;/p&gt;
&lt;p&gt;まぁ、ようするに普通に使ってね！便利ですよ実際！ということで。&lt;/p&gt;
&lt;/div&gt;</description>
      <pubDate>Thu, 20 Aug 2020 00:00:00 +0900</pubDate>
      <a10:updated>2020-08-20T00:00:00+09:00</a10:updated>
    </item>
  </channel>
</rss>